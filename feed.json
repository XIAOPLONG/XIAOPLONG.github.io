{
    "version": "https://jsonfeed.org/version/1",
    "title": "longlong",
    "subtitle": "每天一点积累",
    "icon": "https://xiaoplong.github.io/images/favicon.ico",
    "description": "一些学习笔记",
    "home_page_url": "https://xiaoplong.github.io",
    "items": [
        {
            "id": "https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF/",
            "url": "https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF/",
            "title": "java后端面试",
            "date_published": "2023-04-01T07:23:19.001Z",
            "content_html": "<h1 id=\"java后端\"><a class=\"anchor\" href=\"#java后端\">#</a> java 后端</h1>\n<p>相关内容参考连接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDI3MjE5\">https://cloud.tencent.com/developer/article/1427219</span></p>\n<h2 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h2>\n<h3 id=\"nginx是什么有什么用\"><a class=\"anchor\" href=\"#nginx是什么有什么用\">#</a> Nginx 是什么，有什么用？</h3>\n<h4 id=\"nginx是什么\"><a class=\"anchor\" href=\"#nginx是什么\">#</a> Nginx 是什么</h4>\n<p>engine x</p>\n<p>是一个 <code>高性能</code> 的 http 和反向代理 web 服务器。</p>\n<p>Nginx 是 <code>一个轻量级的Web服务器/反向代理服务器以及电子邮件代理服务器</code> ，在 BSD-like 协议下发行 (BSD 许可证)。</p>\n<p>特点：占有内存少，并发能力强。</p>\n<p>百度、京东、新浪、网易、腾讯、淘宝等网站用户都使用了 nginx。</p>\n<h4 id=\"有什么用\"><a class=\"anchor\" href=\"#有什么用\">#</a> 有什么用</h4>\n<ol>\n<li>做反向代理</li>\n</ol>\n<blockquote>\n<p>它可以隐藏后端服务器的数量，并保证后端服务器免受攻击。</p>\n<p>当用户向 nginx 代理服务器对应域名网站发起请求时，其实对用户这个请求进行处理的是后端真实服务器，中间的服务器就反向代理服务器。</p>\n</blockquote>\n<ol start=\"2\">\n<li>做负载均衡</li>\n</ol>\n<blockquote>\n<p>nginx 的负载均衡其实是反向代理的延申，当单台后端服务器无法处理前端庞大的请求时，可以为后端多准备几台服务器，共同分摊流量，这就是负载均衡，也叫均衡负载。</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011627420.webp\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>做域名重定向</li>\n</ol>\n<blockquote>\n<p>url 重定向是指把一个目录或文件的访问请求转发到另一个目录或者文件上，当用户发出相应的访问请求时，网页能跳转到指定的位置。</p>\n<p>分为 301 永久重定向，和 302 暂时重定向。</p>\n</blockquote>\n<ol start=\"4\">\n<li>做动静分离</li>\n</ol>\n<blockquote>\n<p>也是 nignx 反向代理功能，因为 nginx 处理静态资源的能力非常强，效率非常高，所以我们会将用户请求的 <code>静态资源直接交友nginx代理服务器处理</code> ，然后把 <code>动态的应用程序代理到后端，交给应用服务器处理</code> ，以此提高用户体验。</p>\n</blockquote>\n<ol>\n<li>缓存服务器</li>\n<li>邮件代理服务器</li>\n<li>微服务网关等</li>\n</ol>\n<h4 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h4>\n<p>Reverse Proxy 方式是指以 <code>代理服务器来接受internet上的连接请求</code> ，然后 <code>将请求转发给内部网络的服务器</code> ，并将 <code>从服务器上得到的结果返回给internet上请求连接的客户端</code> ，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011605008.jpeg\" alt=\"\" /></p>\n<p>图注：取自原文原文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82MjE1ZTVkMjQ1NTM=\">https://www.jianshu.com/p/6215e5d24553</span> (下图也是)</p>\n<p>例如，想访问 http://www.test.com/read 这个网站的 read 页面，但是 www.test.com 这个网站上不存在 read 页面，于是她从另外一个服务器上取过来，然后作为自己的内容返回给客户。这里 www.test.com 这个域名对应的服务器就设置了反向代理功能，这个服务器也就是反向代理服务器 vpn。</p>\n<h4 id=\"正向代理\"><a class=\"anchor\" href=\"#正向代理\">#</a> 正向代理</h4>\n<p>是 <code>一个位于客户端和原始服务器之间的服务器</code> ， <code>当客户端与原始服务器之间隔了防火墙，不能访问原始服务器时</code> ，为了从原始服务器取得内容， <code>客户端向代理发送一个请求并指定目标(原始服务器)</code> ，然后 <code>代理向原始服务器转发请求并将获得的内容返回给客户端</code> ，客户端才能使用正向代理。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011605927.jpeg\" alt=\"\" /></p>\n<p><code>正向代理工作原理就相当于一个跳板,跳过防火墙，让另一个服务器代替我们访问，然后返回内容</code> ，例如，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1nb29nbGUtdnA3aWk2YXAwMGt1ZDFmbW94YS5jb20=\">我访问不了 google.com</span>, 但是我能访问代理服务器 A，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1BZ29vZ2xlLXAyOHNkNTZlNGl4LmNvbQ==\">A 能访问 google.com</span>，于是先连上 A，告诉他我需要 google.com 的内容，A 服务器去取回来，然后返回给我。</p>\n<h4 id=\"正向代理和反向代理区别\"><a class=\"anchor\" href=\"#正向代理和反向代理区别\">#</a> 正向代理和反向代理区别</h4>\n<p><code>正向代理，是在客户端的</code> 。比如访问国外的一些网站，我们可能需要购买 vpn (正向代理)，然后通过正向代理 vpn，让用户绕过防火墙，从而连接到目标网络或服务。 <code>vpn是在我们的用户浏览器设置的</code> ，并 <code>不是在远端的服务器设置</code> 。</p>\n<p>浏览器先访问 vpn 地址，vpn 地址转发请求，并最后请求结果园路返回来。</p>\n<p><code>反向代理是作用在服务器端的，是一个虚拟ip(vip)</code> , 对用户的一个请求，会转发到多个后端处理器中的一台来出来该具体请求。</p>\n<h3 id=\"nginx的模块和工作原理是什么\"><a class=\"anchor\" href=\"#nginx的模块和工作原理是什么\">#</a> Nginx 的模块和工作原理是什么？</h3>\n<h4 id=\"nginx模块划分\"><a class=\"anchor\" href=\"#nginx模块划分\">#</a> Nginx 模块划分</h4>\n<ol>\n<li>Nginx 模块从结构上分为核心模块、基础模块和第三方模块：</li>\n</ol>\n<blockquote>\n<p>核心模块：HTTP 模块、EVENT 模块和 MAIL 模块<br />\n基础模块：HTTP　Access 模块、HTTP　FastCGI 模块、HTTP　Proxy 模块、HTTP　Rewrite 模块<br />\n第三方模块：HTTP　Upstream　Request　Hash 模块、Notice 模块、HTTP　Access　Key 模块</p>\n</blockquote>\n<ol start=\"2\">\n<li>从功能上</li>\n</ol>\n<blockquote>\n<p>Core 核心博客：构建 nginx 基础服务，管理其它模块。<br />\nHandlers 处理器模块：此类模块直接处理请求，并进行输出内容和修改 headers 信息等操作。<br />\nFilters 过滤器模块：此类模块主要对其它处理器模块输出的内容进行修改操作，最后由 Nginx 输出。<br />\nProxies 代理类模块：此类模块是 Nginx 的 HTTP Upstream 之类的模块，这些模块主要与后端一些服务，比如 FastCGI 等进行交互，实现服务代理和负载均衡等功能。</p>\n</blockquote>\n<p>Nginx 的核心模块主要负责建立 nginx 服务模型、管理网络层和应用层协议、以及启动针对特定应用的一系列候选模块。其它模块负责分配给 web 服务器的实际工作：</p>\n<blockquote>\n<ol>\n<li>当 Nginx 发送文件或者转发请求到其它服务器，由 Handlers 或 Proxies 提供服务。</li>\n<li>当需要 Nginx 把输出压缩或者在服务端加一些东西，由 Filters 提供服务。</li>\n</ol>\n</blockquote>\n<h3 id=\"nginx如何处理http请求\"><a class=\"anchor\" href=\"#nginx如何处理http请求\">#</a> Nginx 如何处理 HTTP 请求</h3>\n<h4 id=\"http处理周期\"><a class=\"anchor\" href=\"#http处理周期\">#</a> HTTP 处理周期</h4>\n<blockquote>\n<p>客户端发送 HTTP 请求 &gt; Nginx 基于配置文件中的位置选择一个合适的处理模块 &gt; 如果有负载均衡模块，选择一台后端服务器 &gt; 处理模块进行处理并把缓冲放到第一个过滤模块上 &gt; 第一个过滤模块处理后输出给第二个过滤模块 &gt; 然后第二个送第三个 &gt;.... 以此类推 &gt; 最后把响应发给客户端</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012127713.jpeg\" alt=\"\" /></p>\n<p>服务器启动时，每个 handlers (处理模块) 都有机会映射到配置文件中定义的特定位置；如果有多个 handlers 映射到特定位置时，只有一个会保留下来；这说明配置文件有冲突项，应该避免。</p>\n<p>处理模块返回的三种形式：</p>\n<ol>\n<li>OK</li>\n<li>ERROR</li>\n<li>或者放弃处理这个请求而让默认处理模块来处理 (它主要用来处理一些静态文件，事实上如果是位置争取而且真实的静态文件，默认的处理模块会抢先处理)。</li>\n</ol>\n<p>1）如果 handlers 把请求反向代理到后端的服务器，就变成另外一类的模块：load-balancers (负载均衡模块)</p>\n<p>负载均衡模块的配置中有一组后端服务器，当一个 HTTP 请求过来时，它决定哪台服务器应当获得这个请求。</p>\n<p>Nginx 的负载均衡模块采用两种方法：</p>\n<ol>\n<li>轮转法：它处理请求从头到尾分发</li>\n<li>IP 哈希法：在众多请求的情况 下，它确保来自同一个 IP 的请求会分发到相同的后端服务器。</li>\n</ol>\n<p>2）如果 handlers 没有产生错误，filters (过滤模块) 将被调用。多个 filters 能映射到每个位置，所以每个请求都可以被压缩成块。她们的执行顺序在编译时决定。</p>\n<p>filters 是经典的接力链表模型。<br />\n一个 filters 被调用，完成任务后，调用下一个 filters，直至最后一个 filters。</p>\n<p>过滤链表的特别之处：</p>\n<blockquote>\n<p>每个 filters 不会等上一个 filters 全部完成；<br />\n它能把前一个 filters 的输出作为其处理内容；</p>\n</blockquote>\n<p>过滤模块能以 buffer (缓冲区) 为单位进行操作，这些 buffer 一般都是一页 4k 大小，其大小也可以在 nginx.conf 文件中配置。</p>\n<p><code>Nginx</code>  本身做的工作实际很少， <code>当它接收到一个HTTP请求时，它仅仅是通过查找配置文件将此次请求映射到一个location block</code> ，而此 <code>location中所配置的各个指令则会启动不同的模块去完成工作</code> ，因此 <code>模块可以看作是Nginx真正的劳动者</code> 。</p>\n<p><code>通常一个location中的指令会涉及一个handler模块和多个filter模块,当然多个location也可以复用同一个模块。handler模块负责处理请求，完成响应内容的生成，而filter模块对响应内容进行处理。</code></p>\n<h4 id=\"nginx请求处理\"><a class=\"anchor\" href=\"#nginx请求处理\">#</a> Nginx 请求处理</h4>\n<p><code>Nginx在启动时会以daemon形式在后台运行，采用多线程、异步非阻塞IO事件模型来出来各种连接请求。</code></p>\n<p>多线程模型包括一个 master 进程，多个 worker 进程。 <code>一般worker进程个数是根据服务器CPU核数来决定的</code> 。 <code>master进程负责管理Nginx本身和其它worker进程</code> 。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012136594.jpeg\" alt=\"\" /></p>\n<p>Master-Worker 模式</p>\n<blockquote>\n<p>4 个 worker 进程的父进程都是 master 进程。表示 worker 进程都是从父进程 fork (分叉) 出来的，并且父进程的 ppid (uid 用户 ID，pid 是进程 ID，ppid 是父进程 ID) 为 1，表示其为 daemon 进程。</p>\n<p>daemon 进程，守护进程，是一类在后台运行的特殊进程，用于执行特定的系统任务。很多守护进程在系统引导的时候启动，并且一直运行到系统关闭；另一些只在需要的时候才启动，完成任务后自动结束。</p>\n<p>Master 进程作用：获取并验证配置文件 nginx.conf；管理 worker 进程。</p>\n<p>Worker 进程的作用：没一个 Worker 进程都维护一个线程 (避免线程切换)，处理连接和请求；注意 Worker 进程的个数由配置文件决定，一般和 CPU 核数有关 (又利于进程切换)，配置几个就有几个 Worker 进程。<br />\n过滤模块链以流水线的方式高效地向客户端发送响应信息。</p>\n</blockquote>\n<h4 id=\"简单的http请求\"><a class=\"anchor\" href=\"#简单的http请求\">#</a> 简单的 HTTP 请求</h4>\n<p>Nginx 的内部来看，一个 HTTP Request 请求的处理过程：</p>\n<blockquote>\n<ol>\n<li>初始化 HTTP Request (读取来自客户端的数据，生成 HTTP Request 对象，该对象含有该请求的所有信息)</li>\n<li>处理请求头</li>\n<li>处理请求体</li>\n<li>如果有的话，调用与此请求 (URL 或者 Location) 关联的 handler。<br />\n依次调用各 phase (阶段) handler 进行处理</li>\n</ol>\n</blockquote>\n<p><code>建立过程中，对于nginx监听到的每个客户端连接，都会将它的读事件的handler设置为ngx_http_init_request函数，这个函数就是请求处理的入口。</code></p>\n<h2 id=\"spring\"><a class=\"anchor\" href=\"#spring\">#</a> spring</h2>\n<h3 id=\"spring-mvc的工作原理\"><a class=\"anchor\" href=\"#spring-mvc的工作原理\">#</a> Spring MVC 的工作原理</h3>\n<p>MVC，model、view、controller，代表 web 应用程序的三种职责：</p>\n<ol>\n<li>model 模型：用于存储数据以及能处理用户请求的业务逻辑</li>\n<li>view 视图：向控制器提交数据，显示模型 model 中的数据。</li>\n<li>controller 控制器：根据师徒提出的请求，判断将请求和数据交给哪个模型处理，处理后的有关结果交给哪个图书更新显示。</li>\n</ol>\n<p>SpringMVC 模型就是一种基于 Servlet 的 MVC 模型。</p>\n<p>工作原理：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012159813.webp\" alt=\"\" /></p>\n<ol>\n<li>哭护短发起请求 http，通过 web.xml 找到前端控制器 DispatchServlet</li>\n<li>由前端控制器通过配置文件 servletName-servlet.xml 寻找一个或多个 HandlerMapping 映射处理器，找到用于处理请求的 controller 后端控制器</li>\n<li>DispatchServlet 将请求提交到 controller</li>\n<li>controller 处理业务逻辑后</li>\n<li>controller 返回数据 ModelAndVIew 给 DIspatchServlet</li>\n<li>DIspatchServlet 寻找一个或多个 ViewResolver 师徒解析器，找到 ModelAndView 指定的视图</li>\n<li>DispatchServlet 负责将结果返回 View 客户端 JSP 页面，封装 HTTP</li>\n<li>View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。</li>\n</ol>\n<h2 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> session</h2>\n",
            "tags": [
                "java",
                "Spring"
            ]
        },
        {
            "id": "https://xiaoplong.github.io/mavenCreate/",
            "url": "https://xiaoplong.github.io/mavenCreate/",
            "title": "eclipse创建maven项目test",
            "date_published": "2023-03-25T14:22:00.714Z",
            "content_html": "<h1 id=\"eclipsemaven项目create\"><a class=\"anchor\" href=\"#eclipsemaven项目create\">#</a> eclipse&lt;Maven 项目 create&gt;</h1>\n<h2 id=\"集成外部maven\"><a class=\"anchor\" href=\"#集成外部maven\">#</a> 集成外部 maven</h2>\n<p>windows&gt;Maven&gt;Installations</p>\n<p>add 本地 maven 根路径，apply 添加。</p>\n<p>本地自带的 maven 不好用。</p>\n<h2 id=\"选择maven配置文件路径\"><a class=\"anchor\" href=\"#选择maven配置文件路径\">#</a> 选择 maven 配置文件路径</h2>\n<p>windows&gt;Maven&gt;User Setting</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/npm%E5%92%8Cnode.js/",
            "url": "https://xiaoplong.github.io/npm%E5%92%8Cnode.js/",
            "title": "node.js、npm",
            "date_published": "2023-03-17T14:31:29.510Z",
            "content_html": "<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> node.js</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>node.js 是一个 <code>基于chrome V8引擎的JavaScript运行环境(C++程序)</code> 。</p>\n<p>它不是库，是一个运行环境，或者说是一个 JS 言语解释器， <code>目的是提供一个JS的运行环境</code> ，使得后端服务器也能用 js 编写。</p>\n<p>由 C++ 编写开发。</p>\n<p><code>最初定位于用来写服务器代码</code> 。</p>\n<p>web 开发，前端是用 js 写的，但是写后端服务器代码的时候，还必须用到另外的语言，但是 <code>node.js出现后，后端也可以用js写了</code> 。</p>\n<p><code>web前端的js代码，最终还是运行在浏览器中的，所以运行的时候，不依赖于Node.js</code> 。</p>\n<p>但是，node.js 诞生以后，类似于 react/vuejs 这样的前端框架的开发环境变得非常强大和负责，node.js 就是这些开发环境运行的基础。</p>\n<h2 id=\"nodejs运行js方式\"><a class=\"anchor\" href=\"#nodejs运行js方式\">#</a> node.js 运行 js 方式</h2>\n<ol>\n<li>node.js 交互环境下运行</li>\n<li>把代码写入文件中，如何用 node 命令执行文件代码</li>\n</ol>\n<h1 id=\"npm和nvm区别\"><a class=\"anchor\" href=\"#npm和nvm区别\">#</a> npm 和 nvm 区别</h1>\n<p>nvm 是 node.js 的版本管理工具，node.js version manager。可以简单的对 node.js 的版本进行操作。</p>\n<p>npm 是依赖包的管理工具。</p>\n<h1 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>npm 是随同 node.js 一起安装的 <code>包管理工具</code> ，用于 <code>解决node.js代码部署上的问题</code> 。</p>\n<p>npm 是 <code>世界上最大的软件包仓库</code> 。</p>\n<p>新版的 node.js 已经集成了 npm，所以之前 npm 也一起下好了。</p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li>\n<p>从 npm 服务器下载别人编写的第三方包到本地使用</p>\n</li>\n<li>\n<p>从 npm 服务器下载并安装别人编写的命令行程序到本地使用</p>\n</li>\n<li>\n<p>将自己编写的包或命令行程序上传到 npm 服务器供别人使用 (例如，利用 npm 指令将自己的 blog 上传到 GitHub 上供别人参看)</p>\n</li>\n</ol>\n<h2 id=\"全局安装和本地安装的区别\"><a class=\"anchor\" href=\"#全局安装和本地安装的区别\">#</a> 全局安装和本地安装的区别</h2>\n<p>全局安装比本地安装的指令，在最后多了一个  <code>-g</code> 。</p>\n<h3 id=\"本地安装\"><a class=\"anchor\" href=\"#本地安装\">#</a> 本地安装</h3>\n<p>将安装包放在 <code>./node_modules</code>  下 ( <code>运行npm命令时所在的目录</code> ), 如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</p>\n<p>可以通过 require () 来引入本地安装的包。</p>\n<h3 id=\"全局安装\"><a class=\"anchor\" href=\"#全局安装\">#</a> 全局安装</h3>\n<p>将安装包放在 <code>/usr/local</code>  下或者 node 的安装目录。</p>\n<p>可以直接在命令行中使用。</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/mvn/",
            "url": "https://xiaoplong.github.io/mvn/",
            "title": "mvn是什么",
            "date_published": "2023-03-17T14:09:55.110Z",
            "content_html": "<h1 id=\"nvm\"><a class=\"anchor\" href=\"#nvm\">#</a> NVM</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p><code>Node.js version manager</code></p>\n<p>即 node.js 版本管理</p>\n<p>它是一个 <code>命令行应用</code> ，可以 <code>协助快速地更新、安装、使用、卸载本机的全局node.js版本</code> 。</p>\n<p>它可以在同一台电脑上进行多个 node 版本之间的切换，正是它的价值所在。</p>\n<p>我们进行多个项目开发时，所使用的 node 版本是不一样的，维护多个版本的 node 非常麻烦，如果能切换成一个 node 就好了，这正是 nvm 的价值，切换 node 版本。</p>\n<h2 id=\"nvm常用管理版本命令\"><a class=\"anchor\" href=\"#nvm常用管理版本命令\">#</a> nvm 常用管理版本命令</h2>\n<ol>\n<li>\n<p>nvm install latest -- 安装最新 node.js 版本</p>\n</li>\n<li>\n<p>nvm use 版本号  -- 使用指定的具体版本</p>\n</li>\n<li>\n<p>nvm ls -- 列出已经安装的所有版本 ls 即 list</p>\n</li>\n<li>\n<p>nvm uninstall 版本号 -- 卸载指定版本</p>\n</li>\n<li>\n<p>nvm ls available --windows 版本，列出所有可安装的 node.js 版本</p>\n</li>\n<li>\n<p>nvm current -- 显示当前版本 node</p>\n</li>\n<li>\n<p>nvm alias -- 给不同版本添加别名</p>\n</li>\n<li>\n<p>nvm unalias -- 删除已定义别名</p>\n</li>\n<li>\n<p>nvm reinstall-packages -- 当前版本 node 环境下，重新全局安装版本号的 npm 包</p>\n</li>\n</ol>\n<h2 id=\"相关事项\"><a class=\"anchor\" href=\"#相关事项\">#</a> 相关事项</h2>\n<p>windows10，nvm 安装完成后，会自动把对应的环境变量添加到系统上。</p>\n<p>安装完后，直接 cmd 运行 nvm 检查是否出错，即可。</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/%E8%80%83%E5%85%AC/",
            "url": "https://xiaoplong.github.io/%E8%80%83%E5%85%AC/",
            "title": "行测",
            "date_published": "2023-02-14T16:00:00.000Z",
            "content_html": "<h1 id=\"资料分析\"><a class=\"anchor\" href=\"#资料分析\">#</a> 资料分析</h1>\n<h2 id=\"一增长率\"><a class=\"anchor\" href=\"#一增长率\">#</a> (一) 增长率</h2>\n<h3 id=\"相关概率\"><a class=\"anchor\" href=\"#相关概率\">#</a> 相关概率</h3>\n<p>增长率 (增幅)：有正负，比较大小时要带符号</p>\n<h3 id=\"增长率问题\"><a class=\"anchor\" href=\"#增长率问题\">#</a> 增长率问题</h3>\n<h4 id=\"公式\"><a class=\"anchor\" href=\"#公式\">#</a> 公式</h4>\n<blockquote>\n<p>r = 增长量 / 基期 (核心公式) = 增长率 /(现期 - 增长量) (常考 1) = (现期 - 基期)/ 基期</p>\n<p>总的来说， <code>基期 = 现期 - 增长量</code> 是为核心关系。</p>\n</blockquote>\n<ol>\n<li><code>增长率 = 现期/基期 - 1</code></li>\n<li><code>增长率 = 增长量/基期</code></li>\n</ol>\n<h4 id=\"增长率计算型\"><a class=\"anchor\" href=\"#增长率计算型\">#</a> 增长率计算型</h4>\n<h5 id=\"截位直除法\"><a class=\"anchor\" href=\"#截位直除法\">#</a> 截位直除法</h5>\n<p>截几位：<br />\n除前先看看选项之间的差距，如果选项之间差距大则截取两位，选项差距小则截取三位，且需要注意截取原则（四舍五入）。</p>\n<p>差距大判定：1. 首位不同；2. 首位相同，侧位大于首位。</p>\n<p>截位原则：看下一位（保留两位看第三位），四舍五入。</p>\n<p>截取谁：<br />\n一步除法：只截分母。</p>\n<p>多步除法：分子分母都截。</p>\n<p>注意：若选项之间存在 10 的倍数关系时，要注意判断数量级。</p>\n<p>总的来说就是，现期 / 基期 = 增长量 / 基期相除时，可以将分子分母截取部分进行除法，例如 637/3059 和 520/662 进行比较时，前者可以截取为 6/30，后者可以截取为 5/6，所以前者的增长率大于后者 (因为增长率都为现期 / 基期 - 1，所以只要比较现期 / 基期即可)</p>\n<h3 id=\"百分数和百分点问题\"><a class=\"anchor\" href=\"#百分数和百分点问题\">#</a> 百分数和百分点问题</h3>\n<ol>\n<li>百分数表示两个量的比例关系，计算时用 <code>除法</code> 。</li>\n<li>百分点表示百分数的变化，计算时用 <code>加减法</code> 。</li>\n</ol>\n<h3 id=\"增长率和倍数问题\"><a class=\"anchor\" href=\"#增长率和倍数问题\">#</a> 增长率和倍数问题</h3>\n<p>(1) 增长率：</p>\n<ol>\n<li>识别：增长 + 比例 (相对量，如百分数、倍数、成数)，就叫做 <code>增速、增幅、增值率</code> 。</li>\n<li>核心关系：现期 = 基期 + 增长量</li>\n<li>核心公式：增长率 = (现期 - 基期)/ 基期</li>\n</ol>\n<p>(2) 倍数：<br />\n是几倍和多几倍的区别：<br />\n1. A 是 B 的几倍，直接 A/B<br />\n2. A 比 B 多几倍，计算时还要减去 B 的那一倍，即：A/B - 1</p>\n<p>(3) 增长率和倍数的关系：<br />\n <code>倍数 = 增长率 + 1,即倍数 = 现期/基期</code> <br />\n证明：现期为 A，基期为 B，则 A 比 B 多几倍，即为 A/B - 1 = (A-B)/B = (现期 - 基期)/ 基期 = 增长率，所以说明多几倍的倍数 = 增长率 + 1。</p>\n<h3 id=\"成数和翻番\"><a class=\"anchor\" href=\"#成数和翻番\">#</a> 成数和翻番</h3>\n<h4 id=\"成数概念\"><a class=\"anchor\" href=\"#成数概念\">#</a> 成数概念</h4>\n<p>几成：十分之几，也就是百分之几十。</p>\n<h4 id=\"番数\"><a class=\"anchor\" href=\"#番数\">#</a> 番数</h4>\n<p>翻了几番就是几个 2 相乘，比如翻了三番就是 3 个 2 相乘，变为原来的 8 倍。</p>\n<h3 id=\"增幅-降幅和变化幅度\"><a class=\"anchor\" href=\"#增幅-降幅和变化幅度\">#</a> 增幅、降幅和变化幅度</h3>\n<h4 id=\"相关概念\"><a class=\"anchor\" href=\"#相关概念\">#</a> 相关概念</h4>\n<ol>\n<li>增幅即为增长率， <code>有正负</code></li>\n<li>降幅是为下降的幅度， <code>只有负的</code> ，比较大小时，只比较绝对值。注意：正增长率不参与计算，而且 <code>要记住带负号。</code></li>\n<li>变化幅度指的是增长或下降的绝对比率， <code>变化幅度有正负</code> ，比较大小时，用增长率的绝对值。</li>\n</ol>\n<h3 id=\"增长率比较型问题\"><a class=\"anchor\" href=\"#增长率比较型问题\">#</a> 增长率比较型问题</h3>\n<h4 id=\"相关题型\"><a class=\"anchor\" href=\"#相关题型\">#</a> 相关题型：</h4>\n<ol>\n<li>已知现期、基期，比较增长率 r=(现期 - 基期)/ 基期 = 现期 / 基期 - 1; <code>直接比较现期/基期即可</code> 。</li>\n<li>当现期和基期看不出时，根据倍数关系是否明显来比较增速（即增长率）。</li>\n</ol>\n<blockquote>\n<p>例如，当现期 / 基期 = n (一个倍数)+（一段小数）时， <code>倍数明显，即n可以明显看出是逐渐增加或减小的差距时</code> ， <code>截掉后段，直接看n倍数比较即可，看现期/基期</code> ；当 <code>n倍数不明显，即n部分为相同倍数，后端小数部分不能忽略时</code> ，要看 <code>后段小数部分，即用(现期-基期)/基期比较</code> 。</p>\n</blockquote>\n<h2 id=\"二增长量\"><a class=\"anchor\" href=\"#二增长量\">#</a> (二) 增长量</h2>\n<h3 id=\"一般增长量\"><a class=\"anchor\" href=\"#一般增长量\">#</a> 一般增长量</h3>\n<p>增长 + 单位（绝对量）</p>\n<h4 id=\"公式-2\"><a class=\"anchor\" href=\"#公式-2\">#</a> 公式</h4>\n<ol>\n<li>简单： <code>增长量 = 现期 - 基期</code></li>\n<li>重点： <code>增长量 = 现期/(1+增长率)*增长率</code></li>\n</ol>\n<h3 id=\"年均增长量\"><a class=\"anchor\" href=\"#年均增长量\">#</a> 年均增长量</h3>\n<p>年均 + 增长 + 单位（绝对量）</p>\n<h4 id=\"公式-3\"><a class=\"anchor\" href=\"#公式-3\">#</a> 公式</h4>\n<p><code>年均增长量 = (现期-基期)/N(年份差)</code></p>\n<h4 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h4>\n<p>年均增长量相关题型， <code>注意：2011~2015这5年间，基期是2010.现期是2015，年份差是5，基期要往前推一年，2011推到2010年。</code></p>\n<h3 id=\"百分数化分数\"><a class=\"anchor\" href=\"#百分数化分数\">#</a> 百分数化分数</h3>\n<h4 id=\"三步速记\"><a class=\"anchor\" href=\"#三步速记\">#</a> 三步速记</h4>\n<ol>\n<li>7~12：加和 (证书部分 + 分母) 为 20，例如 12.5% = 1/8,11.1%=1/9,9.1%=1/11,8.3%=1/12,7.7%=1/13</li>\n<li>(16,6) 和 (14,7) 互换的两对，例如 16.7%=1/6,6.25%=1/16,16 和 6 互换；14.3%=1/7,7.1%=1/14;</li>\n</ol>\n<p>注意：7.7% 和 7.1% 都是以 7 开头，如果 <code>快到8%了，就加和20</code> ，如果是 <code>7开头一点，则和14进行互换</code> 。(大加，小换)</p>\n<ol start=\"3\">\n<li>(17,18,19)： <code>5.9%=1/17,5.6%=1/18,5.3%=1/10;</code> (逐层一增 1 一减 0.3%)</li>\n</ol>\n<p>注意：6.25%=1/16,6.7%=1/15;</p>\n<p>总结：总的来说，百化分就是将增长率 r 化为 1/N 形式。</p>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<ol>\n<li>放缩法</li>\n</ol>\n<blockquote>\n<p>例如，1.43%：14.3%=1/7, 所以 1.43%=1/70;</p>\n<p>67%:6.7%=1/15,67%=1/1.5</p>\n<p>1.9%:1.9% 约等于 2%=1/50</p>\n</blockquote>\n<ol start=\"2\">\n<li>取中法</li>\n</ol>\n<blockquote>\n<p>18.5% 介于 16.7%=1/6 和 20%=1/5，取中则 18.5% 约等于 1/5.5</p>\n</blockquote>\n<ol start=\"3\">\n<li>公式法</li>\n</ol>\n<blockquote>\n<p>例如：44%，44/100 化为 1/N，则 N 约等于 2.2，所以 44% 可以看作 1/2.2;</p>\n</blockquote>\n<h3 id=\"增长量的比较\"><a class=\"anchor\" href=\"#增长量的比较\">#</a> 增长量的比较</h3>\n<ol>\n<li>已知现期和 <code>基期</code> ，比较增长量，增长量 = 现期 - 基期，柱形图看高低</li>\n<li>已知现期和 <code>增长率</code> ，比较增长量，口诀： <code>大大则大，一大一小百化分</code>  (“大大则大”：它比较的是 A 和 B 的现期和增长率大小关系，比如 A 的现期比 B 大，降幅也比 B 大，那大大则大，A 下降量肯定是比 B 大的；：“一大一小百化分”：用到增长量的第二个重点公式，将百化分后代入计算增长量)。</li>\n</ol>\n<p>例如，A 有 200 零钱，同比下降 20%，B 有 100 零钱，同比小将 25%。</p>\n<blockquote>\n<p>一大一小，用增长量 = 现期 /(增长率 + 1)* 增长率，A：20%=1/5，增长量 = 200/(1/5+1)*1/5=200/6=30+_;</p>\n</blockquote>\n<ol start=\"3\">\n<li>有上升、下降比较变化的时候，也有百化分来做；</li>\n</ol>\n<blockquote>\n<p>例如，100 增加 10%，100 下降 10%，问谁的变化量大时，百化分，10%=1/10, 增长量 = 100/11, 减少量 = 100/9;</p>\n</blockquote>\n<h3 id=\"百化分\"><a class=\"anchor\" href=\"#百化分\">#</a> 百化分</h3>\n<ol>\n<li>增长率百化分，增长率 r 化为 1/n 形式</li>\n<li>增长量 = 现期 /(1 + 增长率)* 增长率</li>\n</ol>\n<blockquote>\n<p>总之，增长量 = 现期 /(n+1), 减少量 = 现期 /(n-1)。</p>\n</blockquote>\n<h2 id=\"三比重\"><a class=\"anchor\" href=\"#三比重\">#</a> (三) 比重</h2>\n<h3 id=\"预期比重\"><a class=\"anchor\" href=\"#预期比重\">#</a> 预期比重</h3>\n<p><code>比重=部分/总体</code> <br />\n (1) 求比重</p>\n<ol>\n<li>A 占 B 的比重  A/B</li>\n<li>A 中 B 的占比  B/A<br />\n (2) 求部分 (乘法)：部分 = 整体 * 比重<br />\n (3) 求总体 (除法)：总体 = 部分 / 比重</li>\n</ol>\n<h3 id=\"利润题\"><a class=\"anchor\" href=\"#利润题\">#</a> 利润题</h3>\n<ol>\n<li>\n<p>资料分析<br />\n <code>利润率=利润/收入</code></p>\n</li>\n<li>\n<p>数量关系<br />\n <code>利润率=利润/成本</code></p>\n</li>\n</ol>\n<h3 id=\"增长贡献率\"><a class=\"anchor\" href=\"#增长贡献率\">#</a> 增长贡献率</h3>\n<p>比重的一种，是部分增长量占总体增长量的比重。<br />\n <code>公式：增长贡献率=部分增长量/总体增长量</code></p>\n<h3 id=\"比重饼状图类型题目\"><a class=\"anchor\" href=\"#比重饼状图类型题目\">#</a> 比重饼状图类型题目</h3>\n<ol>\n<li>题干中所问的数据，默认从十二点钟方向开始，顺时针一次排布。</li>\n<li>做此类题目时，先看扇形大小进行排除</li>\n<li>当大小排除后，再看比例</li>\n</ol>\n<h3 id=\"基期比重\"><a class=\"anchor\" href=\"#基期比重\">#</a> 基期比重</h3>\n<p>过去 + 占</p>\n<p>其中，过去表示基期，如已知 2017 年的部分和总体的基期和增长率，求 2016 年占总收入的比重，此类情况就用基期比重公式。</p>\n<h4 id=\"公式-4\"><a class=\"anchor\" href=\"#公式-4\">#</a> 公式</h4>\n<p>基期比重 = A/B*(1+b)/(1+a)</p>\n<blockquote>\n<p>A: 部分的现期量</p>\n<p>B: 总体的现期量</p>\n<p>b: 总体的增长率</p>\n<p>a: 部分的增长率</p>\n<p>部分和总体的现期量和增长率有交叉关系。</p>\n</blockquote>\n<h4 id=\"公式计算技巧\"><a class=\"anchor\" href=\"#公式计算技巧\">#</a> 公式计算技巧</h4>\n<ol>\n<li>先截位直除 A/B，选项差距大，截两位计算，选项差距小，截三位计算。</li>\n<li>看 (1+a)/(1+b) 与 1 的关系大小。结合选项选答案。</li>\n</ol>\n<p>还要注意，看题目中是否给出了现期比重的值，然后除法当作一步除法，只截分母。</p>\n<h3 id=\"两期比重比较\"><a class=\"anchor\" href=\"#两期比重比较\">#</a> 两期比重比较</h3>\n<p>关键字：... 占... 比重，比上年上升 / 下降，比如 17 年比 16 年的比重是上升了还说下降了。</p>\n<p><code>今年和去年相比</code></p>\n<h4 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h4>\n<p>两期比重比较，看 a (部分增速) 和 b (总体增速) 大小</p>\n<ol>\n<li>a &gt; b，今年比重上升</li>\n<li>a &lt; b，今年比重下降</li>\n<li>a = b，今年比重不变</li>\n</ol>\n<p><code>注意：增速(增长率)是有正负的，下降为负，比较a部分增速和b总体增速的大小时，要带上符号。</code></p>\n<h3 id=\"两期比重计算\"><a class=\"anchor\" href=\"#两期比重计算\">#</a> 两期比重计算</h3>\n<p>注意：两期比重计算，考的就是两个百分数的差，即为百分点。由此，当选项中出现单纯的百分数，后没带 “百分点” 时，不能选。</p>\n<p>关键字：... 占... 比重，比上年上升 / 下降 + 百分点。 <code>百分点：两个百分数相加减得到。</code></p>\n<p><code>今年比去年，多了多少百分点</code></p>\n<h4 id=\"公式-5\"><a class=\"anchor\" href=\"#公式-5\">#</a> 公式</h4>\n<p>比重差 = 现期比重 - 基期比重 = A/B-A/B*(1+b)/(1+a)= <code>A/B*(a-b)/(1+a)</code></p>\n<h4 id=\"速算\"><a class=\"anchor\" href=\"#速算\">#</a> 速算</h4>\n<ol>\n<li>判方向： <code>a &gt; b,上升；a &lt; b,下降</code></li>\n<li>定大小： <code>小于|a-b|</code></li>\n</ol>\n<h3 id=\"比重总结\"><a class=\"anchor\" href=\"#比重总结\">#</a> 比重总结</h3>\n<ol>\n<li>现期比重 占：部分 / 整体</li>\n<li>基期比重 公式 A/B*(1+b)/(1+a)</li>\n<li>两期比重 两期比重的比较看部分增速和总体增速的大小</li>\n</ol>\n<h2 id=\"四平均数\"><a class=\"anchor\" href=\"#四平均数\">#</a> (四) 平均数</h2>\n<h3 id=\"考情分析\"><a class=\"anchor\" href=\"#考情分析\">#</a> 考情分析</h3>\n<p>平均、每、单位...。</p>\n<h3 id=\"题型\"><a class=\"anchor\" href=\"#题型\">#</a> 题型</h3>\n<ol>\n<li>现期平均</li>\n<li>基期平均</li>\n<li>两期平均</li>\n</ol>\n<h3 id=\"现期平均\"><a class=\"anchor\" href=\"#现期平均\">#</a> 现期平均</h3>\n<p>现在 + 平均、单位、每</p>\n<h3 id=\"基期平均数\"><a class=\"anchor\" href=\"#基期平均数\">#</a> 基期平均数</h3>\n<p>过去 + 平均、每、单位</p>\n<h4 id=\"公式-6\"><a class=\"anchor\" href=\"#公式-6\">#</a> 公式</h4>\n<p>基期平均 = A/B*(1+b)/(1+a)</p>\n<p>其中，A 为总数现期量，B 为个数现期量，a 为总数的增长率，b 为个数的增长率。</p>\n<h4 id=\"速算-2\"><a class=\"anchor\" href=\"#速算-2\">#</a> 速算</h4>\n<ol>\n<li>先截位直除 A/B</li>\n<li>再看 (1+b)/(1+a) 与 1 的关系</li>\n</ol>\n<h4 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h4>\n<p>已知 2014 年的金融业单位数量，若说 2013 年该区的金融单位数量与 2014 年一样，则说明单位数量的增长率为零。</p>\n<h3 id=\"两期平均数比较\"><a class=\"anchor\" href=\"#两期平均数比较\">#</a> 两期平均数比较</h3>\n<p>平均数，比上年上升 / 下降。</p>\n<h4 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h4>\n<p>两期比重比较，看 a 分子增速和 b 分母增速的大小。</p>\n<ol>\n<li>a &gt; b, 今年平均上升</li>\n<li>a &lt; b, 今年平均下降</li>\n<li>a = b, 今年平均不变</li>\n</ol>\n<h3 id=\"两期平均数计算\"><a class=\"anchor\" href=\"#两期平均数计算\">#</a> 两期平均数计算</h3>\n<p>平均数，比上年上升 / 下降 + 百分数</p>\n<h4 id=\"公式-7\"><a class=\"anchor\" href=\"#公式-7\">#</a> 公式</h4>\n<p>平均数的增长率 = (a-b)/ <code>(1+b)</code></p>\n<p>a,b 分别代表分子、分母的增长率。</p>\n<p>注意：平均数的增长率分母是 1+b，不是 1+a；而比重的两期比重差分母才是 1+a;</p>\n<blockquote>\n<p>平均数增长率 = (a-b)/(1+b)</p>\n<p>两期比重差 = A/B*(a-b)/(1+a)</p>\n</blockquote>\n<p>比重、平均数、倍数的基期公式都是 A/B*(1+b)/(1+a)，现期都是 A/B；</p>\n<h2 id=\"五倍数与比值\"><a class=\"anchor\" href=\"#五倍数与比值\">#</a> (五) 倍数与比值</h2>\n<p>倍数用来表示两者的相对关系；比值用来表示两者之间的比例关系。<br />\n比值即除法。</p>\n<h3 id=\"识别\"><a class=\"anchor\" href=\"#识别\">#</a> 识别</h3>\n<p>时间 + 倍数</p>\n<h3 id=\"公式-8\"><a class=\"anchor\" href=\"#公式-8\">#</a> 公式</h3>\n<ol>\n<li><code>现期倍数 = A/B</code></li>\n<li><code>基期倍数 = A/B*[ (1+b)/(1+a) ]</code> ; 先截位直除 A/B, 再看后面的值与 1 的关系。</li>\n</ol>\n<h3 id=\"倍数的三种文法\"><a class=\"anchor\" href=\"#倍数的三种文法\">#</a> 倍数的三种文法</h3>\n<ol>\n<li>A 是 B 的几倍：A/B (倍数即为增长率 + 1，增长率为 A/B-1)</li>\n<li>A 比 B 增长 (多) 几倍：(A-B)/B = A/B - 1;</li>\n<li>A 超过 B 的 N 倍   A&gt;B*N</li>\n</ol>\n<h1 id=\"数量关系\"><a class=\"anchor\" href=\"#数量关系\">#</a> 数量关系</h1>\n<h2 id=\"解题思想\"><a class=\"anchor\" href=\"#解题思想\">#</a> 解题思想</h2>\n<h3 id=\"代入排除\"><a class=\"anchor\" href=\"#代入排除\">#</a> 代入排除</h3>\n<ol>\n<li>看题型：多位数、年龄、余数、不定方程</li>\n<li>看选项</li>\n<li>选择信息充分</li>\n<li>剩余两项：只代入其中一个</li>\n</ol>\n<h4 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h4>\n<ol>\n<li>先排除：奇偶、倍数、尾数</li>\n<li>再代入</li>\n</ol>\n<blockquote>\n<p>(1) 从简原则：方便计算的数，整十整百的数</p>\n<p>(2) 最值原则：问最大，从最大的代；问最小就最小的代。</p>\n</blockquote>\n<h3 id=\"倍数特性\"><a class=\"anchor\" href=\"#倍数特性\">#</a> 倍数特性</h3>\n<p>(1) 整除型<br />\n若总数 A=B*C</p>\n<p>使用范围：平均分配物品、平均数。<br />\n <code>三量关系(A=B*C):行程问题、工程问题、经济利润问题。</code></p>\n<p>例如，一个正方体表面分辨写着连续的 6 个证书，且每个相对面上的两个数的和都相等。</p>\n<blockquote>\n<p>六面体共有三个对立面，设和为 n，那么六个整数的和一定是 3n，3 的倍数。</p>\n</blockquote>\n<p>(2) 余数型<br />\n若总数 A=ax+b</p>\n<p>(总数 - b) 一定能被 a 整除。(a、x 均为整数)</p>\n<p>(3) 比例型 (n、m 互质)</p>\n<ol>\n<li>若 a/b=m/n, 则 a 是 m 的倍数，b 是 n 的倍数</li>\n<li>若 a=bm/n, 则 a 是 m 的倍数，b 是 n 的倍数</li>\n<li>若 a=bm/n, 则 a=m (a+b)/(m+n)</li>\n</ol>\n<p>比例型适用于：分数、百分数、比例、倍数<br />\n对象特性：描述对象为不可分割的整体。如人，车，年龄等。</p>\n<p>形如 A=M (A+B)/(M+N)，解题方法：A/B=M/N, 则 A 是 M 的倍数，B 是 N 的倍数。</p>\n<p>形如 A=MB/N，解题方法：A 是 M 的倍数，B 是 N 的倍数。</p>\n<h3 id=\"余数特性\"><a class=\"anchor\" href=\"#余数特性\">#</a> 余数特性</h3>\n<p>同余问题： <code>最小公倍数作周期，余同加余，和同加同，差同减差</code> 。</p>\n<p><code>余同加余</code> ：一个数除以 4 余 1，除以 5 余 1，除以 6 余 1，那么这么数是 60n+1;</p>\n<blockquote>\n<p>注意：例如， <code>一群学生，排成5排少2人，排成7排少4人</code> 。这种类型的题目要记得转化成： <code>排成4排余3人，排成6排余3人,</code>  所以余数都为 3，同余加余，但是这个 <code>最小公倍数，不是4和5，而仍是5和7</code> ，所以这群学生人数为 35n+3。</p>\n</blockquote>\n<p><code>和同加和</code> ：一个数除以 4 余 3，除以 5 余 2，除以 6 余 1，除数和余数相加相同，都为 7，那么这个数是 60n+7;</p>\n<p><code>差同减差</code> ：一个数除以 4 余 3，除以 5 余 4，除以 6 余 5，除数和余数之差都为 1，那么这个数为 60n-1;</p>\n<p>题型：在题干上出现 “某物按 x 个分组还余 y 个” 的条件，这中 <code>分组、分类有余</code> 就是典型的余数特性题目。</p>\n<h3 id=\"奇偶特性\"><a class=\"anchor\" href=\"#奇偶特性\">#</a> 奇偶特性</h3>\n<ol>\n<li>乘法中</li>\n</ol>\n<blockquote>\n<p><code>若因子中存在偶数，则结果为偶数；无偶数则结果为奇数。</code></p>\n<ul>\n<li>奇数偶数相乘，有偶则偶。</li>\n</ul>\n</blockquote>\n<p><code>若几个整数的和(或差)为奇(或偶)数，则这几个整数的差(或和)为奇(或偶)数。</code></p>\n<ol start=\"2\">\n<li>加减法中<br />\n两个因子奇偶性相同，则结果为偶数；不同则结果为奇数。</li>\n</ol>\n<blockquote>\n<ul>\n<li>奇数 +- 奇数 = 偶数</li>\n<li>偶数 +- 偶数 = 偶数</li>\n<li>奇数 +- 奇数 = 奇数</li>\n</ul>\n</blockquote>\n<h3 id=\"赋值思想\"><a class=\"anchor\" href=\"#赋值思想\">#</a> 赋值思想</h3>\n<p>当题目给定信息中未涉及到某个具体数量的大小，通常出现 <code>倍数、分数、百分数、比例，并且该数量的大小不影响最终所求结果，可赋值</code> 。</p>\n<p>观察题目所给的数值 (分数、百分数、比例)， <code>赋值数多为这些数的公倍数</code> 。</p>\n<p>适用题型：工程问题、混合配比问题、加权平均问题、流水行船问题、往返行程问题、几何问题、经济利润问题、和差倍比问题。</p>\n<p>技巧：</p>\n<ol>\n<li>分数、百分比、比例，赋值数多为这些数的公倍数</li>\n<li>工程量、工作量等可将每天推进量赋值为 1</li>\n<li>准确列出方程</li>\n</ol>\n<p>例题：师徒二人 3 天加工零件总数分别为 240、150，并且两人每天加工的零件个数为整数且彼此不相等。其中师傅加工零件数最少的那天比徒弟加工零件数最多的那天多 10 个。师傅加工最多的一天至多比徒弟加工最少的一天多多少？</p>\n<blockquote>\n<p>赋值思想。师徒两人分别平均每天加工零件数 80、50. 为了确保师傅最少那天比徒弟最多那天多 10，所以取中间值 70、60，此时 80 和 70、70 和 60、60 和 50 都满足，但是前一组和后一组分别不满足师傅最大 80 和徒弟最小 50 的条件，所以取中间这组赋值，师傅第一天加工 70，徒弟加工 60。</p>\n<p><code>总结：以后做此类题目，直接先求每天平均，再根据题目，取中间值即可。如此题，直接取70和60即可。</code></p>\n<p>例如，第一天，师傅加工 70、徒弟加工 60，第二天推进量取 1，则师傅加工量 71，徒弟 59. 此时师傅最多的一天为 240-70-71=99, 徒弟最少的一天 150-60-59=31，则多 99-31=68.</p>\n</blockquote>\n<blockquote>\n<p>例题 2：某银行账户今年底余额减去 1500 后，正好比去年底余额减少了 25%，去年底余额比前年底余额的 120% 少 2000。则此人银行账户今年底余额一定比前年底余额___？</p>\n<p>设前、去、今年底的余额分别为 x、y、z。那么</p>\n<ul>\n<li>\n<ol>\n<li>z-1500=75%y</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>y=120%x-2000</li>\n</ol>\n</li>\n</ul>\n<p>赋值：看式子，将前年底余额赋为 10000，则 y=12000-2000=10000，z=7500+1500=9000，所以今年底账户余额比前年底账户余额少 1000.</p>\n<p><code>注意：不要选1000那个选项，此时的1000是特殊情况，赋值得来。1000即为前年底余额的10%，不同于数值，百分数是占比问题，不存在特殊性，所以选今年比前年底余额少10%。</code></p>\n</blockquote>\n<h3 id=\"极限思想\"><a class=\"anchor\" href=\"#极限思想\">#</a> 极限思想</h3>\n<p>出现 “至多、至少、最多、最少、最大、最小” 等时，要有极限思想。</p>\n<p>例如：题目中有 “至少.... 才能保证...”，那么保证 <code>后面的情况是必然发生的情况</code> 。即： <code>最不利情况数+1.</code></p>\n<p>例如，有 5 个老年班，社区老人每个人至少报了 1 个班，问至少要调查多少个样本才能保证样本中有 4 名报的班完全相同？</p>\n<blockquote>\n<p><code>构造最不利的情况：</code> 五个班至少报名一项，则每个人报名不同的情况数为：报名 1 种～报名 5 种的排列组合相加 = 31。</p>\n<p><code>考虑最不利的原则</code> ：有 4 人报班，最不利值为 3，表示四人中有三人选的班都不一样，则至少要调查 <code>3*31+1=94</code></p>\n</blockquote>\n<blockquote>\n<p>例二：18cm 长的线围成各种长方形，要求宽和长都为 cm，最大面积为？</p>\n<p>要使得面积最大，则要求长和宽最接近，所以长宽分别为 5 和 4，S 最大为 20.</p>\n</blockquote>\n<h3 id=\"逆向推理思想\"><a class=\"anchor\" href=\"#逆向推理思想\">#</a> 逆向推理思想</h3>\n<ol>\n<li>逆向推导</li>\n<li>正反互补：当所求情况过多、计算复杂时，可以考虑用整体减去与之相反的情况来求解</li>\n</ol>\n<blockquote>\n<p>例题：从两个辖区分别抽调 2 名人员，随机安排到 3 个单位，则来自同一辖区的人员不在同一组的概率是？</p>\n<p>4 人分到 3 个单位，一定是 2、1、1 形式，总的安排情况即：先抽取两个 C42=6，然后将这两人随机安排到三个单位其中一个 A33=6，所以总的安排情况 = 6*6=36.</p>\n<p>算不在同一组的情况太复杂，所以可以直接算在同一组的概率。即：在一个辖区的两个人中选</p>\n</blockquote>\n<h3 id=\"整除思想\"><a class=\"anchor\" href=\"#整除思想\">#</a> 整除思想</h3>\n<p>待....</p>\n<h1 id=\"言语\"><a class=\"anchor\" href=\"#言语\">#</a> 言语</h1>\n<h2 id=\"关系思维\"><a class=\"anchor\" href=\"#关系思维\">#</a> 关系思维</h2>\n<h3 id=\"行文脉络思维\"><a class=\"anchor\" href=\"#行文脉络思维\">#</a> 行文脉络思维</h3>\n<ol>\n<li>引出话题 - 分析问题 - <code>提出观点对策</code></li>\n<li>引出话题 - <code>直接表明观点</code>  - 展开论述 - 结尾再次强调<br />\n可以知，文段行文脉络，大部分题可以在首尾句找到作者观点。</li>\n</ol>\n<h3 id=\"技巧\"><a class=\"anchor\" href=\"#技巧\">#</a> 技巧</h3>\n<ol>\n<li><code>阅读句尾</code> ，是否存在 &quot;因此、可见、事实上、应该、需要、不能&quot; 来判断是不是观点 (对策)。 <code>圈出主题词</code> ，首句验证，直接选包含主题词的选项，如果选项有两个符合，则 <code>优选对策</code> 。</li>\n<li><code>阅读首句</code> ，表明观点，圈出主题词对照选项 <code>同义替换</code> 。</li>\n</ol>\n<h3 id=\"转折关系思维\"><a class=\"anchor\" href=\"#转折关系思维\">#</a> 转折关系思维</h3>\n<h4 id=\"常用转折\"><a class=\"anchor\" href=\"#常用转折\">#</a> 常用转折</h4>\n<ol>\n<li>但是、但相反地、但另一方面、实际上、可是</li>\n<li>通过对比、经与.... 对比、相较之下</li>\n<li>然而、然而整体而言、其实不然</li>\n</ol>\n<h4 id=\"技巧-2\"><a class=\"anchor\" href=\"#技巧-2\">#</a> 技巧</h4>\n<p><code>转折词后为文段重点</code> ，转折前的表述通常为错误的选项。</p>\n<p>文段中如果出现 &quot; <code>很多人/大多数人/传统观点/以前/有些人/不少人认为+转折关联词</code>  &quot; 的表述， <code>直接看转折后的内容</code> ，并看 <code>哪个选项是转折之后内容的同义替换</code> 。</p>\n<h3 id=\"因果关系思维\"><a class=\"anchor\" href=\"#因果关系思维\">#</a> 因果关系思维</h3>\n<h4 id=\"常用因果词\"><a class=\"anchor\" href=\"#常用因果词\">#</a> 常用因果词</h4>\n<ol>\n<li>因为、因而、因此</li>\n<li>造成、导致、由于</li>\n<li>之所以...，是因为...、... 以至于</li>\n</ol>\n<h4 id=\"技巧-3\"><a class=\"anchor\" href=\"#技巧-3\">#</a> 技巧</h4>\n<p>典型格式：</p>\n<ol>\n<li>因为 A，所以 B</li>\n<li>之所以 B，是因为 A</li>\n</ol>\n<p>二者均强调结论是 B。</p>\n<p>因果关系正确答案形式：</p>\n<ol>\n<li>结论 B 的同义替换</li>\n<li>强调结论 B 的原因</li>\n<li>原因 A 和结论 B 同时出现，如果选项仅仅描述的是原因部分的内容，则属于非重点，排除</li>\n</ol>\n<p>总的来说，因果类问题，就 <code>主要看&quot;所以&quot;后面的结论即可</code> 。</p>\n<h3 id=\"并列关系思维\"><a class=\"anchor\" href=\"#并列关系思维\">#</a> 并列关系思维</h3>\n<h4 id=\"常用并列词\"><a class=\"anchor\" href=\"#常用并列词\">#</a> 常用并列词</h4>\n<ol>\n<li>是... 不是..., 不是... 而是...</li>\n<li>既... 又..., 又... 又..., 既... 也...</li>\n<li>有时... 有时..., 一方面... 另一方面...</li>\n</ol>\n<h4 id=\"技巧-4\"><a class=\"anchor\" href=\"#技巧-4\">#</a> 技巧</h4>\n<p>当 “;” 或者上述并列词出现时，前后句子为并列关系。若并列论述的是 <code>不同话题</code> ，需要 <code>全面概括</code> ；若几个方面的 <code>并列论述话题一致</code> ，需要 <code>提取共性</code> 。</p>\n<p><code>想要概括多个方面，需要用一些表述宽泛、笼统的词语</code> ，如： <code>许多、一些、不同、各种</code> 等，才可以概括全面，也是 <code>正确选项的特征</code> 。</p>\n<p><code>表述片面</code> ，即只提及其中一个方面，这种选项以偏概全， <code>排除</code> 。</p>\n<p>注意：并列词说明前后是并列结构，都为分，统统不看，要找到总，再看首尾句。</p>\n<h3 id=\"条件关系思维\"><a class=\"anchor\" href=\"#条件关系思维\">#</a> 条件关系思维</h3>\n<h4 id=\"常用条件词\"><a class=\"anchor\" href=\"#常用条件词\">#</a> 常用条件词</h4>\n<ol>\n<li>只要... 就..., 只有... 才..., 任凭... 也...</li>\n<li>无论... 都..., 除非... 才..., 不管... 总....</li>\n<li>A 是 B 的必要条件、前提、基础、保障、途径，必须，无比，除非</li>\n</ol>\n<h4 id=\"技巧-5\"><a class=\"anchor\" href=\"#技巧-5\">#</a> 技巧</h4>\n<p><code>条件是重点，即“才、都、必须、务必、除非”等后面的内容是重点.</code></p>\n<h3 id=\"递进关系思维\"><a class=\"anchor\" href=\"#递进关系思维\">#</a> 递进关系思维</h3>\n<h4 id=\"常用递进词\"><a class=\"anchor\" href=\"#常用递进词\">#</a> 常用递进词</h4>\n<ol>\n<li>并、也、还、更</li>\n<li>不但... 而且..., 不仅，甚至，特别，尤其，不仅... 还能...</li>\n<li>重要的是、关键是、核心是</li>\n</ol>\n<h4 id=\"技巧-6\"><a class=\"anchor\" href=\"#技巧-6\">#</a> 技巧</h4>\n<p>出现递进词， <code>递进关联词后为文段强调重点</code> 。</p>\n<p>出现 “不但... 而且... 甚至...” 这种 <code>多层递进</code> 时， <code>最后一层递进为文段重点</code> 。</p>\n<h3 id=\"反面论证思维\"><a class=\"anchor\" href=\"#反面论证思维\">#</a> 反面论证思维</h3>\n<h4 id=\"常见标志词\"><a class=\"anchor\" href=\"#常见标志词\">#</a> 常见标志词</h4>\n<ol>\n<li>如果不... 那么</li>\n<li>一旦... 则...</li>\n<li>倘若... 可能...</li>\n</ol>\n<h4 id=\"技巧-7\"><a class=\"anchor\" href=\"#技巧-7\">#</a> 技巧</h4>\n<ol>\n<li><code>有观点类</code> ： <code>观点</code>  + 否则.../ 不然..., <code>反面论证不重要</code></li>\n<li><code>无观点类</code> ： <code>背景陈述</code>  + 如果不... 那么.../ 客观问题 + 如果不..., 推导出 <code>解决问题的对策，对策是重点</code> 。</li>\n</ol>\n<p>总的来说，无观点类，客观问题，需要反面推导出对策，选项同义替换；有观点类，强调观点。</p>\n<h3 id=\"时空分析思维\"><a class=\"anchor\" href=\"#时空分析思维\">#</a> 时空分析思维</h3>\n<h4 id=\"技巧-8\"><a class=\"anchor\" href=\"#技巧-8\">#</a> 技巧</h4>\n<p>通过 <code>时间</code> 和 <code>空间</code> 对比，例如：过去... 现在...; 传统... 现代...; 美国... 中国...; 通过前后对比， <code>强调的不同点放到文段的后半部分，也就是文段的重点</code> 。</p>\n<p>时间上，如过去和现在的对比；地点上 (空间上)，如地区与地区，国与国 (中外) 之间的对比；凸显的重点在两者比较的后段文段， <code>凸显后者怎么这么样</code> 。</p>\n<h2 id=\"逻辑填空题\"><a class=\"anchor\" href=\"#逻辑填空题\">#</a> 逻辑填空题</h2>\n<h3 id=\"固定搭配重点\"><a class=\"anchor\" href=\"#固定搭配重点\">#</a> 固定搭配 (重点)</h3>\n<ol>\n<li>根据词性找搭配</li>\n</ol>\n<blockquote>\n<p>若选项都为动词，回到文段找名词或副词</p>\n<p>若选项都为名词，回到文段找动词或形容词</p>\n</blockquote>\n<ol start=\"2\">\n<li>注意新闻热点、时事评论中常用词搭配的积累</li>\n</ol>\n<blockquote>\n<p>横线处搭配由 &quot;和、及、与、同&quot; 等标志词引导的并列结构，则所填词语要与并列结构中的多个词语均能搭配。所以在找该类搭配时，要 <code>留心是否出现&quot;和、及、与、同&quot;等并列词</code> 。</p>\n</blockquote>\n<h3 id=\"程度轻重\"><a class=\"anchor\" href=\"#程度轻重\">#</a> 程度轻重</h3>\n<p>程度轻重是指 <code>意义相近的词语在表现程度和性质上有轻重的差别</code> 。</p>\n<p>正确选项的轻重程度需 <code>与文段表达语气的轻重程度相匹配</code> 。</p>\n<p>如：有__, 没毛病。<br />\nA. 瑕疵</p>\n<p>B. 缺点</p>\n<p>C. 缺陷</p>\n<blockquote>\n<p>瑕疵、缺点、缺陷程度由轻到重逐渐加深，根据没毛病可知。需要填入程度最轻的词语。所以选 A。</p>\n</blockquote>\n<h3 id=\"解释类对应\"><a class=\"anchor\" href=\"#解释类对应\">#</a> 解释类对应</h3>\n<h4 id=\"题干特点\"><a class=\"anchor\" href=\"#题干特点\">#</a> 题干特点</h4>\n<p>分句，___分句 (后一分句进行解释说明)，即文段中有分句对横线处词语进行解释说明。</p>\n<h4 id=\"常见标志词-2\"><a class=\"anchor\" href=\"#常见标志词-2\">#</a> 常见标志词</h4>\n<p>是、就是、即、无异于、无疑是、可以说、比如、例如、冒号 (😃、破折号等。</p>\n<h4 id=\"使用方法-2\"><a class=\"anchor\" href=\"#使用方法-2\">#</a> 使用方法</h4>\n<p>准确找到与横线处所填词语对应的句子，理解句义对应选项。</p>\n<p><code>通过整个文段的准确理解和把握，找出与横线处相对应的语句。</code></p>\n<h3 id=\"重点语句对应\"><a class=\"anchor\" href=\"#重点语句对应\">#</a> 重点语句对应</h3>\n<ol>\n<li><code>主题词</code> ，即 <code>文段围绕论述的核心名词</code> 。抓住文段主题词，即可快速定位正确答案。</li>\n<li><code>拟人、类比等形象表述</code> 。要注意文段中出现的 &quot; <code>像...那样...&quot;,&quot;正如&quot;,&quot;和...一样&quot;,&quot;...有异曲同工之妙&quot;</code>  等类比标志性表述。</li>\n<li><code>中心句或文段中的完整语句</code> 。对于较长文段中较为完整的句子，要注意。</li>\n</ol>\n<h1 id=\"判断推理\"><a class=\"anchor\" href=\"#判断推理\">#</a> 判断推理</h1>\n<h2 id=\"图形推理高频考点1\"><a class=\"anchor\" href=\"#图形推理高频考点1\">#</a> 图形推理 (高频考点 1)</h2>\n<h3 id=\"对称类型\"><a class=\"anchor\" href=\"#对称类型\">#</a> 对称类型</h3>\n<ol>\n<li>轴对称</li>\n<li>中心对称</li>\n<li>既轴对称，又中心对称</li>\n</ol>\n<h3 id=\"对称轴的方向和数量\"><a class=\"anchor\" href=\"#对称轴的方向和数量\">#</a> 对称轴的方向和数量</h3>\n<p>当 <code>题干图形和两个以上选项的图形都是轴对称图形时</code> ，很有可能通过对称轴的方向和数量命题。</p>\n<p>所以， <code>解题时要注意对称轴的方向和数量</code> ， <code>对称轴的方向可以分为两类：横轴对称、竖轴对称、斜轴对称</code> 。</p>\n<h2 id=\"笔画数高频考点2\"><a class=\"anchor\" href=\"#笔画数高频考点2\">#</a> 笔画数 (高频考点 2)</h2>\n<h3 id=\"如何判断图形最少可以通过几笔画出来\"><a class=\"anchor\" href=\"#如何判断图形最少可以通过几笔画出来\">#</a> 如何判断图形最少可以通过几笔画出来？</h3>\n<ol>\n<li><code>简单图形</code> ：直接通过画图方式</li>\n<li><code> 复杂图形</code> ： <code>连通图的笔画数=奇点数/2</code> ；</li>\n</ol>\n<blockquote>\n<p>特别注意：其中 <code>特例</code> 为 <code>含0个或2个奇点的连通图可以一笔画完成</code> 。</p>\n</blockquote>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<ol>\n<li><code>连通图</code> ：任意两点都是连通的。做题时，可大致理解为图形中的线条连在了一起。</li>\n<li><code>奇点：若以一个点为起点，延伸出的线条数为奇数，则该点为奇点</code> 。为偶数，则为偶点。</li>\n</ol>\n<blockquote>\n<p><code>注意：奇点包括端点;</code></p>\n</blockquote>\n<h2 id=\"功能元素高频考点3\"><a class=\"anchor\" href=\"#功能元素高频考点3\">#</a> 功能元素 (高频考点 3)</h2>\n<h3 id=\"常见元素\"><a class=\"anchor\" href=\"#常见元素\">#</a> 常见元素</h3>\n<p>黑点、白点、箭头等。</p>\n<h3 id=\"技巧-9\"><a class=\"anchor\" href=\"#技巧-9\">#</a> 技巧</h3>\n<ol>\n<li>当 <code>每个图形都有功能元素时</code> ，可以 <code>标记图形的长短边、左右位置</code> ； <code>角(锐角还是钝角)</code> ； <code>相交或非相交区域</code> ；功能元素标记 <code>在线上还是交点上</code> 。</li>\n<li>当 <code>每个图形都有两个功能元素时</code> ，除了考察上面的， <code>还可能考</code> 这 <code>两个功能元素之间的关系</code> 或者 <code>两个功能元素的连线与题干图形的关系</code> 。</li>\n</ol>\n<h2 id=\"空间重构\"><a class=\"anchor\" href=\"#空间重构\">#</a> 空间重构</h2>\n<h3 id=\"常见\"><a class=\"anchor\" href=\"#常见\">#</a> 常见</h3>\n<p>空间重构又叫折纸盒。</p>\n<p>一般又六面体、四面体、八面体。</p>\n<p>一般考，给定纸盒，能由哪个选项折叠出来。</p>\n<h2 id=\"样式运算\"><a class=\"anchor\" href=\"#样式运算\">#</a> 样式运算</h2>\n<p>图形通过运算之后，会改变样式的形状，主要包括简单叠加、运算叠加、黑白快叠加、特殊叠加、相邻运算以及拉伸与替换等内容。</p>\n<ol>\n<li>简单叠加：最简单的叠加方式</li>\n<li>运算叠加：分为两种， <code>去同存异、去异存同</code> 。前者表示两幅图叠加，将 <code>相同的线条去掉，保留不同的线条</code> ；后者表示叠加 <code>去掉不同线条，保留相同线条</code> 。</li>\n<li>黑白叠加</li>\n</ol>\n<blockquote>\n<p>需注意：</p>\n<ul>\n<li>\n<ol>\n<li>小黑块运动类，一般黑块数量较少，图形间黑块数量变化不大</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>小黑块叠加类，位置没规律、数量变化大、一般不用 16 宫格作为载体</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>一般分四种情况：黑 + 黑、黑 + 白、白 + 黑、白 + 白进行计算</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>偶尔黑 + 黑与白 + 白结果一致，黑 + 白与白 + 黑的结果一致，即相同得一色，相异得一色。</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<ol start=\"4\">\n<li><code>特殊叠加：包括三种形式的叠加1.切割或翻倍后叠加2.按优先级不同叠加3.A+B=C得新结果式叠加</code></li>\n</ol>\n<p>总结： <code>这种题，就是往去同存异、去异存同上想</code> ，然后看第三张图与第一二张图经过去同存异或者去异存同所得到的图的变化；</p>\n<p>然后， <code>黑白叠加的话，就看到底是相同为同，还是相异为同</code> 。</p>\n<h2 id=\"定义判断\"><a class=\"anchor\" href=\"#定义判断\">#</a> 定义判断</h2>\n<h3 id=\"主客体高频考点1\"><a class=\"anchor\" href=\"#主客体高频考点1\">#</a> 主客体 (高频考点 1)</h3>\n<p><code>主体</code> 是指一个动作或时间的发起者或执行者；</p>\n<p><code>客体</code> 是指一个动作或行为指向的对象。</p>\n<p><code>当主题或客体有明确的范围界定时，可有限进行选项对应，对于明显不符合的选项进行排除。</code></p>\n<h3 id=\"条件句式高频考点2\"><a class=\"anchor\" href=\"#条件句式高频考点2\">#</a> 条件句式 (高频考点 2)</h3>\n<p>当以下引导词出现时，很可能设置考点，需要圈画并与选项对应：</p>\n<ol>\n<li>表示方式的引导词：通过、利用等</li>\n<li>表示原因的引导词：因为、由于等</li>\n<li>表示时间条件的引导词：当... 时、在... 时等</li>\n<li>表示结果的引导词：所以、因而、从而、带来、引起、导致、使得等表结论的词汇</li>\n</ol>\n<h2 id=\"类比推理\"><a class=\"anchor\" href=\"#类比推理\">#</a> 类比推理</h2>\n<p>词语之间的逻辑关系非常多，而且会涉及到成语、诗句、典故以及一些生活常识等。</p>\n<h3 id=\"语义关系\"><a class=\"anchor\" href=\"#语义关系\">#</a> 语义关系</h3>\n<p>指词语含义之间的关系，要正确理解词语含义。</p>\n<h4 id=\"常考语义关系\"><a class=\"anchor\" href=\"#常考语义关系\">#</a> 常考语义关系</h4>\n<ol>\n<li>近义词</li>\n<li>反义词</li>\n<li>比喻义、象征义</li>\n</ol>\n<h3 id=\"并列关系\"><a class=\"anchor\" href=\"#并列关系\">#</a> 并列关系</h3>\n<p>指两个词语概念 <code>处于同一个级别上，但彼此不包含。</code></p>\n<h4 id=\"并列关系分类\"><a class=\"anchor\" href=\"#并列关系分类\">#</a> 并列关系分类</h4>\n<ol>\n<li><code>矛盾关系：指非A即B，没有第三种情况存在。</code></li>\n<li><code>反对关系：指除了A和B意外，还有其它情况存在。</code></li>\n</ol>\n<p><code>注意：并列关系一般要求同级并列</code></p>\n<h3 id=\"包容关系\"><a class=\"anchor\" href=\"#包容关系\">#</a> 包容关系</h3>\n<p><code>指两个词语概念之间一个范围大、一个范围小，小概念完全被包含在大概念之中。</code></p>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<ol>\n<li><code>种属关系</code> ，即 <code>A是B的一种</code></li>\n<li><code>组成关系</code> ，即 <code>A是B的一个组成部分</code></li>\n</ol>\n<p>组成与种属的区别在于，A、B 为 <code>种属关系</code> ， <code>造句子可以造成A是B</code> 。比如柳树是数，但 <code>组成关系不可以</code> ，比如不能说轮胎是汽车。</p>\n<h3 id=\"对应关系\"><a class=\"anchor\" href=\"#对应关系\">#</a> 对应关系</h3>\n<p>指一定范围事件包含的各词语要素之间构成的互相对应，包括物品、职业、地点、原因、结果、方式、行为、工具、功能等多种对应。</p>\n<h4 id=\"常考对应关系\"><a class=\"anchor\" href=\"#常考对应关系\">#</a> 常考对应关系</h4>\n<ol>\n<li><code>配套使用</code> ，如牙膏和牙刷</li>\n<li><code>物品与原材料、制作工艺</code> ，如家具与木材、手镯与打磨</li>\n<li><code>物品与功能</code> ，如手机与沟通</li>\n<li><code>属性关系</code> ，如盐与威、叶与绿</li>\n<li><code>因果关系</code> ，如下雨与地湿</li>\n</ol>\n<h3 id=\"交叉关系\"><a class=\"anchor\" href=\"#交叉关系\">#</a> 交叉关系</h3>\n<p>当两个集合的范围中有交叉的时候，就存在交叉关系。</p>\n<h2 id=\"逻辑判断\"><a class=\"anchor\" href=\"#逻辑判断\">#</a> 逻辑判断</h2>\n<p>翻译推理、组合排列、真假推理都有公式可循，技巧性比较强。削弱和加强论证更是重点题型。</p>\n<h3 id=\"加强论证\"><a class=\"anchor\" href=\"#加强论证\">#</a> 加强论证</h3>\n<h4 id=\"题型特点\"><a class=\"anchor\" href=\"#题型特点\">#</a> 题型特点</h4>\n<p>提问方式中带有 “加强、支持、假设、前提” 等关键词。</p>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p>快速排除错误选项：表 <code>述直接的力度强，与话题接近的力度强。</code></p>\n<p>例如：</p>\n<ol>\n<li>读 (论点意思)：着凉容易感冒</li>\n<li>析 (核心话题)：病因分析</li>\n<li>比 (比主体、比范围、比话题、比强弱)</li>\n</ol>\n<p>(1) 加强方式 1：搭桥<br />\n出现以下特征，优先考虑搭桥的加强方式：</p>\n<ol>\n<li><code>论点和论据中出现两个没有明显相关性的概念</code></li>\n</ol>\n<blockquote>\n<p>例如：张三经常打抱不平，因此张三很帅</p>\n<p>打抱不平和帅没有明显相关性的概念，因此可以用 “打抱不平可以让人变帅气” 这样的方式来搭桥，建立论点和论据间的关系。</p>\n</blockquote>\n<ol start=\"2\">\n<li><code>论点和论据中分别出现了一个整体和一个部分的概念</code></li>\n</ol>\n<blockquote>\n<p>例如，中国经济发展势头良好，因此全球经济一片繁荣</p>\n<p>中国经济是全球经济的一部分，因此可以用 &quot;中国经济是全球经济的晴雨表&quot; 这样的方式来搭桥，强化论点和论据之间的关系。<br />\n3. <code> 当提问方式是前提、假设、必要条件、加强论证时，考察搭桥强化的可能性非常大。</code></p>\n</blockquote>\n<p>(2) 加强方式 2：补充论据<br />\n在没有搭桥或者必要条件的选项时，还有两种高频的加强方式。</p>\n<ol>\n<li><code>解释论点成立的原因</code></li>\n<li><code>举例证明论点成立</code></li>\n</ol>\n<p>如果解释和举例同时出现，则解释加强力度更强。</p>\n<h3 id=\"削弱论证\"><a class=\"anchor\" href=\"#削弱论证\">#</a> 削弱论证</h3>\n<h4 id=\"题型特征\"><a class=\"anchor\" href=\"#题型特征\">#</a> 题型特征</h4>\n<p>提问方式中带有 “削弱、质疑、反驳、否定” 等关键词。</p>\n<h4 id=\"解题思路-2\"><a class=\"anchor\" href=\"#解题思路-2\">#</a> 解题思路</h4>\n<p>(1) 削弱方式 1： <code>否定论点</code> <br />\n (2) 削弱方式 2： <code>拆桥</code></p>\n<blockquote>\n<p>拆桥指 <code>破坏论点和论据之间的关系</code> 。由于拆桥同时涉及到论点和论据，所以通常情况下，拆桥的力度要强于单纯的否定论据。</p>\n</blockquote>\n<p>出现一下特征，优先考虑拆桥的削弱方式：</p>\n<ol>\n<li><code>论点和论据中出现两个没有明显关系的概念。</code></li>\n</ol>\n<blockquote>\n<p>例如，张三经常打抱不平，因此张三很帅气</p>\n<p>打抱不平和帅气没有明显关系的概念，因此可以用打抱不平和帅气是两码事来拆桥。</p>\n</blockquote>\n<ol start=\"2\">\n<li><code>论点和论据中分别出现一个整体和一个部分的概念。</code></li>\n</ol>\n<blockquote>\n<p>例如，XX 国发展势头良好，因此全球经济一片繁荣。</p>\n<p>可以用 XX 国只是全球众多国家中的一个，XX 国的经济只是全球经济的一部分，因此 XX 国的经济发展势头不能代表全球经济的整体发展势头。</p>\n<p>总的来说，出现一个整体和一个部分时，削弱论证，就是说部分不能代表整体。</p>\n</blockquote>\n<ol start=\"3\">\n<li>论据是调查或实验数据，且没有直接否定论点的选项。</li>\n</ol>\n<h3 id=\"逆否命题\"><a class=\"anchor\" href=\"#逆否命题\">#</a> 逆否命题</h3>\n<ol>\n<li>充分条件常见关联词<br />\n A 是 B 的充分条件；如果 A，那么 B；若 A，那么 B；所以 A 都是 B；只要 A，就 B；凡是 A，都 B。 <code>A-&gt;B,表示结果的连词，只要A做了什么B就怎么样，如果A做了什么B会怎么样，A怎么样都是B做了什么这样的关系时，原因放前面，引起的结果放后面。</code></li>\n<li>必要条件常见<br />\n只有 B，才 A；B 是 A 的必要条件；B 是 A 的前提；A 的基础是 B；为了 A，一定 B；A 的保障是 B。 <code>A-&gt;B,表示只有B这样做了A才会怎么样，B是A怎么样的唯一诱导因素，B不可缺少，放后面。</code></li>\n</ol>\n<p>总的来说，遇到 &quot;只要... 才...&quot; 等这种必要条件时， <code>只需要判断出谁是必不可少的条件，把必要条件放后面就行。</code> 例如，“人类能生存，一定要有氧气”，生存 -&gt; 氧气。</p>\n<ol start=\"3\">\n<li>逆否命题<br />\n A-&gt;B 等价于 -B-&gt;-A</li>\n</ol>\n<p><code>公理：对于命题A-&gt;B，否前和肯后(即否定前件和肯定后件)得不出任何确定性的结论。</code></p>\n<h4 id=\"记忆\"><a class=\"anchor\" href=\"#记忆\">#</a> 记忆</h4>\n<ol>\n<li><code>充分条件：有他就行放前面</code></li>\n<li><code>必要条件：没他不行，放后面</code></li>\n<li><code>肯前必肯后</code></li>\n<li><code>否前必否后</code></li>\n<li><code>否前肯后得不出任何正确性结论</code></li>\n</ol>\n<p>总结，做此类题目时，先把题干中的条件关系缕清，只要... 就... 等划为充分条件，前推后；只要... 才... 等关系词划分为必要条件，必要条件在后，后推前。所以出现 &quot;只要&quot; 的时候，要看清后面是 &quot;就&quot; 还是 &quot;才&quot;。</p>\n<h3 id=\"联言命题\"><a class=\"anchor\" href=\"#联言命题\">#</a> 联言命题</h3>\n<p>通俗的讲就是 &quot;且&quot; 关系，形式威 “A 且 B”。</p>\n<h4 id=\"重要结论\"><a class=\"anchor\" href=\"#重要结论\">#</a> 重要结论</h4>\n<p>一假即假，同真才真。</p>\n<h4 id=\"常见关键词\"><a class=\"anchor\" href=\"#常见关键词\">#</a> 常见关键词</h4>\n<ol>\n<li>既 A 又 B</li>\n<li>不但 A 而且 B</li>\n<li>仅 A 而且 B</li>\n<li>虽然 A 但是 B</li>\n</ol>\n<p>特别注意： <code>“虽然A但是B”这个在言语中表示转折关系，但是在逻辑中表示的是且关系。</code></p>\n<ol start=\"5\">\n<li>A,B</li>\n<li>同时 A,B</li>\n</ol>\n<h3 id=\"选言命题\"><a class=\"anchor\" href=\"#选言命题\">#</a> 选言命题</h3>\n<p>主要讲述 “或” 命题，基本形式为 “A 或 B”。</p>\n<p>一真则真，两假才假。</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/markdwon%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "url": "https://xiaoplong.github.io/markdwon%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "title": "markdown语法",
            "date_published": "2022-11-21T16:00:00.000Z",
            "content_html": "<h1 id=\"markdown常用\"><a class=\"anchor\" href=\"#markdown常用\">#</a> markdown 常用</h1>\n<h2 id=\"标题语法\"><a class=\"anchor\" href=\"#标题语法\">#</a> 标题语法</h2>\n<ul>\n<li>相应标题前加对应个 #，# 数代表了标题的级别。（注意 #后有个空格）</li>\n<li>或者在文本的下方添加任意数量的 = 标识一级标题，或者 - 标识二级标题</li>\n</ul>\n<h2 id=\"段落语法\"><a class=\"anchor\" href=\"#段落语法\">#</a> 段落语法</h2>\n<ul>\n<li>用空白的一行或者多行文本进行分隔</li>\n</ul>\n<p>不要用空格或者制表符缩进段落</p>\n<h2 id=\"换行语法\"><a class=\"anchor\" href=\"#换行语法\">#</a> 换行语法</h2>\n<ul>\n<li>结尾空格方式</li>\n</ul>\n<blockquote>\n<p>输入两个或者多个空格后进行回车换行。</p>\n</blockquote>\n<ul>\n<li>HTML 的 &quot;br&quot; 标签</li>\n</ul>\n<blockquote>\n<p>或者直接用 &quot;br&quot; 标签换行</p>\n</blockquote>\n<h2 id=\"强调语法\"><a class=\"anchor\" href=\"#强调语法\">#</a> 强调语法</h2>\n<ul>\n<li>粗体强调</li>\n</ul>\n<blockquote>\n<p>在单词或者短语的前后各添加两个星号</p>\n</blockquote>\n<ul>\n<li>斜体</li>\n</ul>\n<blockquote>\n<p>前后各添加一个星号</p>\n</blockquote>\n<ul>\n<li>粗体和斜体</li>\n</ul>\n<blockquote>\n<p>前后各添加三个星号</p>\n</blockquote>\n<h2 id=\"引用语法\"><a class=\"anchor\" href=\"#引用语法\">#</a> 引用语法</h2>\n<ol>\n<li>创建块引用</li>\n</ol>\n<blockquote>\n<p>段落前 &quot;&gt;&quot; 符号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多个段落的块引用</li>\n</ol>\n<blockquote>\n<p>块引用可以包含多个段落，为段落之间的空白行添加一个 &quot;&gt;&quot; 符号</p>\n</blockquote>\n<ol start=\"3\">\n<li>嵌套块引用</li>\n</ol>\n<blockquote>\n<p>在要嵌套的段落前添加一个 &quot;&gt;&gt;&quot; 符号</p>\n</blockquote>\n<ol start=\"4\">\n<li>带有其它元素的块引用</li>\n</ol>\n<blockquote>\n<p>&quot;&gt; - 这是一个带其它元素的块引用&quot;</p>\n</blockquote>\n<p>显示效果如下：</p>\n<blockquote>\n<ul>\n<li>这是一个带其它元素的块引用</li>\n</ul>\n</blockquote>\n<h2 id=\"分隔线语法\"><a class=\"anchor\" href=\"#分隔线语法\">#</a> 分隔线语法</h2>\n<p>单独一行上使用三个或者多个星号 (***), 破折号 (---), 或者下划线 (___), 并且不能包含其它内容。</p>\n<p>为了兼容性，分割线前后均要添加空白行。</p>\n<h2 id=\"链接语法\"><a class=\"anchor\" href=\"#链接语法\">#</a> 链接语法</h2>\n<pre><code>[超链接显示名](超链接地址 &quot;超链接title&quot;)\n</code></pre>\n<p>用尖括号可以很方便的将 URL 或者 Email 地址变为可点击的链接。</p>\n<h2 id=\"图片语法\"><a class=\"anchor\" href=\"#图片语法\">#</a> 图片语法</h2>\n<pre><code>![图片alt](图片链接 &quot;图片title&quot;)\n</code></pre>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/vue%E6%A1%86%E6%9E%B6/",
            "url": "https://xiaoplong.github.io/vue%E6%A1%86%E6%9E%B6/",
            "title": "Vue学习笔记",
            "date_published": "2022-11-21T16:00:00.000Z",
            "content_html": "<h1 id=\"vue全家桶\"><a class=\"anchor\" href=\"#vue全家桶\">#</a> Vue 全家桶</h1>\n<h2 id=\"vue基础\"><a class=\"anchor\" href=\"#vue基础\">#</a> Vue 基础</h2>\n<h3 id=\"什么是vue\"><a class=\"anchor\" href=\"#什么是vue\">#</a> 什么是 Vue</h3>\n<p>一套用于构建用户界面的渐进式 javaScript 框架</p>\n<p>构建用户界面，将数据通过某种办法变成用户可以看见的界面。</p>\n<p>渐进式，Vue 可以自底向上逐层的应用</p>\n<blockquote>\n<p>简单应用：只需一个轻量小巧的核心库<br />\n复杂应用：可以引入各式各样的 Vue 插件</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%90%91/",
            "url": "https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%90%91/",
            "title": "学习",
            "date_published": "2022-11-12T16:00:00.000Z",
            "content_html": "<h1 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> java</h1>\n<h2 id=\"java基础\"><a class=\"anchor\" href=\"#java基础\">#</a> java 基础</h2>\n<ul>\n<li>DOS 命令，java 特性</li>\n<li>super 关键字</li>\n<li>设计模式，单例和工厂</li>\n<li>Iterator 迭代，List 接口，Set，Map，Collections</li>\n<li>File，IO 流，转换流</li>\n<li>缓冲流和内存流</li>\n<li>对象流，Properties 类，装饰者设计模式</li>\n<li>多线程</li>\n<li>网络编程，TCP/Ip，UDP</li>\n<li>NIO，Channel，Buffer</li>\n<li>Selector，FileChannel</li>\n<li>反射</li>\n<li>JDK</li>\n<li>JVM</li>\n</ul>\n<h2 id=\"javaweb\"><a class=\"anchor\" href=\"#javaweb\">#</a> javaweb</h2>\n<ul>\n<li>数据库</li>\n<li>后端技术（Servlet，Filter，Listener，JSP）</li>\n<li>会话跟踪技术（Cookie，Session）</li>\n<li>版本控制器 SVN</li>\n<li>在线支付</li>\n</ul>\n<h3 id=\"相关技术\"><a class=\"anchor\" href=\"#相关技术\">#</a> 相关技术</h3>\n<ul>\n<li>数据的完整性，多表查询</li>\n<li>视图和索引</li>\n<li>SQL 注入，批处理，数据库事务</li>\n<li>C3PO 连接池，Druid 连接池</li>\n<li>DBUtils 工具类封装</li>\n<li>Bootstrap</li>\n<li>SVN</li>\n<li>Tomcat，XML</li>\n<li>SAX 解析</li>\n<li>XML 生成</li>\n<li>Http 协议</li>\n<li>Servlet</li>\n<li>Cookie 和 Session</li>\n<li>URL 重写</li>\n<li>过滤器 Filter，监听器 Listener</li>\n<li>jsp 和 jsp 内对象</li>\n<li>EL 表达式，JSTL</li>\n<li>JSON</li>\n<li>Gson，Fastjson，Jackson 工具</li>\n<li>Ajax</li>\n<li>jQuery</li>\n<li>Valiadte 插件和 Moment 插件</li>\n<li>MVC 模式</li>\n</ul>\n<h2 id=\"java框架\"><a class=\"anchor\" href=\"#java框架\">#</a> java 框架</h2>\n<p>主流的企业级框架，开发和管理工具（Maven，Git，Idea），Spring，webMVC 框架（SpringMVC。Struts2），ORM 框架（Hibenate，MyBatis），权限管理（Shiro），工作流（Activite），POI，Echarts，Spring 新特性等。</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%92%8Cip%E8%AE%BF%E9%97%AE/",
            "url": "https://xiaoplong.github.io/%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%92%8Cip%E8%AE%BF%E9%97%AE/",
            "title": "网站的两种访问",
            "date_published": "2022-11-12T16:00:00.000Z",
            "content_html": "<h1 id=\"网站的访问\"><a class=\"anchor\" href=\"#网站的访问\">#</a> 网站的访问</h1>\n<p>访问网站有两种方式：IP 地址或域名。</p>\n<p>一般的网站都只允许通过域名网址访问。</p>\n<p>域名（Domain Name）都有它的后缀，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1idnMzOTNiLmNvbQ==\">比如.com</span>,.cn,.net 等。</p>\n<h2 id=\"ip访问\"><a class=\"anchor\" href=\"#ip访问\">#</a> ip 访问</h2>\n<p><code>网站都是存放在服务器上的，网站在服务器上有一个地址，也就是这个网站的IP地址。IP地址可以由机器直接识别。</code></p>\n<p>直接输入这个 IP 地址，即可直接访问这个网站。</p>\n<p>但是由于 IP 地址是一串数字，太难记了，于是就有了域名访问和 DNS。</p>\n<h2 id=\"域名访问\"><a class=\"anchor\" href=\"#域名访问\">#</a> 域名访问</h2>\n<p>域名访问网址即在浏览器直接输入网站的网址就可以访问网站了。</p>\n<p>但是实际上，输入域名（DN）后，DNS（网域名称系统）将域名转换为了对应的 IP 地址，方便机器识别。</p>\n<h3 id=\"域名dn-domain-name\"><a class=\"anchor\" href=\"#域名dn-domain-name\">#</a> 域名 DN （Domain Name）</h3>\n<p>简称域名，网域，是由一串用点分隔的名字组成的 Internet 上某一台计算机或者计算机组的名称。</p>\n<p>用于在数据传输时标识计算机的电子方位（或者物理位置）。</p>\n<h2 id=\"网域名称系统-dns\"><a class=\"anchor\" href=\"#网域名称系统-dns\">#</a> 网域名称系统 DNS</h2>\n<p>DNS 有时简称域名，是因特网的一项核心服务。</p>\n<p>DNS 就是把网址和网站的 ip 地址对应起来，这样输入网址，就相当于输入了网站的 ip 地址，就可以访问网站了。这里的网址也就是域名。</p>\n<p><code>DNS将域名和IP地址相互映射成一个分布式数据库。</code></p>\n<p>如 www.wikesa.org 是一个域名，在这个数据库中，和 IP 地址 208.80.152.2 相对应。输入域名就可以直接访问这个 IP 地址的网站了。</p>\n<p>DNS 就像是一个自动的电话号码簿，可以直接拨打 www.wikesa.org 的名字来替代电话号码（Ip 地址）。我们直接调用网站的名字后， <code>DNS会将域名www.wikesa.org转化成便于机器识别的IP地址。</code></p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/%E7%88%AC%E8%99%AB/",
            "url": "https://xiaoplong.github.io/%E7%88%AC%E8%99%AB/",
            "title": "爬虫",
            "date_published": "2022-11-12T16:00:00.000Z",
            "content_html": "<h1 id=\"爬虫\"><a class=\"anchor\" href=\"#爬虫\">#</a> 爬虫</h1>\n<h2 id=\"什么是爬虫\"><a class=\"anchor\" href=\"#什么是爬虫\">#</a> 什么是爬虫</h2>\n<p>就是模拟浏览器发送请求，获取响应。</p>\n<p>我们如果将互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物（数据）。</p>\n<p>网络爬虫也叫网络蜘蛛，它特指一类自动批量下载网络资源的程序。</p>\n<p><code>更专业的定义：网络爬虫是伪装成客户端与服务器进行数据交互的程序。</code></p>\n<h2 id=\"爬虫的应用\"><a class=\"anchor\" href=\"#爬虫的应用\">#</a> 爬虫的应用</h2>\n<ol>\n<li>数据采集</li>\n</ol>\n<blockquote>\n<p>大数据</p>\n</blockquote>\n<ol start=\"2\">\n<li>搜索引擎</li>\n</ol>\n<blockquote>\n<p>百度谷歌等搜索引擎都是基于爬虫技术。</p>\n</blockquote>\n<ol start=\"3\">\n<li>模拟操作</li>\n</ol>\n<blockquote>\n<p>模拟用户操作，测试机器人等</p>\n</blockquote>\n<ol start=\"4\">\n<li>软件测试</li>\n</ol>\n<blockquote>\n<p>爬虫之自动化测试，虫师</p>\n</blockquote>\n<ol start=\"5\">\n<li>网络安全</li>\n</ol>\n<blockquote>\n<p>短信轰炸，web 漏洞扫描</p>\n</blockquote>\n<h2 id=\"爬虫的分类\"><a class=\"anchor\" href=\"#爬虫的分类\">#</a> 爬虫的分类</h2>\n<ol>\n<li>按照爬取的数量</li>\n</ol>\n<ul>\n<li>通用爬虫：通常指搜索引擎的爬虫</li>\n</ul>\n<blockquote>\n<p>通用爬虫是搜索引擎抓取系统（baidu，google 等）的重要组成成分。主要目的是将互联网的网页下载到本地，形成一个互联网内容的镜像备份。</p>\n</blockquote>\n<p>但是它有个很大的问题就是，它们具有很大的局限性：大部分内容没有用，不同的搜索目的，返回的内容不同。</p>\n<ul>\n<li>聚焦爬虫：针对特定网站的爬虫</li>\n</ul>\n<blockquote>\n<p>是面向特定主题需求的一中网络爬虫程序，它与通用搜索引擎爬虫的区别在于：聚焦爬虫在实施页面抓取时，会对内容进行处理筛选，尽量保证只抓取与需求相关的网页信息。</p>\n</blockquote>\n<ol start=\"2\">\n<li>按照是否获取数据为目的</li>\n</ol>\n<ul>\n<li>功能性爬虫：投票，点赞等</li>\n<li>数据增量爬虫：招聘信息等</li>\n</ul>\n<ol start=\"3\">\n<li>根据 url 地址和对应的页面内容是否改变，数据增量爬虫可分为：</li>\n</ol>\n<ul>\n<li>基于 url 地址变化，内容也随之变化的数据增量爬虫</li>\n<li>url 地址不变，内容变化的增量爬虫</li>\n</ul>\n<h2 id=\"爬虫的一般开发流程\"><a class=\"anchor\" href=\"#爬虫的一般开发流程\">#</a> 爬虫的一般开发流程</h2>\n<ol>\n<li>简单的单页面数据爬取</li>\n</ol>\n<blockquote>\n<p>url-&gt; 发送请求，获取相应 -&gt; 提取数据 -&gt; 保存数据</p>\n</blockquote>\n<ol start=\"2\">\n<li>多页面数据的爬取</li>\n</ol>\n<blockquote>\n<p>发送请求，获取相应 -&gt; 提取 url 地址，继续请求</p>\n</blockquote>\n<h2 id=\"爬虫开发的重难点\"><a class=\"anchor\" href=\"#爬虫开发的重难点\">#</a> 爬虫开发的重难点</h2>\n<ol>\n<li>数据的获取</li>\n</ol>\n<blockquote>\n<p>网络公共资源都是为用户准备的，为了避免被爬虫采集， <code>服务端会设置非常多的图灵测试</code> ，阻止爬虫的恶意爬取，也就是 <code>反爬措施</code> 。需要很大一部分工作量去处理这些反爬措施。</p>\n</blockquote>\n<ol start=\"2\">\n<li>采集速度</li>\n</ol>\n<blockquote>\n<p>巨大的数据量，如果采集速度跟不上，耗时过长就达不到商业需求。一般采用 <code>并发以及分布式</code> 来解决速度问题。</p>\n</blockquote>\n<h2 id=\"robots协议\"><a class=\"anchor\" href=\"#robots协议\">#</a> robots 协议</h2>\n<p>网站通过 robots 协议，告诉我们搜索引擎哪些页面可以抓取，哪些不能，但它仅仅是道德层面的约束。</p>\n<h1 id=\"http和https\"><a class=\"anchor\" href=\"#http和https\">#</a> HTTP 和 HTTPS</h1>\n<p>大多数商业应用采用的架构</p>\n<ol>\n<li>c/s cilent 客户端，服务端</li>\n<li>b/s browser [ˈbraʊzə] 浏览器，服务端</li>\n<li>m/s mobile 移动端，服务端<br />\n统称为客户端，服务端</li>\n</ol>\n<p><code>网络爬虫是伪装成客户端，然后与服务端进行数据交互的程序。</code> 那么客户端和服务端怎么进行数据交互呢？</p>\n<h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<p>超文本传输协议， <code>用于从万维网服务器传输超文本到本地浏览器的传送协议。</code> <br />\n一个应用层协议，目前互联网百分之九十的网络传输都是基于 http 协议的。</p>\n<p><code>爬取想要的数据前，一定明确使用的是什么协议。</code> 就比如 <code>弹幕可能采用的是websocket协议</code> ，这样采用传统的爬虫就无法爬取弹幕了。</p>\n<p>HTTP 基于 TCP/IP 通信协议来传递数据（HTML 文件，图片文件，查询结果等）。</p>\n<p>注意：<br />\nTCP/IP 有个面向连接的特性，保证了数据的完整性。</p>\n<h3 id=\"tcp-trabsmission-control-protocol\"><a class=\"anchor\" href=\"#tcp-trabsmission-control-protocol\">#</a> TCP Trabsmission Control Protocol</h3>\n<p>传输控制协议，是一种面向连接的，可靠的，基于字节流的传输层通信协议。</p>\n<p>TCP 是 <code>为了在不可靠的互联网络上提供可靠的端到端字节流</code> 而专门设计的一个传输协议。</p>\n<p>可以抽象的理解为 <code>管道</code> 。</p>\n<h3 id=\"三次握手四次挥手\"><a class=\"anchor\" href=\"#三次握手四次挥手\">#</a> 三次握手四次挥手</h3>\n<p>最开始的时候客户端和服务器都出用 closed 状态。主动打开连接的为客户端，被动打开连接的是服务器。</p>\n<p>过程：</p>\n<ol>\n<li>三次握手建立连接</li>\n</ol>\n<ul>\n<li>第一次握手：建立连接。客户端发送 syn 包（seq=x）到服务器，并进入 SYN_SENT，等待服务器确认。SYN：同步序列编号（Synchronize Sequence Numbers）。TCP 规定，SYN 报文段（SYN=1 的报文段）不能携带数据，但需要消耗掉一个序号。</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>通俗点：客户端要和服务端进行通信，首先告知服务端一声，然后发出一个 SYN=1 的连接请求信号</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>第二次握手：服务器收到 syn 包，必须确定客户端的 SYN（ack=x+1），同时自己也发送一个 SYN 包（seq=y)，即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。这个报文也不能携带数据，但是同样要消耗一个序号。</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>当服务端接收到客户端的连接请求，此时要给客户端一个确认信号，表示 “我知道了（ACK），我这边已经准备好了，你现在连接吗（SYN）”。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>第三次握手：客户端收到服务器的 SYN+ACK 包，想服务器发送确认包 ACK (ack=y+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，双方就可以通信了，完成三次握手。TCP 规定，ACK 报文段可以携带数据，但是如果不携带数据则不消耗序号。</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>当客户端接收到服务端的确认连接信息后，告知服务端，“好的，咱们开始连接（ACK）”。</p>\n</blockquote>\n</blockquote>\n<p>建立了连接，然后进行数据交互。</p>\n<ol start=\"2\">\n<li>四次挥手断开连接（TCP 连接的释放）</li>\n</ol>\n<p>在断开连接之前客户端和服务器都处于 ESTABLISHED 状态，双方都可以主动断开连接，以客户端主动断开连接为优。</p>\n<ul>\n<li>\n<p>第一次挥手：客户端打算断开连接，向服务器发送 FIN 报文（FIN 标记位被设置为 1，1 表示为 FIN，0 表示不是），FIN 报文会指定一个序列号，之后客户端进入 FIN_WAIT_1 状态。</p>\n<p>第一次挥手客户端发送 <code>连接释放报文段（FIN报文），指定序列号ｓｅｑ＝ｕ</code> ，主动关闭 TCP 连接，等待服务器的确认。</p>\n</li>\n</ul>\n<p><code>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</code></p>\n<ul>\n<li>第二次挥手：服务器收到连接释放报文段（FIN 报文）后，向客户端发送 <code>ACK应答报文，以客户端的FIN报文的序列号seq+1作为ACK应答报文的确认序列号ack=seq+1=u+1</code></li>\n</ul>\n<p>服务器进入 CLOSE_WAIT (等待关闭) 状态，此时的 TCP 处于半关闭状态，客户端到服务器的连接释放。客户端收到来自服务器的 ACK 应答报文段后，进入 FIN_WAIT_2 状态。</p>\n<p>ACK 应答报文 Acknowledgement 确定字符</p>\n<p>ESTABLISHED established 连接的</p>\n<p>SYN Synchronized Sequence Numbers 同步序列编号</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/%E4%BB%A3%E7%90%86/",
            "url": "https://xiaoplong.github.io/%E4%BB%A3%E7%90%86/",
            "title": "代理",
            "date_published": "2022-11-08T16:00:00.000Z",
            "content_html": "<h1 id=\"代理\"><a class=\"anchor\" href=\"#代理\">#</a> 代理</h1>\n<h2 id=\"正向代理\"><a class=\"anchor\" href=\"#正向代理\">#</a> 正向代理</h2>\n<p>一般直接叫做代理。</p>\n<p>正向代理指的是用户利用代理服务器访问目标服务器。</p>\n<h3 id=\"用处\"><a class=\"anchor\" href=\"#用处\">#</a> 用处</h3>\n<ol>\n<li>访问 404 网站</li>\n</ol>\n<blockquote>\n<p>相当于跑腿代购，我们并不能直接在网上购买香烟这类禁止网上销售或者没有在外卖平台上架的商品（404），但是我们可以通过骑手（代理服务器），去指定的店铺（目标服务器）购买我们需要的东西（目标资源），送到我们面前。</p>\n</blockquote>\n<ol start=\"2\">\n<li>加速访问</li>\n</ol>\n<h2 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h2>\n<p>正向代理代理的是用户，反向代理对象是目标服务器，是指服务端利用代理服务器给用户提供服务。</p>\n<h3 id=\"正反代理对比\"><a class=\"anchor\" href=\"#正反代理对比\">#</a> 正反代理对比</h3>\n<p>两者都是利用代理服务器实现的，不过反向代理的主语是服务器，所以反向代理对于用户来说是透明的，在用户的视野里，代理服务器就是目标服务器。</p>\n<blockquote>\n<p>类似饿了么『专星送』服务，我们（用户）在想喝咖啡的时候，并不需要知道我们附近哪个广场哪个角落有家星巴克（目标服务器），我们只需要打开专星送（代理服务器），直接下单就是，其会自动分配合适的门店为我们提供咖啡。</p>\n</blockquote>\n<p>反向代理在实际应用中可以起到保护和隐藏真正提供服务的服务器，对用户的需求提供负载均衡。</p>\n<h2 id=\"代理的实现\"><a class=\"anchor\" href=\"#代理的实现\">#</a> 代理的实现</h2>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/%E7%AC%94%E8%AF%95%E9%A2%98/",
            "url": "https://xiaoplong.github.io/%E7%AC%94%E8%AF%95%E9%A2%98/",
            "title": "笔试题",
            "date_published": "2022-11-04T16:00:00.000Z",
            "content_html": "<h1 id=\"笔试题\"><a class=\"anchor\" href=\"#笔试题\">#</a> 笔试题</h1>\n<h2 id=\"计网\"><a class=\"anchor\" href=\"#计网\">#</a> 计网</h2>\n<h3 id=\"子网掩码的应用\"><a class=\"anchor\" href=\"#子网掩码的应用\">#</a> 子网掩码的应用</h3>\n<p>1. 计算机网络中，子网划分是通过借用 IP 地址的若干位主机位来充当子网地址从而将原网络划分为若干子网而实现的，现假设北京市某单位分配到一个 B 类 IP 地址，其网络地址为 129.250.0.0，该单位有 4000 台机器，平均分布在 16 个不同的地点，试给每一地点分配一个子网号码，要求能分配的子网数最多的情况下，每个子网里面的主机数也能容纳一个地点的所有主机，则子网掩码选择为多少，这种情况下可以划分多少个子网？</p>\n<blockquote>\n<p>子网掩码：用于区分地址中是否有子网号，一般以 0、1 表示，网络号和子网号用 1 表示，主机号用 0 表示。</p>\n</blockquote>\n<blockquote>\n<p>A、B、C 类 ip 号（第二级）网络号 + 主机号<br />\n A 类：8+24 B 类：16+16 C 类：24+8 ；它们的子网掩码是默认的，网络号位置为 1，主机号位置为 0.</p>\n</blockquote>\n<blockquote>\n<p>网络地址：子网掩码和 ip 地址相与就是网络地址。</p>\n</blockquote>\n<h4 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h4>\n<pre><code>子网掩码作用：它的主要作用有两个，一是用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。二是用于将一个大的IP网络划分为若干小的子网络。\n</code></pre>\n<h4 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h4>\n<ul>\n<li>和 ip 相与得到网络地址</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>直接将 ip 地址和子网掩码相与</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>\n<p>确定可以划分的子网个数（可以将 ip 扩充为第三级，网络号 + 子网号 + 主机号）</p>\n<p>例如，给出 A 类网络的 ip 地址 20.0.0.0 的子网掩码 255.224.0.0，确定可以划分的子网个数，并写出子网号。</p>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>想到，第二类 IP 地址 A 类网络的默认子网掩码是 255.0.0.0，然后对比给出的子网掩码，可得 224 就是子网号，即为 1110，1 占三位，所以子网个数为 2^3=8 个。然后各自的子网号，除去全零和全一的情况，001|00000<sub>111|00000.（20.32.0.0</sub>20.224.0.0）</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>\n<p>将某个网络划分为 n 个子网，然后计算每个子网有效的 IP 地址范围和相应的子网掩码</p>\n<p>例如：将 C 类网络 200.161.30.0 划分为 4 个子网，计算每个子网有效的主机 IP 地址和相应的子网掩码</p>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>C 类网络的 IP 地址默认子网掩码为 255.255.255.0，要划分 4 个子网，2^2=4 需要占用两个主机号为来作为子网号，所以子网掩码为 255.255.255.11000000。<br />\n每个子网的有效 IP 地址范围即为，相应的子网然后去掉全零和全一的情况。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>\n<p>判断两个网络是否在同一个子网下<br />\n根据子网掩码算出网络所处的子网，然后比较；或者看是什么类的网络（ABC），然后算出其子网号，看两个网络的网络号。</p>\n</li>\n<li>\n<p>给定网络地址，要求将这个网络划分给 n 个地区，然后要求地区最大主机数 m，然后计算子网掩码和划分给各个区域的网络地址</p>\n<p>例如：某公司申请到网络地址为 192.3.2.0，先要划分 5 个子公司，最大的子公司要求有 28 台计算机，每个子公司在一个子网下，求子网掩码和五个子公司的网络地址？</p>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>可以判断这个网络属于 C 类 Ip 地址，子网掩码默认为 255.255.255.0，要划分五个子网，那么需要三个主机位作为子网号，因为 2<sup>3&gt;5 且 2</sup>2&lt;5. 然后剩下 5 个主机号位，2^5-2&gt;28 满足地区最大主机数要求。<br />\n所以子网掩码为 255.255.255.111|00000 = 255.255.255.224</p>\n</blockquote>\n</blockquote>\n<h3 id=\"iptcp\"><a class=\"anchor\" href=\"#iptcp\">#</a> IP/TCP</h3>\n<p>IP 分组中的数据部分 = TCP 首部 + TCP 数据部分</p>\n<h2 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h2>\n<h2 id=\"计组\"><a class=\"anchor\" href=\"#计组\">#</a> 计组</h2>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/computer-science/vim/vim/",
            "url": "https://xiaoplong.github.io/computer-science/vim/vim/",
            "title": "vim命令",
            "date_published": "2022-10-21T16:00:00.000Z",
            "content_html": "<h1 id=\"vim相关指令\"><a class=\"anchor\" href=\"#vim相关指令\">#</a> Vim 相关指令</h1>\n<p>普通模式下，输入一个或者多个建组成一条指令。</p>\n<h2 id=\"强大的命令\"><a class=\"anchor\" href=\"#强大的命令\">#</a> 强大的。命令</h2>\n<p>. 命令会 &quot;重复上次修改&quot;.</p>\n<blockquote>\n<p>例 1，x 命令删除光标所在的字符，这种情况下使用。命令重复上次修改，就会让 vim 继续删除光标下的字符。</p>\n<blockquote>\n<p>使用 u 指令可以撤销上次的修改，使文本恢复到初试状态。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>例 2:dd 命令也可以做到删除操作，但是它会把整行一起删除掉。如果 dd 后使用。命令，那么重复上次修改，会让 vim 继续删除当行。</p>\n<blockquote>\n<p>&quot;&gt;G&quot; 命令会增加从当前行到文档末尾处的缩进层次。也就是，假设文档有多行数据，光标指向第二行数据，&gt;G 命令后，第二行到文档最后一行会形成较第一行的一个缩进。</p>\n</blockquote>\n</blockquote>\n<p><code>注意：x,dd,&gt;命令是在esc，普通模式下进行的。</code></p>\n<p><code>除了删除，缩进等在普通模式中执行的命令修改外；每次我们进入插入模式时，也会形成一次修改，从进入修改模式那刻起(例如输入i,o,s,a),直到返回普通模式位置(输入esc)，vim也记录这段时间内的按键。根据这个特性，我们打代码的时候，上下连续重复的代码，只用用.命令就行了，因为它退出普通模式，输入代码，然后esc进入普通模式，这段时间内的修改，即为这段输入代码，使用.命令，直接就在光标位置进行了上次的修改。</code></p>\n<h3 id=\"命令是一个微型的宏\"><a class=\"anchor\" href=\"#命令是一个微型的宏\">#</a> . 命令是一个微型的宏</h3>\n<p><code>宏中，vim可以录制任何数目的按键操作，然后在以后重复执行它们。.可以看作一个很小的宏</code></p>\n<h2 id=\"行尾添加内容\"><a class=\"anchor\" href=\"#行尾添加内容\">#</a> 行尾添加内容</h2>\n<p><code>命令行模式（esc）下，$可以移动到光标所在行的尾部。</code></p>\n<blockquote>\n<p>例如，在每行末尾添加 “;“符号，想<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>到句尾，然后</mtext><mi>a</mi><mtext>指令插入模式，然后输入</mtext><mi mathvariant=\"normal\">&quot;</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">&quot;</mi><mtext>。由于</mtext><mi mathvariant=\"normal\">.</mi><mtext>可以看作很小的宏，利用</mtext><mi mathvariant=\"normal\">.</mi><mtext>命令，它会记录退出普通模式到进入普通模式的修改，即它记录了</mtext><mi>a</mi><mo separator=\"true\">;</mo><mo separator=\"true\">,</mo><mtext>插入和输入</mtext><mi mathvariant=\"normal\">&quot;</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">&quot;</mi><mtext>。也就是说只要第一次</mtext></mrow><annotation encoding=\"application/x-tex\">到句尾，然后a指令插入模式，然后输入&quot;;&quot;。\n由于.可以看作很小的宏，利用.命令，它会记录退出普通模式到进入普通模式的修改，即它记录了 a;,插入和输入&quot;;&quot;。\n也就是说只要第一次</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">句</span><span class=\"mord cjk_fallback\">尾</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">然</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">指</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">插</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">然</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">由</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">很</span><span class=\"mord cjk_fallback\">小</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">宏</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">利</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">它</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">记</span><span class=\"mord cjk_fallback\">录</span><span class=\"mord cjk_fallback\">退</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord cjk_fallback\">普</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">普</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">修</span><span class=\"mord cjk_fallback\">改</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">即</span><span class=\"mord cjk_fallback\">它</span><span class=\"mord cjk_fallback\">记</span><span class=\"mord cjk_fallback\">录</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">插</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">说</span><span class=\"mord cjk_fallback\">只</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">次</span></span></span></span> a;&lt;esc&gt; 后，就只要 j. 进行插入了。<br />\n一个。键包括了 a;&lt;esc&gt; 三个键。</p>\n</blockquote>\n<blockquote>\n<p>可以将 $a 组合键，改为 A 命令，直接跳到句尾，</p>\n</blockquote>\n<h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<ul>\n<li>dw 命令 在后面没有任何东西的情况下，dw 指令删除光标下的单词、汉字或者符号，如果说光标后面还有其它的东西时：<br />\n当光标指向的是字母或者汉字时，dw 会删除光标到下一个字符所有的字母汉字，然后指向那个字符。<br />\n当光标指向字符时，如果后面不是字符，那么会只删除这个字符，若是后面时字符，那么会删除从光标指向的字符开始到最后一个连续字符为止的所有字符，然后指向字母或者汉字。</li>\n<li>dj 命令 删除本行和下一行</li>\n<li>dk 命令 删除本行和上一行</li>\n<li>s 指令 删除光标所指向的字符，然后进入插入模式</li>\n<li>dh 指令 删除光标所指字符的左边那个字符</li>\n<li>dl 指令 删除光标所指向的字符，然后左移一个单位</li>\n<li>dd 命令 删除光标所指的整行</li>\n<li>x 命令 删除光标所指，然后光标右移一个单位，与 dl 命令的效果相同。</li>\n<li>cl 命令 相似于 dl 命令，但是它是删除光标所指，然后进入插入模式</li>\n<li>cc 命令 相似于 dd 命令，但是它是删除光标当行，然后进入插入模式。</li>\n<li>C 命令 删除光标所指到句尾的所有字符，然后进入插入模式。</li>\n</ul>\n<h2 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h2>\n<p><code>a,o,s,i相关的命令</code></p>\n<ul>\n<li>a 命令 在当前光标之后添加内容</li>\n<li>A 命令 在当前行的结尾添加内容，不管光标处于什么位置，输入 A 都会进入插入模式，并把光标移到结尾。也就是说它把 $a 封装成了一个按键操作。</li>\n<li>I 命令 与 A 相反，它是在行首进行插入。</li>\n<li>cc 删除整行并进入插入模式</li>\n<li>S 与 cc 相同，删除整行并进入插入模式。</li>\n<li>C 命令 删除光标到行尾的所有内容，然后进入插入模式。</li>\n<li>o 命令 下一行进行插入</li>\n<li>O 命令 在光标所在行和上一行中间插入一行，然后进行插入模式。</li>\n</ul>\n<h2 id=\"一箭双雕\"><a class=\"anchor\" href=\"#一箭双雕\">#</a> &quot; 一箭双雕”</h2>\n<p>从普通模式切换到插入模式</p>\n<ul>\n<li>s 命令 cl 复合 删除光标所指，然后进入插入模式。</li>\n<li>C 命令 c$ 复合 删除光标所指到句尾的所有内容，然后进入插入模式。</li>\n<li>o 命令 A&lt;CR&gt; 复合</li>\n<li>A 命令 $a 复合 行尾插入</li>\n<li>I 命令 ^i 复合 (两个 i)</li>\n<li>S 命令 ^c 复合 删除整行，然后进入插入模式 (两个 c)</li>\n</ul>\n<h2 id=\"使修改可重复\"><a class=\"anchor\" href=\"#使修改可重复\">#</a> 使修改可重复</h2>\n<p>var foo = &quot;method(&quot;+argument1+&quot;,&quot;+argument2+&quot;)&quot;;</p>\n<h3 id=\"相关命令\"><a class=\"anchor\" href=\"#相关命令\">#</a> 相关命令</h3>\n<blockquote>\n<p>当光标指向改行代码之后。</p>\n</blockquote>\n<ol>\n<li>f {char} 命令 让 vim 查找下一处指定字符的位置，如果找到了就将光标移到那里，f + 命令，表示跳跃到该代码的第一个 + 号位置</li>\n<li>s + &lt;esc&gt; 命令 给 + 两边加上空格，任何进入普通模式</li>\n<li><code>;命令 重复查找上次f命令命令所查找的字符</code></li>\n</ol>\n<p>; 命令移到到下一个目标字符，. 命令重复上次的修改，;. 命令即可修改 +。</p>\n",
            "tags": [
                "计算机科学",
                "vim命令",
                "vim"
            ]
        },
        {
            "id": "https://xiaoplong.github.io/computer-science/Linux/Linux%20Shell/Linux+shell/",
            "url": "https://xiaoplong.github.io/computer-science/Linux/Linux%20Shell/Linux+shell/",
            "title": "Linux Shell",
            "date_published": "2022-10-20T16:00:00.000Z",
            "content_html": "<p>:::note info<br />\n 以下为 Linx Shell 相关学习笔记<br />\n:::</p>\n<h1 id=\"linux-command-and-shell-scripting\"><a class=\"anchor\" href=\"#linux-command-and-shell-scripting\">#</a> Linux command and Shell scripting</h1>\n<h2 id=\"什么是linux\"><a class=\"anchor\" href=\"#什么是linux\">#</a> 什么是 Linux</h2>\n<ul>\n<li>Linux 内核</li>\n<li>GNU 工具</li>\n<li>图形化桌面环境</li>\n<li>应用软件</li>\n</ul>\n<h2 id=\"linux内核\"><a class=\"anchor\" href=\"#linux内核\">#</a> Linux 内核</h2>\n<p>Linux 系统的核心，控制着计算机系统上的所有硬件和软件，必要时分配硬件，并根据需要执行软件。<br />\n内核负责：</p>\n<ul>\n<li>系统内存管理</li>\n<li>文件系统管理</li>\n<li>软件系统管理</li>\n<li>硬件设备管理</li>\n</ul>\n<h3 id=\"1-系统内存管理\"><a class=\"anchor\" href=\"#1-系统内存管理\">#</a> 1、系统内存管理</h3>\n<p>内核不仅管理服务器上的可用物理内存，还可以创建和管理虚拟内存（实际上不存的内存），</p>\n<p>内存通过硬盘上的存储空间来实现虚拟内存，这块区域被称为交换空间。</p>\n<p>内核不断地在交换空间和实际的物理内存之间反复的交换虚拟内存中的内容。使得系统以为它拥有比物理内存更多的可用内存。即虚拟内存等于，实际的物理内存加上硬盘中的交换内存。</p>\n<h4 id=\"页\"><a class=\"anchor\" href=\"#页\">#</a> 页</h4>\n<p>内存存储单元按组划分位很多块，这些块称作页面。内核将每个内存页面放在物理内存或者交换空间（虚拟内存）。内核会维护一个内存页面表，指明页面所处的位置，而且会记录哪些内存页面正在被使用，并自动把一段时间为访问的内存页面复制到交换空间区域（换出）—— 即使还有可用内存。</p>\n<p>当程序要访问一个已被换出的页面时，内核必须从物理内存换出另一个内存页面给他让出空间，然后从交换空间换入请求的内存页面。显然这个过程需要花费时间，拖慢运行的进程。</p>\n<p><code>只要Linux系统还在运行，为运行中的程序换出内春页面的过程就不会停歇</code></p>\n<h2 id=\"2-软件管理系统\"><a class=\"anchor\" href=\"#2-软件管理系统\">#</a> 2、软件管理系统</h2>\n<h3 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h3>\n<p>Linux 操作系统将运行中的程序成为进程。<br />\n内核控制 Linux 系统如何管理运行在系统上的所有进程。<br />\n <code>内核创建第一个进程（成为init进程）来自动启动系统上所有其它进程</code> <br />\n内核启动时，它会将 init 进程加载到 <code>虚拟内存</code> 中。</p>\n<p>内核在启动其它任何进程时，都会在 <code>虚拟内存中给新进程分配一块专有区域</code> 来存储该进程用到的数据和代码。</p>\n<h3 id=\"运行级\"><a class=\"anchor\" href=\"#运行级\">#</a> 运行级</h3>\n<p>Linux 操作系统的 init 系统采用了运行级。<br />\n5 个启动运行级：</p>\n<ul>\n<li>运行级为 1，之启动基本的系统进程以及一个控制台终端进程 —— 单用户模式。通常用来在系统有问题时，进行紧急的文件系统维护。这种模式下，仅有一个人能登录到系统上操作数据（通常是管理员）</li>\n<li>3 标准的运行级，大多数应用软件都会启动</li>\n<li>5 系统会自动图形化 X Window 系统，允许用户通过图形化桌面窗口登录系统</li>\n</ul>\n<h2 id=\"硬件设备管理\"><a class=\"anchor\" href=\"#硬件设备管理\">#</a> 硬件设备管理</h2>\n<p>任何 Linux 系统需要与之通信的设置，都需要在内核代码中加入其驱动程序代码。</p>\n<h3 id=\"驱动代码\"><a class=\"anchor\" href=\"#驱动代码\">#</a> 驱动代码</h3>\n<p>驱动代码相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据，在 Linux 内核中有 2 种方法用于插入设备驱动代码：</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动模块</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Linux Command and Shell",
                "Linux基础知识和Shell指令",
                "Linux",
                "Shell"
            ]
        },
        {
            "id": "https://xiaoplong.github.io/computer-science/java/course-1/week-2/",
            "url": "https://xiaoplong.github.io/computer-science/java/course-1/week-2/",
            "title": "第二周",
            "date_published": "2020-04-13T11:12:45.000Z",
            "content_html": "<p>:::note info<br />\n 以下为个人学习笔记和习题整理<br />\n:::</p>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"关系运算\"><a class=\"anchor\" href=\"#关系运算\">#</a> 关系运算</h2>\n<ul>\n<li>六个关系运算符：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>相等</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>关系运算结果为  <code>true</code>  或  <code>false</code></li>\n<li>优先级\n<ul>\n<li>所有关系运算符的优先级比算术运算低，但比赋值运算高</li>\n<li>判断是否相等的 == 和！= 优先级比其他的低</li>\n<li>连续的关系运算是从左到右进行的</li>\n</ul>\n</li>\n<li>判断两个浮点数是否相等的方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>f1<span class=\"token operator\">-</span>f2<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0.0000001</span></pre></td></tr></table></figure><ul class=\"task-list\">\n<li>下列表达式中错误的有？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 5 &gt; 3 == 6 &gt; 4</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 6 &gt; 5 &gt; 4</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> a == b == true</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> a == b == 6</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> a ==  b &gt; false</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> (a == b) &gt; false<br />\n <code>true 和 false 不能比较大小</code> </label></li>\n</ul>\n<h2 id=\"判断语句-if-else\"><a class=\"anchor\" href=\"#判断语句-if-else\">#</a> 判断语句 if else</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"多路分支-switch-case\"><a class=\"anchor\" href=\"#多路分支-switch-case\">#</a> 多路分支 switch case</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>计算 switch 后面的控制表达式以后，程序会跳到相应的 case，但是如果这个 case 内部没有 break，那么在执行完语句后，就会顺序执行到下面的 case，直到遇到 break 或者 switch 结束。</li>\n</ul>\n<h1 id=\"小测验\"><a class=\"anchor\" href=\"#小测验\">#</a> 小测验</h1>\n<ol>\n<li class=\"quiz essay\">\n<p>写出以下代码段的执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num <span class=\"token operator\">>=</span> max<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"huang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>huang<br />\nzhu</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>写出以下代码段的执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> limit <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num1 <span class=\"token operator\">==</span> num2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lemon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>lime<br />\ngrape</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"编程题\"><a class=\"anchor\" href=\"#编程题\">#</a> 编程题</h1>\n<h2 id=\"题目1-时间换算5分\"><a class=\"anchor\" href=\"#题目1-时间换算5分\">#</a> 题目 1. 时间换算（5 分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br />\n UTC 是世界协调时，BJT 是北京时间，UTC 时间相当于 BJT 减去 8。现在，你的程序要读入一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。如 1124 表示 11 点 24 分，而 905 表示 9 点 5 分，36 表示 0 点 36 分，7 表示 0 点 7 分。</p>\n<p>有效的输入范围是 0 到 2359，即你的程序不可能从测试服务器读到 0 到 2359 以外的输入数据。</p>\n<p>你的程序要输出这个时间对应的 UTC 时间，输出的格式和输入的相同，即输出一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。</p>\n<p><em>提醒：要小心跨日的换算。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br />\n一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br />\n一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br />\n 933</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br />\n 133</p>\n</li>\n</ul>\n<h3 id=\"解题代码\"><a class=\"anchor\" href=\"#解题代码\">#</a> 解题代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> bjt <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> utc <span class=\"token operator\">=</span> bjt <span class=\"token operator\">-</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>utc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tutc <span class=\"token operator\">+=</span> <span class=\"token number\">2400</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时为负数，则进行隔日计算</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"题目2-信号报告5分\"><a class=\"anchor\" href=\"#题目2-信号报告5分\">#</a> 题目 2. 信号报告（5 分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br />\n无线电台的 RS 制信号报告是由三两个部分组成的：</p>\n<p>R (Readability) 信号可辨度即清晰度.</p>\n<p>S (Strength)    信号强度即大小.</p>\n<p>其中 R 位于报告第一位，共分 5 级，用 1—5 数字表示.</p>\n<blockquote>\n<p>1---Unreadable</p>\n<p>2---Barely readable, occasional words distinguishable</p>\n<p>3---Readable with considerable difficulty</p>\n<p>4---Readable with practically no difficulty</p>\n<p>5---Perfectly readable</p>\n</blockquote>\n<p>报告第二位是 S，共分九个级别，用 1—9 中的一位数字表示</p>\n<blockquote>\n<p>1---Faint signals, barely perceptible</p>\n<p>2---Very weak signals</p>\n<p>3---Weak signals</p>\n<p>4---Fair signals</p>\n<p>5---Fairly good signals</p>\n<p>6---Good signals</p>\n<p>7---Moderately strong signals</p>\n<p>8---Strong signals</p>\n<p>9---Extremely strong signals</p>\n</blockquote>\n<p>现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到 59，则输出：\t<br />\n <code>\tExtremely strong signals, perfectly readable.\t</code></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br />\n一个整数，信号报告。整数的十位部分表示可辨度，个位部分表示强度。输入的整数范围是 [11,59] 内有效的数字，这个范围外的数字不可能出现在测试数据中。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br />\n一句话，表示这个信号报告的意义。按照题目中的文字，先输出表示强度的文字，跟上逗号和空格，然后是表示可辨度的文字，跟上句号。注意可辨度的句子的第一个字母是小写的。注意这里的标点符号都是英文的。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br />\n 33</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br />\n Weak signals, readable with considerable difficulty.</p>\n</li>\n</ul>\n<h3 id=\"解题代码-2\"><a class=\"anchor\" href=\"#解题代码-2\">#</a> 解题代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> readability <span class=\"token operator\">=</span> rs <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> strength <span class=\"token operator\">=</span> rs <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>strength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Faint signals, barely perceptible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Very weak signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Weak signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fair signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fairly good signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moderately strong signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Strong signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Extremely strong signals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>readability<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", unreadable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", barely readable, occasional words distinguishable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", readable with considerable difficulty.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", readable with practically no difficulty.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", perfectly readable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "java基础"
            ]
        },
        {
            "id": "https://xiaoplong.github.io/computer-science/java/course-1/week-1/",
            "url": "https://xiaoplong.github.io/computer-science/java/course-1/week-1/",
            "title": "第一周",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>:::note info<br />\n 以下为个人学习笔记和习题整理<br />\n:::</p>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"读输入-字符串输出\"><a class=\"anchor\" href=\"#读输入-字符串输出\">#</a> 读输入、字符串输出</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>scanner</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 让 in 这个对象做读入下一行的动作，结果交给 System.out 这个对象去打印一行。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>tips：</p>\n<ul>\n<li><code>System.out.println</code>  会换行， <code>System.out.print</code>  则不会换行</li>\n<li>出现警告： <code>Resource leak: 'in' is never closed</code> ，可以在函数的最后加入</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放</span></pre></td></tr></table></figure><h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<ul>\n<li>\n<p><strong>形式</strong>：&lt;类型名称&gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt;<br />\n <code>int price, amount; // 同时定义两个变量</code> <br />\n <code>int price = 0; // 定义变量并赋值</code> <br />\n <code>int price, amount = 100, age;</code></p>\n</li>\n<li>\n<p><strong>类型名称</strong>：Java 是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p>Java 的保留字列表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"task-list\">\n<li>以下哪些标识符是符合规则的？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> currency</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> lastName</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> fireplace</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> _last_name</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> xingmin</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\"> class</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> goto</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\" /><label for=\"cbx_7\"> 4ever</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\" /><label for=\"cbx_8\"> time-machine</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\" /><label for=\"cbx_9\"> Int</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\" /><label for=\"cbx_10\"> $12</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\" /><label for=\"cbx_11\"> 我是变量</label></li>\n</ul>\n<h2 id=\"常量-final\"><a class=\"anchor\" href=\"#常量-final\">#</a> 常量 final</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">AMOUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//final 是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span></pre></td></tr></table></figure><h2 id=\"变量类型\"><a class=\"anchor\" href=\"#变量类型\">#</a> 变量类型</h2>\n<h3 id=\"整数-int\"><a class=\"anchor\" href=\"#整数-int\">#</a> 整数 int</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>如果用户输入的不是整数，则会报错  <code>java.util.InputMismatchException</code> 。</li>\n<li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li>\n<li>每次召唤 <code>in.nextInt()</code> ，它就等待用户输入一个整数。</li>\n<li>两个整数的运算结果只能是整数。</li>\n<li>在 Java 中， <code>10</code>  和 <code>10.0</code>  是完全不同的数。</li>\n</ul>\n<h3 id=\"浮点数-double\"><a class=\"anchor\" href=\"#浮点数-double\">#</a> 浮点数 double</h3>\n<ul>\n<li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 结果为 0.09999999999999987</span></pre></td></tr></table></figure><ul>\n<li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li>\n</ul>\n<h2 id=\"赋值运算\"><a class=\"anchor\" href=\"#赋值运算\">#</a> 赋值运算</h2>\n<h3 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h3>\n<ul>\n<li>浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不会报错</span></pre></td></tr></table></figure><h3 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h3>\n<ul>\n<li>单目运算符 <code>+</code>   <code>-</code>  优先级最高</li>\n<li>结合关系一般自左向右，单目 <code>+</code>   <code>-</code>  和赋值 <code>=</code>  自右向左。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"复合赋值\"><a class=\"anchor\" href=\"#复合赋值\">#</a> 复合赋值</h3>\n<ul>\n<li>5 个算术运算符， <code>+ - * / %</code> ，可以和赋值运算符  <code>=</code>  结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>total <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>total <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>total <span class=\"token operator\">=</span> total<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>total <span class=\"token operator\">/=</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>total <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>递增递减运算符  <code>++</code>   <code>--</code> ，给变量 + 1 或 - 1</li>\n<li>前缀后缀：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t1 <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//t1 先被赋值为 a 即 14， a 自加到 15</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 先自加到 15，t2 被赋值为 a 即 15</span></pre></td></tr></table></figure><h1 id=\"编程题\"><a class=\"anchor\" href=\"#编程题\">#</a> 编程题</h1>\n<h2 id=\"题目1-温度转换5分\"><a class=\"anchor\" href=\"#题目1-温度转换5分\">#</a> 题目 1. 温度转换（5 分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br />\n写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p>\n<p><code>°F = (9/5)*°C + 32</code></p>\n<p>其中 C 表示摄氏温度，F 表示华氏温度。</p>\n<p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p>\n<p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p>\n<p><code>(int)x;</code></p>\n<p>其中 x 是要转换的那个浮点数。</p>\n<p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br />\n一个整数。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br />\n一个整数。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br />\n 100</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br />\n 37</p>\n</li>\n</ul>\n<h3 id=\"解题代码\"><a class=\"anchor\" href=\"#解题代码\">#</a> 解题代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 获得输入的整数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> fahrenheit <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 计算摄氏度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> centigrade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 将浮点数转换为整数输出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>centigrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "java基础",
                "java"
            ]
        },
        {
            "id": "https://xiaoplong.github.io/images/",
            "url": "https://xiaoplong.github.io/images/",
            "title": "Images",
            "date_published": "2013-12-26T14:46:49.000Z",
            "content_html": "<p>This is a image test post.</p>\n<p><img data-src=\"/assets/wallpaper-2572384.jpg\" alt=\"\" /></p>\n<p><img data-src=\"/assets/wallpaper-2311325.jpg\" alt=\"Caption\" /></p>\n<p><img data-src=\"/assets/wallpaper-878514.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://placehold.it/350x150.jpg\" alt=\"Small Picture\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/videos/",
            "url": "https://xiaoplong.github.io/videos/",
            "title": "Videos",
            "date_published": "2013-12-24T16:19:15.000Z",
            "content_html": "<p>This is a video test post.</p>\n<p><strong>Youtube</strong></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/TIbZDRXM-Tg\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p><strong>Vimeo</strong></p>\n<p><div class=\"video-container\"><iframe src=\"https://player.vimeo.com/video/82090131\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/link-post-without-title/",
            "url": "https://xiaoplong.github.io/link-post-without-title/",
            "title": "www.google.com",
            "date_published": "2013-12-24T15:44:13.000Z",
            "content_html": "<p>This is a link post without a title. The title should be the link with or without protocol. Clicking on the link should open <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29tLw==\">Google</span> in a new tab or window.</p>\n",
            "tags": []
        },
        {
            "id": "https://xiaoplong.github.io/long-title/",
            "url": "https://xiaoplong.github.io/long-title/",
            "title": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.",
            "date_published": "2013-12-24T15:31:06.000Z",
            "content_html": "<p>This post has a long title. Make sure the title displayed right.</p>\n",
            "tags": []
        }
    ]
}