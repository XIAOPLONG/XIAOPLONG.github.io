<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>longlong</title>
        <subtitle>每天一点积累</subtitle>
        <icon>https://xiaoplong.github.io/images/favicon.ico</icon>
        <link>https://xiaoplong.github.io</link>
        <author>
          <name>Xiao Long</name>
        </author>
        <description>一些学习笔记</description>
        <language>en</language>
        <pubDate>Sat, 01 Apr 2023 15:23:19 +0800</pubDate>
        <lastBuildDate>Sat, 01 Apr 2023 15:23:19 +0800</lastBuildDate>
        <category term="IT" />
        <category term="计算机" />
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF/</guid>
            <title>java后端面试</title>
            <link>https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF/</link>
            <pubDate>Sat, 01 Apr 2023 15:23:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java后端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java后端&#34;&gt;#&lt;/a&gt; java 后端&lt;/h1&gt;
&lt;p&gt;相关内容参考连接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDI3MjE5&#34;&gt;https://cloud.tencent.com/developer/article/1427219&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nginx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx&#34;&gt;#&lt;/a&gt; Nginx&lt;/h2&gt;
&lt;h3 id=&#34;nginx是什么有什么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx是什么有什么用&#34;&gt;#&lt;/a&gt; Nginx 是什么，有什么用？&lt;/h3&gt;
&lt;h4 id=&#34;nginx是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx是什么&#34;&gt;#&lt;/a&gt; Nginx 是什么&lt;/h4&gt;
&lt;p&gt;engine x&lt;/p&gt;
&lt;p&gt;是一个 &lt;code&gt;高性能&lt;/code&gt; 的 http 和反向代理 web 服务器。&lt;/p&gt;
&lt;p&gt;Nginx 是 &lt;code&gt;一个轻量级的Web服务器/反向代理服务器以及电子邮件代理服务器&lt;/code&gt; ，在 BSD-like 协议下发行 (BSD 许可证)。&lt;/p&gt;
&lt;p&gt;特点：占有内存少，并发能力强。&lt;/p&gt;
&lt;p&gt;百度、京东、新浪、网易、腾讯、淘宝等网站用户都使用了 nginx。&lt;/p&gt;
&lt;h4 id=&#34;有什么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有什么用&#34;&gt;#&lt;/a&gt; 有什么用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;做反向代理&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;它可以隐藏后端服务器的数量，并保证后端服务器免受攻击。&lt;/p&gt;
&lt;p&gt;当用户向 nginx 代理服务器对应域名网站发起请求时，其实对用户这个请求进行处理的是后端真实服务器，中间的服务器就反向代理服务器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;做负载均衡&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx 的负载均衡其实是反向代理的延申，当单台后端服务器无法处理前端庞大的请求时，可以为后端多准备几台服务器，共同分摊流量，这就是负载均衡，也叫均衡负载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011627420.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;做域名重定向&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;url 重定向是指把一个目录或文件的访问请求转发到另一个目录或者文件上，当用户发出相应的访问请求时，网页能跳转到指定的位置。&lt;/p&gt;
&lt;p&gt;分为 301 永久重定向，和 302 暂时重定向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;做动静分离&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;也是 nignx 反向代理功能，因为 nginx 处理静态资源的能力非常强，效率非常高，所以我们会将用户请求的 &lt;code&gt;静态资源直接交友nginx代理服务器处理&lt;/code&gt; ，然后把 &lt;code&gt;动态的应用程序代理到后端，交给应用服务器处理&lt;/code&gt; ，以此提高用户体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;缓存服务器&lt;/li&gt;
&lt;li&gt;邮件代理服务器&lt;/li&gt;
&lt;li&gt;微服务网关等&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理&#34;&gt;#&lt;/a&gt; 反向代理&lt;/h4&gt;
&lt;p&gt;Reverse Proxy 方式是指以 &lt;code&gt;代理服务器来接受internet上的连接请求&lt;/code&gt; ，然后 &lt;code&gt;将请求转发给内部网络的服务器&lt;/code&gt; ，并将 &lt;code&gt;从服务器上得到的结果返回给internet上请求连接的客户端&lt;/code&gt; ，此时代理服务器对外就表现为一个反向代理服务器。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011605008.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图注：取自原文原文：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82MjE1ZTVkMjQ1NTM=&#34;&gt;https://www.jianshu.com/p/6215e5d24553&lt;/span&gt; (下图也是)&lt;/p&gt;
&lt;p&gt;例如，想访问 http://www.test.com/read 这个网站的 read 页面，但是 www.test.com 这个网站上不存在 read 页面，于是她从另外一个服务器上取过来，然后作为自己的内容返回给客户。这里 www.test.com 这个域名对应的服务器就设置了反向代理功能，这个服务器也就是反向代理服务器 vpn。&lt;/p&gt;
&lt;h4 id=&#34;正向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向代理&#34;&gt;#&lt;/a&gt; 正向代理&lt;/h4&gt;
&lt;p&gt;是 &lt;code&gt;一个位于客户端和原始服务器之间的服务器&lt;/code&gt; ， &lt;code&gt;当客户端与原始服务器之间隔了防火墙，不能访问原始服务器时&lt;/code&gt; ，为了从原始服务器取得内容， &lt;code&gt;客户端向代理发送一个请求并指定目标(原始服务器)&lt;/code&gt; ，然后 &lt;code&gt;代理向原始服务器转发请求并将获得的内容返回给客户端&lt;/code&gt; ，客户端才能使用正向代理。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304011605927.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;正向代理工作原理就相当于一个跳板,跳过防火墙，让另一个服务器代替我们访问，然后返回内容&lt;/code&gt; ，例如，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1nb29nbGUtdnA3aWk2YXAwMGt1ZDFmbW94YS5jb20=&#34;&gt;我访问不了 google.com&lt;/span&gt;, 但是我能访问代理服务器 A，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1BZ29vZ2xlLXAyOHNkNTZlNGl4LmNvbQ==&#34;&gt;A 能访问 google.com&lt;/span&gt;，于是先连上 A，告诉他我需要 google.com 的内容，A 服务器去取回来，然后返回给我。&lt;/p&gt;
&lt;h4 id=&#34;正向代理和反向代理区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向代理和反向代理区别&#34;&gt;#&lt;/a&gt; 正向代理和反向代理区别&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;正向代理，是在客户端的&lt;/code&gt; 。比如访问国外的一些网站，我们可能需要购买 vpn (正向代理)，然后通过正向代理 vpn，让用户绕过防火墙，从而连接到目标网络或服务。 &lt;code&gt;vpn是在我们的用户浏览器设置的&lt;/code&gt; ，并 &lt;code&gt;不是在远端的服务器设置&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;浏览器先访问 vpn 地址，vpn 地址转发请求，并最后请求结果园路返回来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;反向代理是作用在服务器端的，是一个虚拟ip(vip)&lt;/code&gt; , 对用户的一个请求，会转发到多个后端处理器中的一台来出来该具体请求。&lt;/p&gt;
&lt;h3 id=&#34;nginx的模块和工作原理是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx的模块和工作原理是什么&#34;&gt;#&lt;/a&gt; Nginx 的模块和工作原理是什么？&lt;/h3&gt;
&lt;h4 id=&#34;nginx模块划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx模块划分&#34;&gt;#&lt;/a&gt; Nginx 模块划分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Nginx 模块从结构上分为核心模块、基础模块和第三方模块：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;核心模块：HTTP 模块、EVENT 模块和 MAIL 模块&lt;br /&gt;
基础模块：HTTP　Access 模块、HTTP　FastCGI 模块、HTTP　Proxy 模块、HTTP　Rewrite 模块&lt;br /&gt;
第三方模块：HTTP　Upstream　Request　Hash 模块、Notice 模块、HTTP　Access　Key 模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;从功能上&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Core 核心博客：构建 nginx 基础服务，管理其它模块。&lt;br /&gt;
Handlers 处理器模块：此类模块直接处理请求，并进行输出内容和修改 headers 信息等操作。&lt;br /&gt;
Filters 过滤器模块：此类模块主要对其它处理器模块输出的内容进行修改操作，最后由 Nginx 输出。&lt;br /&gt;
Proxies 代理类模块：此类模块是 Nginx 的 HTTP Upstream 之类的模块，这些模块主要与后端一些服务，比如 FastCGI 等进行交互，实现服务代理和负载均衡等功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx 的核心模块主要负责建立 nginx 服务模型、管理网络层和应用层协议、以及启动针对特定应用的一系列候选模块。其它模块负责分配给 web 服务器的实际工作：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当 Nginx 发送文件或者转发请求到其它服务器，由 Handlers 或 Proxies 提供服务。&lt;/li&gt;
&lt;li&gt;当需要 Nginx 把输出压缩或者在服务端加一些东西，由 Filters 提供服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;nginx如何处理http请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx如何处理http请求&#34;&gt;#&lt;/a&gt; Nginx 如何处理 HTTP 请求&lt;/h3&gt;
&lt;h4 id=&#34;http处理周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http处理周期&#34;&gt;#&lt;/a&gt; HTTP 处理周期&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端发送 HTTP 请求 &amp;gt; Nginx 基于配置文件中的位置选择一个合适的处理模块 &amp;gt; 如果有负载均衡模块，选择一台后端服务器 &amp;gt; 处理模块进行处理并把缓冲放到第一个过滤模块上 &amp;gt; 第一个过滤模块处理后输出给第二个过滤模块 &amp;gt; 然后第二个送第三个 &amp;gt;.... 以此类推 &amp;gt; 最后把响应发给客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012127713.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;服务器启动时，每个 handlers (处理模块) 都有机会映射到配置文件中定义的特定位置；如果有多个 handlers 映射到特定位置时，只有一个会保留下来；这说明配置文件有冲突项，应该避免。&lt;/p&gt;
&lt;p&gt;处理模块返回的三种形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OK&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;或者放弃处理这个请求而让默认处理模块来处理 (它主要用来处理一些静态文件，事实上如果是位置争取而且真实的静态文件，默认的处理模块会抢先处理)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1）如果 handlers 把请求反向代理到后端的服务器，就变成另外一类的模块：load-balancers (负载均衡模块)&lt;/p&gt;
&lt;p&gt;负载均衡模块的配置中有一组后端服务器，当一个 HTTP 请求过来时，它决定哪台服务器应当获得这个请求。&lt;/p&gt;
&lt;p&gt;Nginx 的负载均衡模块采用两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轮转法：它处理请求从头到尾分发&lt;/li&gt;
&lt;li&gt;IP 哈希法：在众多请求的情况 下，它确保来自同一个 IP 的请求会分发到相同的后端服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2）如果 handlers 没有产生错误，filters (过滤模块) 将被调用。多个 filters 能映射到每个位置，所以每个请求都可以被压缩成块。她们的执行顺序在编译时决定。&lt;/p&gt;
&lt;p&gt;filters 是经典的接力链表模型。&lt;br /&gt;
一个 filters 被调用，完成任务后，调用下一个 filters，直至最后一个 filters。&lt;/p&gt;
&lt;p&gt;过滤链表的特别之处：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个 filters 不会等上一个 filters 全部完成；&lt;br /&gt;
它能把前一个 filters 的输出作为其处理内容；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;过滤模块能以 buffer (缓冲区) 为单位进行操作，这些 buffer 一般都是一页 4k 大小，其大小也可以在 nginx.conf 文件中配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;  本身做的工作实际很少， &lt;code&gt;当它接收到一个HTTP请求时，它仅仅是通过查找配置文件将此次请求映射到一个location block&lt;/code&gt; ，而此 &lt;code&gt;location中所配置的各个指令则会启动不同的模块去完成工作&lt;/code&gt; ，因此 &lt;code&gt;模块可以看作是Nginx真正的劳动者&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;通常一个location中的指令会涉及一个handler模块和多个filter模块,当然多个location也可以复用同一个模块。handler模块负责处理请求，完成响应内容的生成，而filter模块对响应内容进行处理。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;nginx请求处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx请求处理&#34;&gt;#&lt;/a&gt; Nginx 请求处理&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Nginx在启动时会以daemon形式在后台运行，采用多线程、异步非阻塞IO事件模型来出来各种连接请求。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;多线程模型包括一个 master 进程，多个 worker 进程。 &lt;code&gt;一般worker进程个数是根据服务器CPU核数来决定的&lt;/code&gt; 。 &lt;code&gt;master进程负责管理Nginx本身和其它worker进程&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012136594.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Master-Worker 模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4 个 worker 进程的父进程都是 master 进程。表示 worker 进程都是从父进程 fork (分叉) 出来的，并且父进程的 ppid (uid 用户 ID，pid 是进程 ID，ppid 是父进程 ID) 为 1，表示其为 daemon 进程。&lt;/p&gt;
&lt;p&gt;daemon 进程，守护进程，是一类在后台运行的特殊进程，用于执行特定的系统任务。很多守护进程在系统引导的时候启动，并且一直运行到系统关闭；另一些只在需要的时候才启动，完成任务后自动结束。&lt;/p&gt;
&lt;p&gt;Master 进程作用：获取并验证配置文件 nginx.conf；管理 worker 进程。&lt;/p&gt;
&lt;p&gt;Worker 进程的作用：没一个 Worker 进程都维护一个线程 (避免线程切换)，处理连接和请求；注意 Worker 进程的个数由配置文件决定，一般和 CPU 核数有关 (又利于进程切换)，配置几个就有几个 Worker 进程。&lt;br /&gt;
过滤模块链以流水线的方式高效地向客户端发送响应信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;简单的http请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的http请求&#34;&gt;#&lt;/a&gt; 简单的 HTTP 请求&lt;/h4&gt;
&lt;p&gt;Nginx 的内部来看，一个 HTTP Request 请求的处理过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;初始化 HTTP Request (读取来自客户端的数据，生成 HTTP Request 对象，该对象含有该请求的所有信息)&lt;/li&gt;
&lt;li&gt;处理请求头&lt;/li&gt;
&lt;li&gt;处理请求体&lt;/li&gt;
&lt;li&gt;如果有的话，调用与此请求 (URL 或者 Location) 关联的 handler。&lt;br /&gt;
依次调用各 phase (阶段) handler 进行处理&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;建立过程中，对于nginx监听到的每个客户端连接，都会将它的读事件的handler设置为ngx_http_init_request函数，这个函数就是请求处理的入口。&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; spring&lt;/h2&gt;
&lt;h3 id=&#34;spring-mvc的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc的工作原理&#34;&gt;#&lt;/a&gt; Spring MVC 的工作原理&lt;/h3&gt;
&lt;p&gt;MVC，model、view、controller，代表 web 应用程序的三种职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;model 模型：用于存储数据以及能处理用户请求的业务逻辑&lt;/li&gt;
&lt;li&gt;view 视图：向控制器提交数据，显示模型 model 中的数据。&lt;/li&gt;
&lt;li&gt;controller 控制器：根据师徒提出的请求，判断将请求和数据交给哪个模型处理，处理后的有关结果交给哪个图书更新显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SpringMVC 模型就是一种基于 Servlet 的 MVC 模型。&lt;/p&gt;
&lt;p&gt;工作原理：&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/XIAOPLONG/blogImages/images202304012159813.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哭护短发起请求 http，通过 web.xml 找到前端控制器 DispatchServlet&lt;/li&gt;
&lt;li&gt;由前端控制器通过配置文件 servletName-servlet.xml 寻找一个或多个 HandlerMapping 映射处理器，找到用于处理请求的 controller 后端控制器&lt;/li&gt;
&lt;li&gt;DispatchServlet 将请求提交到 controller&lt;/li&gt;
&lt;li&gt;controller 处理业务逻辑后&lt;/li&gt;
&lt;li&gt;controller 返回数据 ModelAndVIew 给 DIspatchServlet&lt;/li&gt;
&lt;li&gt;DIspatchServlet 寻找一个或多个 ViewResolver 师徒解析器，找到 ModelAndView 指定的视图&lt;/li&gt;
&lt;li&gt;DispatchServlet 负责将结果返回 View 客户端 JSP 页面，封装 HTTP&lt;/li&gt;
&lt;li&gt;View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; session&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/mavenCreate/</guid>
            <title>eclipse创建maven项目test</title>
            <link>https://xiaoplong.github.io/mavenCreate/</link>
            <pubDate>Sat, 25 Mar 2023 22:22:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;eclipsemaven项目create&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eclipsemaven项目create&#34;&gt;#&lt;/a&gt; eclipse&amp;lt;Maven 项目 create&amp;gt;&lt;/h1&gt;
&lt;h2 id=&#34;集成外部maven&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成外部maven&#34;&gt;#&lt;/a&gt; 集成外部 maven&lt;/h2&gt;
&lt;p&gt;windows&amp;gt;Maven&amp;gt;Installations&lt;/p&gt;
&lt;p&gt;add 本地 maven 根路径，apply 添加。&lt;/p&gt;
&lt;p&gt;本地自带的 maven 不好用。&lt;/p&gt;
&lt;h2 id=&#34;选择maven配置文件路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择maven配置文件路径&#34;&gt;#&lt;/a&gt; 选择 maven 配置文件路径&lt;/h2&gt;
&lt;p&gt;windows&amp;gt;Maven&amp;gt;User Setting&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/npm%E5%92%8Cnode.js/</guid>
            <title>node.js、npm</title>
            <link>https://xiaoplong.github.io/npm%E5%92%8Cnode.js/</link>
            <pubDate>Fri, 17 Mar 2023 22:31:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs&#34;&gt;#&lt;/a&gt; node.js&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;node.js 是一个 &lt;code&gt;基于chrome V8引擎的JavaScript运行环境(C++程序)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;它不是库，是一个运行环境，或者说是一个 JS 言语解释器， &lt;code&gt;目的是提供一个JS的运行环境&lt;/code&gt; ，使得后端服务器也能用 js 编写。&lt;/p&gt;
&lt;p&gt;由 C++ 编写开发。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;最初定位于用来写服务器代码&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;web 开发，前端是用 js 写的，但是写后端服务器代码的时候，还必须用到另外的语言，但是 &lt;code&gt;node.js出现后，后端也可以用js写了&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;web前端的js代码，最终还是运行在浏览器中的，所以运行的时候，不依赖于Node.js&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是，node.js 诞生以后，类似于 react/vuejs 这样的前端框架的开发环境变得非常强大和负责，node.js 就是这些开发环境运行的基础。&lt;/p&gt;
&lt;h2 id=&#34;nodejs运行js方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs运行js方式&#34;&gt;#&lt;/a&gt; node.js 运行 js 方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;node.js 交互环境下运行&lt;/li&gt;
&lt;li&gt;把代码写入文件中，如何用 node 命令执行文件代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;npm和nvm区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm和nvm区别&#34;&gt;#&lt;/a&gt; npm 和 nvm 区别&lt;/h1&gt;
&lt;p&gt;nvm 是 node.js 的版本管理工具，node.js version manager。可以简单的对 node.js 的版本进行操作。&lt;/p&gt;
&lt;p&gt;npm 是依赖包的管理工具。&lt;/p&gt;
&lt;h1 id=&#34;npm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm&#34;&gt;#&lt;/a&gt; npm&lt;/h1&gt;
&lt;h2 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;npm 是随同 node.js 一起安装的 &lt;code&gt;包管理工具&lt;/code&gt; ，用于 &lt;code&gt;解决node.js代码部署上的问题&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;npm 是 &lt;code&gt;世界上最大的软件包仓库&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;新版的 node.js 已经集成了 npm，所以之前 npm 也一起下好了。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用&#34;&gt;#&lt;/a&gt; 使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 npm 服务器下载别人编写的第三方包到本地使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 npm 服务器下载并安装别人编写的命令行程序到本地使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将自己编写的包或命令行程序上传到 npm 服务器供别人使用 (例如，利用 npm 指令将自己的 blog 上传到 GitHub 上供别人参看)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;全局安装和本地安装的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局安装和本地安装的区别&#34;&gt;#&lt;/a&gt; 全局安装和本地安装的区别&lt;/h2&gt;
&lt;p&gt;全局安装比本地安装的指令，在最后多了一个  &lt;code&gt;-g&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;本地安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地安装&#34;&gt;#&lt;/a&gt; 本地安装&lt;/h3&gt;
&lt;p&gt;将安装包放在 &lt;code&gt;./node_modules&lt;/code&gt;  下 ( &lt;code&gt;运行npm命令时所在的目录&lt;/code&gt; ), 如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。&lt;/p&gt;
&lt;p&gt;可以通过 require () 来引入本地安装的包。&lt;/p&gt;
&lt;h3 id=&#34;全局安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局安装&#34;&gt;#&lt;/a&gt; 全局安装&lt;/h3&gt;
&lt;p&gt;将安装包放在 &lt;code&gt;/usr/local&lt;/code&gt;  下或者 node 的安装目录。&lt;/p&gt;
&lt;p&gt;可以直接在命令行中使用。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/mvn/</guid>
            <title>mvn是什么</title>
            <link>https://xiaoplong.github.io/mvn/</link>
            <pubDate>Fri, 17 Mar 2023 22:09:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nvm&#34;&gt;#&lt;/a&gt; NVM&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Node.js version manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即 node.js 版本管理&lt;/p&gt;
&lt;p&gt;它是一个 &lt;code&gt;命令行应用&lt;/code&gt; ，可以 &lt;code&gt;协助快速地更新、安装、使用、卸载本机的全局node.js版本&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;它可以在同一台电脑上进行多个 node 版本之间的切换，正是它的价值所在。&lt;/p&gt;
&lt;p&gt;我们进行多个项目开发时，所使用的 node 版本是不一样的，维护多个版本的 node 非常麻烦，如果能切换成一个 node 就好了，这正是 nvm 的价值，切换 node 版本。&lt;/p&gt;
&lt;h2 id=&#34;nvm常用管理版本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nvm常用管理版本命令&#34;&gt;#&lt;/a&gt; nvm 常用管理版本命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nvm install latest -- 安装最新 node.js 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm use 版本号  -- 使用指定的具体版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm ls -- 列出已经安装的所有版本 ls 即 list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm uninstall 版本号 -- 卸载指定版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm ls available --windows 版本，列出所有可安装的 node.js 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm current -- 显示当前版本 node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm alias -- 给不同版本添加别名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm unalias -- 删除已定义别名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm reinstall-packages -- 当前版本 node 环境下，重新全局安装版本号的 npm 包&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;相关事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关事项&#34;&gt;#&lt;/a&gt; 相关事项&lt;/h2&gt;
&lt;p&gt;windows10，nvm 安装完成后，会自动把对应的环境变量添加到系统上。&lt;/p&gt;
&lt;p&gt;安装完后，直接 cmd 运行 nvm 检查是否出错，即可。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/%E8%80%83%E5%85%AC/</guid>
            <title>行测</title>
            <link>https://xiaoplong.github.io/%E8%80%83%E5%85%AC/</link>
            <pubDate>Wed, 15 Feb 2023 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;资料分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资料分析&#34;&gt;#&lt;/a&gt; 资料分析&lt;/h1&gt;
&lt;h2 id=&#34;一增长率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一增长率&#34;&gt;#&lt;/a&gt; (一) 增长率&lt;/h2&gt;
&lt;h3 id=&#34;相关概率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关概率&#34;&gt;#&lt;/a&gt; 相关概率&lt;/h3&gt;
&lt;p&gt;增长率 (增幅)：有正负，比较大小时要带符号&lt;/p&gt;
&lt;h3 id=&#34;增长率问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长率问题&#34;&gt;#&lt;/a&gt; 增长率问题&lt;/h3&gt;
&lt;h4 id=&#34;公式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;r = 增长量 / 基期 (核心公式) = 增长率 /(现期 - 增长量) (常考 1) = (现期 - 基期)/ 基期&lt;/p&gt;
&lt;p&gt;总的来说， &lt;code&gt;基期 = 现期 - 增长量&lt;/code&gt; 是为核心关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;增长率 = 现期/基期 - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;增长率 = 增长量/基期&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;增长率计算型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长率计算型&#34;&gt;#&lt;/a&gt; 增长率计算型&lt;/h4&gt;
&lt;h5 id=&#34;截位直除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#截位直除法&#34;&gt;#&lt;/a&gt; 截位直除法&lt;/h5&gt;
&lt;p&gt;截几位：&lt;br /&gt;
除前先看看选项之间的差距，如果选项之间差距大则截取两位，选项差距小则截取三位，且需要注意截取原则（四舍五入）。&lt;/p&gt;
&lt;p&gt;差距大判定：1. 首位不同；2. 首位相同，侧位大于首位。&lt;/p&gt;
&lt;p&gt;截位原则：看下一位（保留两位看第三位），四舍五入。&lt;/p&gt;
&lt;p&gt;截取谁：&lt;br /&gt;
一步除法：只截分母。&lt;/p&gt;
&lt;p&gt;多步除法：分子分母都截。&lt;/p&gt;
&lt;p&gt;注意：若选项之间存在 10 的倍数关系时，要注意判断数量级。&lt;/p&gt;
&lt;p&gt;总的来说就是，现期 / 基期 = 增长量 / 基期相除时，可以将分子分母截取部分进行除法，例如 637/3059 和 520/662 进行比较时，前者可以截取为 6/30，后者可以截取为 5/6，所以前者的增长率大于后者 (因为增长率都为现期 / 基期 - 1，所以只要比较现期 / 基期即可)&lt;/p&gt;
&lt;h3 id=&#34;百分数和百分点问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百分数和百分点问题&#34;&gt;#&lt;/a&gt; 百分数和百分点问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;百分数表示两个量的比例关系，计算时用 &lt;code&gt;除法&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;百分点表示百分数的变化，计算时用 &lt;code&gt;加减法&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;增长率和倍数问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长率和倍数问题&#34;&gt;#&lt;/a&gt; 增长率和倍数问题&lt;/h3&gt;
&lt;p&gt;(1) 增长率：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;识别：增长 + 比例 (相对量，如百分数、倍数、成数)，就叫做 &lt;code&gt;增速、增幅、增值率&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;核心关系：现期 = 基期 + 增长量&lt;/li&gt;
&lt;li&gt;核心公式：增长率 = (现期 - 基期)/ 基期&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2) 倍数：&lt;br /&gt;
是几倍和多几倍的区别：&lt;br /&gt;
1. A 是 B 的几倍，直接 A/B&lt;br /&gt;
2. A 比 B 多几倍，计算时还要减去 B 的那一倍，即：A/B - 1&lt;/p&gt;
&lt;p&gt;(3) 增长率和倍数的关系：&lt;br /&gt;
 &lt;code&gt;倍数 = 增长率 + 1,即倍数 = 现期/基期&lt;/code&gt; &lt;br /&gt;
证明：现期为 A，基期为 B，则 A 比 B 多几倍，即为 A/B - 1 = (A-B)/B = (现期 - 基期)/ 基期 = 增长率，所以说明多几倍的倍数 = 增长率 + 1。&lt;/p&gt;
&lt;h3 id=&#34;成数和翻番&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成数和翻番&#34;&gt;#&lt;/a&gt; 成数和翻番&lt;/h3&gt;
&lt;h4 id=&#34;成数概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成数概念&#34;&gt;#&lt;/a&gt; 成数概念&lt;/h4&gt;
&lt;p&gt;几成：十分之几，也就是百分之几十。&lt;/p&gt;
&lt;h4 id=&#34;番数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#番数&#34;&gt;#&lt;/a&gt; 番数&lt;/h4&gt;
&lt;p&gt;翻了几番就是几个 2 相乘，比如翻了三番就是 3 个 2 相乘，变为原来的 8 倍。&lt;/p&gt;
&lt;h3 id=&#34;增幅-降幅和变化幅度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增幅-降幅和变化幅度&#34;&gt;#&lt;/a&gt; 增幅、降幅和变化幅度&lt;/h3&gt;
&lt;h4 id=&#34;相关概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关概念&#34;&gt;#&lt;/a&gt; 相关概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;增幅即为增长率， &lt;code&gt;有正负&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;降幅是为下降的幅度， &lt;code&gt;只有负的&lt;/code&gt; ，比较大小时，只比较绝对值。注意：正增长率不参与计算，而且 &lt;code&gt;要记住带负号。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变化幅度指的是增长或下降的绝对比率， &lt;code&gt;变化幅度有正负&lt;/code&gt; ，比较大小时，用增长率的绝对值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;增长率比较型问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长率比较型问题&#34;&gt;#&lt;/a&gt; 增长率比较型问题&lt;/h3&gt;
&lt;h4 id=&#34;相关题型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关题型&#34;&gt;#&lt;/a&gt; 相关题型：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;已知现期、基期，比较增长率 r=(现期 - 基期)/ 基期 = 现期 / 基期 - 1; &lt;code&gt;直接比较现期/基期即可&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;当现期和基期看不出时，根据倍数关系是否明显来比较增速（即增长率）。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，当现期 / 基期 = n (一个倍数)+（一段小数）时， &lt;code&gt;倍数明显，即n可以明显看出是逐渐增加或减小的差距时&lt;/code&gt; ， &lt;code&gt;截掉后段，直接看n倍数比较即可，看现期/基期&lt;/code&gt; ；当 &lt;code&gt;n倍数不明显，即n部分为相同倍数，后端小数部分不能忽略时&lt;/code&gt; ，要看 &lt;code&gt;后段小数部分，即用(现期-基期)/基期比较&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二增长量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二增长量&#34;&gt;#&lt;/a&gt; (二) 增长量&lt;/h2&gt;
&lt;h3 id=&#34;一般增长量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一般增长量&#34;&gt;#&lt;/a&gt; 一般增长量&lt;/h3&gt;
&lt;p&gt;增长 + 单位（绝对量）&lt;/p&gt;
&lt;h4 id=&#34;公式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-2&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;简单： &lt;code&gt;增长量 = 现期 - 基期&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重点： &lt;code&gt;增长量 = 现期/(1+增长率)*增长率&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;年均增长量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#年均增长量&#34;&gt;#&lt;/a&gt; 年均增长量&lt;/h3&gt;
&lt;p&gt;年均 + 增长 + 单位（绝对量）&lt;/p&gt;
&lt;h4 id=&#34;公式-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-3&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;年均增长量 = (现期-基期)/N(年份差)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h4&gt;
&lt;p&gt;年均增长量相关题型， &lt;code&gt;注意：2011~2015这5年间，基期是2010.现期是2015，年份差是5，基期要往前推一年，2011推到2010年。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;百分数化分数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百分数化分数&#34;&gt;#&lt;/a&gt; 百分数化分数&lt;/h3&gt;
&lt;h4 id=&#34;三步速记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三步速记&#34;&gt;#&lt;/a&gt; 三步速记&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;7~12：加和 (证书部分 + 分母) 为 20，例如 12.5% = 1/8,11.1%=1/9,9.1%=1/11,8.3%=1/12,7.7%=1/13&lt;/li&gt;
&lt;li&gt;(16,6) 和 (14,7) 互换的两对，例如 16.7%=1/6,6.25%=1/16,16 和 6 互换；14.3%=1/7,7.1%=1/14;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：7.7% 和 7.1% 都是以 7 开头，如果 &lt;code&gt;快到8%了，就加和20&lt;/code&gt; ，如果是 &lt;code&gt;7开头一点，则和14进行互换&lt;/code&gt; 。(大加，小换)&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;(17,18,19)： &lt;code&gt;5.9%=1/17,5.6%=1/18,5.3%=1/10;&lt;/code&gt; (逐层一增 1 一减 0.3%)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：6.25%=1/16,6.7%=1/15;&lt;/p&gt;
&lt;p&gt;总结：总的来说，百化分就是将增长率 r 化为 1/N 形式。&lt;/p&gt;
&lt;h3 id=&#34;方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;放缩法&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，1.43%：14.3%=1/7, 所以 1.43%=1/70;&lt;/p&gt;
&lt;p&gt;67%:6.7%=1/15,67%=1/1.5&lt;/p&gt;
&lt;p&gt;1.9%:1.9% 约等于 2%=1/50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;取中法&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;18.5% 介于 16.7%=1/6 和 20%=1/5，取中则 18.5% 约等于 1/5.5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;公式法&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：44%，44/100 化为 1/N，则 N 约等于 2.2，所以 44% 可以看作 1/2.2;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;增长量的比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长量的比较&#34;&gt;#&lt;/a&gt; 增长量的比较&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;已知现期和 &lt;code&gt;基期&lt;/code&gt; ，比较增长量，增长量 = 现期 - 基期，柱形图看高低&lt;/li&gt;
&lt;li&gt;已知现期和 &lt;code&gt;增长率&lt;/code&gt; ，比较增长量，口诀： &lt;code&gt;大大则大，一大一小百化分&lt;/code&gt;  (“大大则大”：它比较的是 A 和 B 的现期和增长率大小关系，比如 A 的现期比 B 大，降幅也比 B 大，那大大则大，A 下降量肯定是比 B 大的；：“一大一小百化分”：用到增长量的第二个重点公式，将百化分后代入计算增长量)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，A 有 200 零钱，同比下降 20%，B 有 100 零钱，同比小将 25%。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一大一小，用增长量 = 现期 /(增长率 + 1)* 增长率，A：20%=1/5，增长量 = 200/(1/5+1)*1/5=200/6=30+_;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;有上升、下降比较变化的时候，也有百化分来做；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，100 增加 10%，100 下降 10%，问谁的变化量大时，百化分，10%=1/10, 增长量 = 100/11, 减少量 = 100/9;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;百化分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百化分&#34;&gt;#&lt;/a&gt; 百化分&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;增长率百化分，增长率 r 化为 1/n 形式&lt;/li&gt;
&lt;li&gt;增长量 = 现期 /(1 + 增长率)* 增长率&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总之，增长量 = 现期 /(n+1), 减少量 = 现期 /(n-1)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三比重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三比重&#34;&gt;#&lt;/a&gt; (三) 比重&lt;/h2&gt;
&lt;h3 id=&#34;预期比重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预期比重&#34;&gt;#&lt;/a&gt; 预期比重&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;比重=部分/总体&lt;/code&gt; &lt;br /&gt;
 (1) 求比重&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A 占 B 的比重  A/B&lt;/li&gt;
&lt;li&gt;A 中 B 的占比  B/A&lt;br /&gt;
 (2) 求部分 (乘法)：部分 = 整体 * 比重&lt;br /&gt;
 (3) 求总体 (除法)：总体 = 部分 / 比重&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;利润题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利润题&#34;&gt;#&lt;/a&gt; 利润题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;资料分析&lt;br /&gt;
 &lt;code&gt;利润率=利润/收入&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数量关系&lt;br /&gt;
 &lt;code&gt;利润率=利润/成本&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;增长贡献率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增长贡献率&#34;&gt;#&lt;/a&gt; 增长贡献率&lt;/h3&gt;
&lt;p&gt;比重的一种，是部分增长量占总体增长量的比重。&lt;br /&gt;
 &lt;code&gt;公式：增长贡献率=部分增长量/总体增长量&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;比重饼状图类型题目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比重饼状图类型题目&#34;&gt;#&lt;/a&gt; 比重饼状图类型题目&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;题干中所问的数据，默认从十二点钟方向开始，顺时针一次排布。&lt;/li&gt;
&lt;li&gt;做此类题目时，先看扇形大小进行排除&lt;/li&gt;
&lt;li&gt;当大小排除后，再看比例&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基期比重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基期比重&#34;&gt;#&lt;/a&gt; 基期比重&lt;/h3&gt;
&lt;p&gt;过去 + 占&lt;/p&gt;
&lt;p&gt;其中，过去表示基期，如已知 2017 年的部分和总体的基期和增长率，求 2016 年占总收入的比重，此类情况就用基期比重公式。&lt;/p&gt;
&lt;h4 id=&#34;公式-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-4&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;p&gt;基期比重 = A/B*(1+b)/(1+a)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A: 部分的现期量&lt;/p&gt;
&lt;p&gt;B: 总体的现期量&lt;/p&gt;
&lt;p&gt;b: 总体的增长率&lt;/p&gt;
&lt;p&gt;a: 部分的增长率&lt;/p&gt;
&lt;p&gt;部分和总体的现期量和增长率有交叉关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;公式计算技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式计算技巧&#34;&gt;#&lt;/a&gt; 公式计算技巧&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先截位直除 A/B，选项差距大，截两位计算，选项差距小，截三位计算。&lt;/li&gt;
&lt;li&gt;看 (1+a)/(1+b) 与 1 的关系大小。结合选项选答案。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还要注意，看题目中是否给出了现期比重的值，然后除法当作一步除法，只截分母。&lt;/p&gt;
&lt;h3 id=&#34;两期比重比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两期比重比较&#34;&gt;#&lt;/a&gt; 两期比重比较&lt;/h3&gt;
&lt;p&gt;关键字：... 占... 比重，比上年上升 / 下降，比如 17 年比 16 年的比重是上升了还说下降了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;今年和去年相比&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;方法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法-2&#34;&gt;#&lt;/a&gt; 方法&lt;/h4&gt;
&lt;p&gt;两期比重比较，看 a (部分增速) 和 b (总体增速) 大小&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &amp;gt; b，今年比重上升&lt;/li&gt;
&lt;li&gt;a &amp;lt; b，今年比重下降&lt;/li&gt;
&lt;li&gt;a = b，今年比重不变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;注意：增速(增长率)是有正负的，下降为负，比较a部分增速和b总体增速的大小时，要带上符号。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;两期比重计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两期比重计算&#34;&gt;#&lt;/a&gt; 两期比重计算&lt;/h3&gt;
&lt;p&gt;注意：两期比重计算，考的就是两个百分数的差，即为百分点。由此，当选项中出现单纯的百分数，后没带 “百分点” 时，不能选。&lt;/p&gt;
&lt;p&gt;关键字：... 占... 比重，比上年上升 / 下降 + 百分点。 &lt;code&gt;百分点：两个百分数相加减得到。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;今年比去年，多了多少百分点&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;公式-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-5&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;p&gt;比重差 = 现期比重 - 基期比重 = A/B-A/B*(1+b)/(1+a)= &lt;code&gt;A/B*(a-b)/(1+a)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;速算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#速算&#34;&gt;#&lt;/a&gt; 速算&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;判方向： &lt;code&gt;a &amp;gt; b,上升；a &amp;lt; b,下降&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定大小： &lt;code&gt;小于|a-b|&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;比重总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比重总结&#34;&gt;#&lt;/a&gt; 比重总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;现期比重 占：部分 / 整体&lt;/li&gt;
&lt;li&gt;基期比重 公式 A/B*(1+b)/(1+a)&lt;/li&gt;
&lt;li&gt;两期比重 两期比重的比较看部分增速和总体增速的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四平均数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四平均数&#34;&gt;#&lt;/a&gt; (四) 平均数&lt;/h2&gt;
&lt;h3 id=&#34;考情分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#考情分析&#34;&gt;#&lt;/a&gt; 考情分析&lt;/h3&gt;
&lt;p&gt;平均、每、单位...。&lt;/p&gt;
&lt;h3 id=&#34;题型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题型&#34;&gt;#&lt;/a&gt; 题型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;现期平均&lt;/li&gt;
&lt;li&gt;基期平均&lt;/li&gt;
&lt;li&gt;两期平均&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;现期平均&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现期平均&#34;&gt;#&lt;/a&gt; 现期平均&lt;/h3&gt;
&lt;p&gt;现在 + 平均、单位、每&lt;/p&gt;
&lt;h3 id=&#34;基期平均数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基期平均数&#34;&gt;#&lt;/a&gt; 基期平均数&lt;/h3&gt;
&lt;p&gt;过去 + 平均、每、单位&lt;/p&gt;
&lt;h4 id=&#34;公式-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-6&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;p&gt;基期平均 = A/B*(1+b)/(1+a)&lt;/p&gt;
&lt;p&gt;其中，A 为总数现期量，B 为个数现期量，a 为总数的增长率，b 为个数的增长率。&lt;/p&gt;
&lt;h4 id=&#34;速算-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#速算-2&#34;&gt;#&lt;/a&gt; 速算&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先截位直除 A/B&lt;/li&gt;
&lt;li&gt;再看 (1+b)/(1+a) 与 1 的关系&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;例题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题&#34;&gt;#&lt;/a&gt; 例题&lt;/h4&gt;
&lt;p&gt;已知 2014 年的金融业单位数量，若说 2013 年该区的金融单位数量与 2014 年一样，则说明单位数量的增长率为零。&lt;/p&gt;
&lt;h3 id=&#34;两期平均数比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两期平均数比较&#34;&gt;#&lt;/a&gt; 两期平均数比较&lt;/h3&gt;
&lt;p&gt;平均数，比上年上升 / 下降。&lt;/p&gt;
&lt;h4 id=&#34;方法-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法-3&#34;&gt;#&lt;/a&gt; 方法&lt;/h4&gt;
&lt;p&gt;两期比重比较，看 a 分子增速和 b 分母增速的大小。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &amp;gt; b, 今年平均上升&lt;/li&gt;
&lt;li&gt;a &amp;lt; b, 今年平均下降&lt;/li&gt;
&lt;li&gt;a = b, 今年平均不变&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;两期平均数计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两期平均数计算&#34;&gt;#&lt;/a&gt; 两期平均数计算&lt;/h3&gt;
&lt;p&gt;平均数，比上年上升 / 下降 + 百分数&lt;/p&gt;
&lt;h4 id=&#34;公式-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-7&#34;&gt;#&lt;/a&gt; 公式&lt;/h4&gt;
&lt;p&gt;平均数的增长率 = (a-b)/ &lt;code&gt;(1+b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;a,b 分别代表分子、分母的增长率。&lt;/p&gt;
&lt;p&gt;注意：平均数的增长率分母是 1+b，不是 1+a；而比重的两期比重差分母才是 1+a;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;平均数增长率 = (a-b)/(1+b)&lt;/p&gt;
&lt;p&gt;两期比重差 = A/B*(a-b)/(1+a)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比重、平均数、倍数的基期公式都是 A/B*(1+b)/(1+a)，现期都是 A/B；&lt;/p&gt;
&lt;h2 id=&#34;五倍数与比值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五倍数与比值&#34;&gt;#&lt;/a&gt; (五) 倍数与比值&lt;/h2&gt;
&lt;p&gt;倍数用来表示两者的相对关系；比值用来表示两者之间的比例关系。&lt;br /&gt;
比值即除法。&lt;/p&gt;
&lt;h3 id=&#34;识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#识别&#34;&gt;#&lt;/a&gt; 识别&lt;/h3&gt;
&lt;p&gt;时间 + 倍数&lt;/p&gt;
&lt;h3 id=&#34;公式-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公式-8&#34;&gt;#&lt;/a&gt; 公式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;现期倍数 = A/B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;基期倍数 = A/B*[ (1+b)/(1+a) ]&lt;/code&gt; ; 先截位直除 A/B, 再看后面的值与 1 的关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;倍数的三种文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#倍数的三种文法&#34;&gt;#&lt;/a&gt; 倍数的三种文法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A 是 B 的几倍：A/B (倍数即为增长率 + 1，增长率为 A/B-1)&lt;/li&gt;
&lt;li&gt;A 比 B 增长 (多) 几倍：(A-B)/B = A/B - 1;&lt;/li&gt;
&lt;li&gt;A 超过 B 的 N 倍   A&amp;gt;B*N&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;数量关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数量关系&#34;&gt;#&lt;/a&gt; 数量关系&lt;/h1&gt;
&lt;h2 id=&#34;解题思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题思想&#34;&gt;#&lt;/a&gt; 解题思想&lt;/h2&gt;
&lt;h3 id=&#34;代入排除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代入排除&#34;&gt;#&lt;/a&gt; 代入排除&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;看题型：多位数、年龄、余数、不定方程&lt;/li&gt;
&lt;li&gt;看选项&lt;/li&gt;
&lt;li&gt;选择信息充分&lt;/li&gt;
&lt;li&gt;剩余两项：只代入其中一个&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用方法&#34;&gt;#&lt;/a&gt; 使用方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先排除：奇偶、倍数、尾数&lt;/li&gt;
&lt;li&gt;再代入&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 从简原则：方便计算的数，整十整百的数&lt;/p&gt;
&lt;p&gt;(2) 最值原则：问最大，从最大的代；问最小就最小的代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;倍数特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#倍数特性&#34;&gt;#&lt;/a&gt; 倍数特性&lt;/h3&gt;
&lt;p&gt;(1) 整除型&lt;br /&gt;
若总数 A=B*C&lt;/p&gt;
&lt;p&gt;使用范围：平均分配物品、平均数。&lt;br /&gt;
 &lt;code&gt;三量关系(A=B*C):行程问题、工程问题、经济利润问题。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如，一个正方体表面分辨写着连续的 6 个证书，且每个相对面上的两个数的和都相等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;六面体共有三个对立面，设和为 n，那么六个整数的和一定是 3n，3 的倍数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2) 余数型&lt;br /&gt;
若总数 A=ax+b&lt;/p&gt;
&lt;p&gt;(总数 - b) 一定能被 a 整除。(a、x 均为整数)&lt;/p&gt;
&lt;p&gt;(3) 比例型 (n、m 互质)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若 a/b=m/n, 则 a 是 m 的倍数，b 是 n 的倍数&lt;/li&gt;
&lt;li&gt;若 a=bm/n, 则 a 是 m 的倍数，b 是 n 的倍数&lt;/li&gt;
&lt;li&gt;若 a=bm/n, 则 a=m (a+b)/(m+n)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比例型适用于：分数、百分数、比例、倍数&lt;br /&gt;
对象特性：描述对象为不可分割的整体。如人，车，年龄等。&lt;/p&gt;
&lt;p&gt;形如 A=M (A+B)/(M+N)，解题方法：A/B=M/N, 则 A 是 M 的倍数，B 是 N 的倍数。&lt;/p&gt;
&lt;p&gt;形如 A=MB/N，解题方法：A 是 M 的倍数，B 是 N 的倍数。&lt;/p&gt;
&lt;h3 id=&#34;余数特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#余数特性&#34;&gt;#&lt;/a&gt; 余数特性&lt;/h3&gt;
&lt;p&gt;同余问题： &lt;code&gt;最小公倍数作周期，余同加余，和同加同，差同减差&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;余同加余&lt;/code&gt; ：一个数除以 4 余 1，除以 5 余 1，除以 6 余 1，那么这么数是 60n+1;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：例如， &lt;code&gt;一群学生，排成5排少2人，排成7排少4人&lt;/code&gt; 。这种类型的题目要记得转化成： &lt;code&gt;排成4排余3人，排成6排余3人,&lt;/code&gt;  所以余数都为 3，同余加余，但是这个 &lt;code&gt;最小公倍数，不是4和5，而仍是5和7&lt;/code&gt; ，所以这群学生人数为 35n+3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;和同加和&lt;/code&gt; ：一个数除以 4 余 3，除以 5 余 2，除以 6 余 1，除数和余数相加相同，都为 7，那么这个数是 60n+7;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;差同减差&lt;/code&gt; ：一个数除以 4 余 3，除以 5 余 4，除以 6 余 5，除数和余数之差都为 1，那么这个数为 60n-1;&lt;/p&gt;
&lt;p&gt;题型：在题干上出现 “某物按 x 个分组还余 y 个” 的条件，这中 &lt;code&gt;分组、分类有余&lt;/code&gt; 就是典型的余数特性题目。&lt;/p&gt;
&lt;h3 id=&#34;奇偶特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#奇偶特性&#34;&gt;#&lt;/a&gt; 奇偶特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;乘法中&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;若因子中存在偶数，则结果为偶数；无偶数则结果为奇数。&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;奇数偶数相乘，有偶则偶。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;若几个整数的和(或差)为奇(或偶)数，则这几个整数的差(或和)为奇(或偶)数。&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;加减法中&lt;br /&gt;
两个因子奇偶性相同，则结果为偶数；不同则结果为奇数。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;奇数 +- 奇数 = 偶数&lt;/li&gt;
&lt;li&gt;偶数 +- 偶数 = 偶数&lt;/li&gt;
&lt;li&gt;奇数 +- 奇数 = 奇数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;赋值思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#赋值思想&#34;&gt;#&lt;/a&gt; 赋值思想&lt;/h3&gt;
&lt;p&gt;当题目给定信息中未涉及到某个具体数量的大小，通常出现 &lt;code&gt;倍数、分数、百分数、比例，并且该数量的大小不影响最终所求结果，可赋值&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;观察题目所给的数值 (分数、百分数、比例)， &lt;code&gt;赋值数多为这些数的公倍数&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;适用题型：工程问题、混合配比问题、加权平均问题、流水行船问题、往返行程问题、几何问题、经济利润问题、和差倍比问题。&lt;/p&gt;
&lt;p&gt;技巧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分数、百分比、比例，赋值数多为这些数的公倍数&lt;/li&gt;
&lt;li&gt;工程量、工作量等可将每天推进量赋值为 1&lt;/li&gt;
&lt;li&gt;准确列出方程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例题：师徒二人 3 天加工零件总数分别为 240、150，并且两人每天加工的零件个数为整数且彼此不相等。其中师傅加工零件数最少的那天比徒弟加工零件数最多的那天多 10 个。师傅加工最多的一天至多比徒弟加工最少的一天多多少？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赋值思想。师徒两人分别平均每天加工零件数 80、50. 为了确保师傅最少那天比徒弟最多那天多 10，所以取中间值 70、60，此时 80 和 70、70 和 60、60 和 50 都满足，但是前一组和后一组分别不满足师傅最大 80 和徒弟最小 50 的条件，所以取中间这组赋值，师傅第一天加工 70，徒弟加工 60。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;总结：以后做此类题目，直接先求每天平均，再根据题目，取中间值即可。如此题，直接取70和60即可。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如，第一天，师傅加工 70、徒弟加工 60，第二天推进量取 1，则师傅加工量 71，徒弟 59. 此时师傅最多的一天为 240-70-71=99, 徒弟最少的一天 150-60-59=31，则多 99-31=68.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;例题 2：某银行账户今年底余额减去 1500 后，正好比去年底余额减少了 25%，去年底余额比前年底余额的 120% 少 2000。则此人银行账户今年底余额一定比前年底余额___？&lt;/p&gt;
&lt;p&gt;设前、去、今年底的余额分别为 x、y、z。那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;z-1500=75%y&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;y=120%x-2000&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赋值：看式子，将前年底余额赋为 10000，则 y=12000-2000=10000，z=7500+1500=9000，所以今年底账户余额比前年底账户余额少 1000.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意：不要选1000那个选项，此时的1000是特殊情况，赋值得来。1000即为前年底余额的10%，不同于数值，百分数是占比问题，不存在特殊性，所以选今年比前年底余额少10%。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;极限思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#极限思想&#34;&gt;#&lt;/a&gt; 极限思想&lt;/h3&gt;
&lt;p&gt;出现 “至多、至少、最多、最少、最大、最小” 等时，要有极限思想。&lt;/p&gt;
&lt;p&gt;例如：题目中有 “至少.... 才能保证...”，那么保证 &lt;code&gt;后面的情况是必然发生的情况&lt;/code&gt; 。即： &lt;code&gt;最不利情况数+1.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如，有 5 个老年班，社区老人每个人至少报了 1 个班，问至少要调查多少个样本才能保证样本中有 4 名报的班完全相同？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;构造最不利的情况：&lt;/code&gt; 五个班至少报名一项，则每个人报名不同的情况数为：报名 1 种～报名 5 种的排列组合相加 = 31。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;考虑最不利的原则&lt;/code&gt; ：有 4 人报班，最不利值为 3，表示四人中有三人选的班都不一样，则至少要调查 &lt;code&gt;3*31+1=94&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;例二：18cm 长的线围成各种长方形，要求宽和长都为 cm，最大面积为？&lt;/p&gt;
&lt;p&gt;要使得面积最大，则要求长和宽最接近，所以长宽分别为 5 和 4，S 最大为 20.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;逆向推理思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆向推理思想&#34;&gt;#&lt;/a&gt; 逆向推理思想&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;逆向推导&lt;/li&gt;
&lt;li&gt;正反互补：当所求情况过多、计算复杂时，可以考虑用整体减去与之相反的情况来求解&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例题：从两个辖区分别抽调 2 名人员，随机安排到 3 个单位，则来自同一辖区的人员不在同一组的概率是？&lt;/p&gt;
&lt;p&gt;4 人分到 3 个单位，一定是 2、1、1 形式，总的安排情况即：先抽取两个 C42=6，然后将这两人随机安排到三个单位其中一个 A33=6，所以总的安排情况 = 6*6=36.&lt;/p&gt;
&lt;p&gt;算不在同一组的情况太复杂，所以可以直接算在同一组的概率。即：在一个辖区的两个人中选&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;整除思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整除思想&#34;&gt;#&lt;/a&gt; 整除思想&lt;/h3&gt;
&lt;p&gt;待....&lt;/p&gt;
&lt;h1 id=&#34;言语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#言语&#34;&gt;#&lt;/a&gt; 言语&lt;/h1&gt;
&lt;h2 id=&#34;关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系思维&#34;&gt;#&lt;/a&gt; 关系思维&lt;/h2&gt;
&lt;h3 id=&#34;行文脉络思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行文脉络思维&#34;&gt;#&lt;/a&gt; 行文脉络思维&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;引出话题 - 分析问题 - &lt;code&gt;提出观点对策&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引出话题 - &lt;code&gt;直接表明观点&lt;/code&gt;  - 展开论述 - 结尾再次强调&lt;br /&gt;
可以知，文段行文脉络，大部分题可以在首尾句找到作者观点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧&#34;&gt;#&lt;/a&gt; 技巧&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;阅读句尾&lt;/code&gt; ，是否存在 &amp;quot;因此、可见、事实上、应该、需要、不能&amp;quot; 来判断是不是观点 (对策)。 &lt;code&gt;圈出主题词&lt;/code&gt; ，首句验证，直接选包含主题词的选项，如果选项有两个符合，则 &lt;code&gt;优选对策&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;阅读首句&lt;/code&gt; ，表明观点，圈出主题词对照选项 &lt;code&gt;同义替换&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;转折关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转折关系思维&#34;&gt;#&lt;/a&gt; 转折关系思维&lt;/h3&gt;
&lt;h4 id=&#34;常用转折&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用转折&#34;&gt;#&lt;/a&gt; 常用转折&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;但是、但相反地、但另一方面、实际上、可是&lt;/li&gt;
&lt;li&gt;通过对比、经与.... 对比、相较之下&lt;/li&gt;
&lt;li&gt;然而、然而整体而言、其实不然&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-2&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;转折词后为文段重点&lt;/code&gt; ，转折前的表述通常为错误的选项。&lt;/p&gt;
&lt;p&gt;文段中如果出现 &amp;quot; &lt;code&gt;很多人/大多数人/传统观点/以前/有些人/不少人认为+转折关联词&lt;/code&gt;  &amp;quot; 的表述， &lt;code&gt;直接看转折后的内容&lt;/code&gt; ，并看 &lt;code&gt;哪个选项是转折之后内容的同义替换&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;因果关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因果关系思维&#34;&gt;#&lt;/a&gt; 因果关系思维&lt;/h3&gt;
&lt;h4 id=&#34;常用因果词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用因果词&#34;&gt;#&lt;/a&gt; 常用因果词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;因为、因而、因此&lt;/li&gt;
&lt;li&gt;造成、导致、由于&lt;/li&gt;
&lt;li&gt;之所以...，是因为...、... 以至于&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-3&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;典型格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为 A，所以 B&lt;/li&gt;
&lt;li&gt;之所以 B，是因为 A&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二者均强调结论是 B。&lt;/p&gt;
&lt;p&gt;因果关系正确答案形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结论 B 的同义替换&lt;/li&gt;
&lt;li&gt;强调结论 B 的原因&lt;/li&gt;
&lt;li&gt;原因 A 和结论 B 同时出现，如果选项仅仅描述的是原因部分的内容，则属于非重点，排除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，因果类问题，就 &lt;code&gt;主要看&amp;quot;所以&amp;quot;后面的结论即可&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;并列关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并列关系思维&#34;&gt;#&lt;/a&gt; 并列关系思维&lt;/h3&gt;
&lt;h4 id=&#34;常用并列词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用并列词&#34;&gt;#&lt;/a&gt; 常用并列词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;是... 不是..., 不是... 而是...&lt;/li&gt;
&lt;li&gt;既... 又..., 又... 又..., 既... 也...&lt;/li&gt;
&lt;li&gt;有时... 有时..., 一方面... 另一方面...&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-4&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;当 “;” 或者上述并列词出现时，前后句子为并列关系。若并列论述的是 &lt;code&gt;不同话题&lt;/code&gt; ，需要 &lt;code&gt;全面概括&lt;/code&gt; ；若几个方面的 &lt;code&gt;并列论述话题一致&lt;/code&gt; ，需要 &lt;code&gt;提取共性&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;想要概括多个方面，需要用一些表述宽泛、笼统的词语&lt;/code&gt; ，如： &lt;code&gt;许多、一些、不同、各种&lt;/code&gt; 等，才可以概括全面，也是 &lt;code&gt;正确选项的特征&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;表述片面&lt;/code&gt; ，即只提及其中一个方面，这种选项以偏概全， &lt;code&gt;排除&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;注意：并列词说明前后是并列结构，都为分，统统不看，要找到总，再看首尾句。&lt;/p&gt;
&lt;h3 id=&#34;条件关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件关系思维&#34;&gt;#&lt;/a&gt; 条件关系思维&lt;/h3&gt;
&lt;h4 id=&#34;常用条件词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用条件词&#34;&gt;#&lt;/a&gt; 常用条件词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;只要... 就..., 只有... 才..., 任凭... 也...&lt;/li&gt;
&lt;li&gt;无论... 都..., 除非... 才..., 不管... 总....&lt;/li&gt;
&lt;li&gt;A 是 B 的必要条件、前提、基础、保障、途径，必须，无比，除非&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-5&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;条件是重点，即“才、都、必须、务必、除非”等后面的内容是重点.&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;递进关系思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#递进关系思维&#34;&gt;#&lt;/a&gt; 递进关系思维&lt;/h3&gt;
&lt;h4 id=&#34;常用递进词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用递进词&#34;&gt;#&lt;/a&gt; 常用递进词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;并、也、还、更&lt;/li&gt;
&lt;li&gt;不但... 而且..., 不仅，甚至，特别，尤其，不仅... 还能...&lt;/li&gt;
&lt;li&gt;重要的是、关键是、核心是&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-6&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;出现递进词， &lt;code&gt;递进关联词后为文段强调重点&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;出现 “不但... 而且... 甚至...” 这种 &lt;code&gt;多层递进&lt;/code&gt; 时， &lt;code&gt;最后一层递进为文段重点&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;反面论证思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反面论证思维&#34;&gt;#&lt;/a&gt; 反面论证思维&lt;/h3&gt;
&lt;h4 id=&#34;常见标志词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见标志词&#34;&gt;#&lt;/a&gt; 常见标志词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如果不... 那么&lt;/li&gt;
&lt;li&gt;一旦... 则...&lt;/li&gt;
&lt;li&gt;倘若... 可能...&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技巧-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-7&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;有观点类&lt;/code&gt; ： &lt;code&gt;观点&lt;/code&gt;  + 否则.../ 不然..., &lt;code&gt;反面论证不重要&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;无观点类&lt;/code&gt; ： &lt;code&gt;背景陈述&lt;/code&gt;  + 如果不... 那么.../ 客观问题 + 如果不..., 推导出 &lt;code&gt;解决问题的对策，对策是重点&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，无观点类，客观问题，需要反面推导出对策，选项同义替换；有观点类，强调观点。&lt;/p&gt;
&lt;h3 id=&#34;时空分析思维&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时空分析思维&#34;&gt;#&lt;/a&gt; 时空分析思维&lt;/h3&gt;
&lt;h4 id=&#34;技巧-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-8&#34;&gt;#&lt;/a&gt; 技巧&lt;/h4&gt;
&lt;p&gt;通过 &lt;code&gt;时间&lt;/code&gt; 和 &lt;code&gt;空间&lt;/code&gt; 对比，例如：过去... 现在...; 传统... 现代...; 美国... 中国...; 通过前后对比， &lt;code&gt;强调的不同点放到文段的后半部分，也就是文段的重点&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;时间上，如过去和现在的对比；地点上 (空间上)，如地区与地区，国与国 (中外) 之间的对比；凸显的重点在两者比较的后段文段， &lt;code&gt;凸显后者怎么这么样&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;逻辑填空题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑填空题&#34;&gt;#&lt;/a&gt; 逻辑填空题&lt;/h2&gt;
&lt;h3 id=&#34;固定搭配重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#固定搭配重点&#34;&gt;#&lt;/a&gt; 固定搭配 (重点)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;根据词性找搭配&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;若选项都为动词，回到文段找名词或副词&lt;/p&gt;
&lt;p&gt;若选项都为名词，回到文段找动词或形容词&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;注意新闻热点、时事评论中常用词搭配的积累&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;横线处搭配由 &amp;quot;和、及、与、同&amp;quot; 等标志词引导的并列结构，则所填词语要与并列结构中的多个词语均能搭配。所以在找该类搭配时，要 &lt;code&gt;留心是否出现&amp;quot;和、及、与、同&amp;quot;等并列词&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;程度轻重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程度轻重&#34;&gt;#&lt;/a&gt; 程度轻重&lt;/h3&gt;
&lt;p&gt;程度轻重是指 &lt;code&gt;意义相近的词语在表现程度和性质上有轻重的差别&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;正确选项的轻重程度需 &lt;code&gt;与文段表达语气的轻重程度相匹配&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如：有__, 没毛病。&lt;br /&gt;
A. 瑕疵&lt;/p&gt;
&lt;p&gt;B. 缺点&lt;/p&gt;
&lt;p&gt;C. 缺陷&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;瑕疵、缺点、缺陷程度由轻到重逐渐加深，根据没毛病可知。需要填入程度最轻的词语。所以选 A。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;解释类对应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解释类对应&#34;&gt;#&lt;/a&gt; 解释类对应&lt;/h3&gt;
&lt;h4 id=&#34;题干特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题干特点&#34;&gt;#&lt;/a&gt; 题干特点&lt;/h4&gt;
&lt;p&gt;分句，___分句 (后一分句进行解释说明)，即文段中有分句对横线处词语进行解释说明。&lt;/p&gt;
&lt;h4 id=&#34;常见标志词-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见标志词-2&#34;&gt;#&lt;/a&gt; 常见标志词&lt;/h4&gt;
&lt;p&gt;是、就是、即、无异于、无疑是、可以说、比如、例如、冒号 (😃、破折号等。&lt;/p&gt;
&lt;h4 id=&#34;使用方法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用方法-2&#34;&gt;#&lt;/a&gt; 使用方法&lt;/h4&gt;
&lt;p&gt;准确找到与横线处所填词语对应的句子，理解句义对应选项。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;通过整个文段的准确理解和把握，找出与横线处相对应的语句。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;重点语句对应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点语句对应&#34;&gt;#&lt;/a&gt; 重点语句对应&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;主题词&lt;/code&gt; ，即 &lt;code&gt;文段围绕论述的核心名词&lt;/code&gt; 。抓住文段主题词，即可快速定位正确答案。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;拟人、类比等形象表述&lt;/code&gt; 。要注意文段中出现的 &amp;quot; &lt;code&gt;像...那样...&amp;quot;,&amp;quot;正如&amp;quot;,&amp;quot;和...一样&amp;quot;,&amp;quot;...有异曲同工之妙&amp;quot;&lt;/code&gt;  等类比标志性表述。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;中心句或文段中的完整语句&lt;/code&gt; 。对于较长文段中较为完整的句子，要注意。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;判断推理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断推理&#34;&gt;#&lt;/a&gt; 判断推理&lt;/h1&gt;
&lt;h2 id=&#34;图形推理高频考点1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图形推理高频考点1&#34;&gt;#&lt;/a&gt; 图形推理 (高频考点 1)&lt;/h2&gt;
&lt;h3 id=&#34;对称类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对称类型&#34;&gt;#&lt;/a&gt; 对称类型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;轴对称&lt;/li&gt;
&lt;li&gt;中心对称&lt;/li&gt;
&lt;li&gt;既轴对称，又中心对称&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;对称轴的方向和数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对称轴的方向和数量&#34;&gt;#&lt;/a&gt; 对称轴的方向和数量&lt;/h3&gt;
&lt;p&gt;当 &lt;code&gt;题干图形和两个以上选项的图形都是轴对称图形时&lt;/code&gt; ，很有可能通过对称轴的方向和数量命题。&lt;/p&gt;
&lt;p&gt;所以， &lt;code&gt;解题时要注意对称轴的方向和数量&lt;/code&gt; ， &lt;code&gt;对称轴的方向可以分为两类：横轴对称、竖轴对称、斜轴对称&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;笔画数高频考点2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#笔画数高频考点2&#34;&gt;#&lt;/a&gt; 笔画数 (高频考点 2)&lt;/h2&gt;
&lt;h3 id=&#34;如何判断图形最少可以通过几笔画出来&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何判断图形最少可以通过几笔画出来&#34;&gt;#&lt;/a&gt; 如何判断图形最少可以通过几笔画出来？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;简单图形&lt;/code&gt; ：直接通过画图方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt; 复杂图形&lt;/code&gt; ： &lt;code&gt;连通图的笔画数=奇点数/2&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;特别注意：其中 &lt;code&gt;特例&lt;/code&gt; 为 &lt;code&gt;含0个或2个奇点的连通图可以一笔画完成&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;连通图&lt;/code&gt; ：任意两点都是连通的。做题时，可大致理解为图形中的线条连在了一起。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;奇点：若以一个点为起点，延伸出的线条数为奇数，则该点为奇点&lt;/code&gt; 。为偶数，则为偶点。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;注意：奇点包括端点;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;功能元素高频考点3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能元素高频考点3&#34;&gt;#&lt;/a&gt; 功能元素 (高频考点 3)&lt;/h2&gt;
&lt;h3 id=&#34;常见元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见元素&#34;&gt;#&lt;/a&gt; 常见元素&lt;/h3&gt;
&lt;p&gt;黑点、白点、箭头等。&lt;/p&gt;
&lt;h3 id=&#34;技巧-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧-9&#34;&gt;#&lt;/a&gt; 技巧&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当 &lt;code&gt;每个图形都有功能元素时&lt;/code&gt; ，可以 &lt;code&gt;标记图形的长短边、左右位置&lt;/code&gt; ； &lt;code&gt;角(锐角还是钝角)&lt;/code&gt; ； &lt;code&gt;相交或非相交区域&lt;/code&gt; ；功能元素标记 &lt;code&gt;在线上还是交点上&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;每个图形都有两个功能元素时&lt;/code&gt; ，除了考察上面的， &lt;code&gt;还可能考&lt;/code&gt; 这 &lt;code&gt;两个功能元素之间的关系&lt;/code&gt; 或者 &lt;code&gt;两个功能元素的连线与题干图形的关系&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;空间重构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间重构&#34;&gt;#&lt;/a&gt; 空间重构&lt;/h2&gt;
&lt;h3 id=&#34;常见&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见&#34;&gt;#&lt;/a&gt; 常见&lt;/h3&gt;
&lt;p&gt;空间重构又叫折纸盒。&lt;/p&gt;
&lt;p&gt;一般又六面体、四面体、八面体。&lt;/p&gt;
&lt;p&gt;一般考，给定纸盒，能由哪个选项折叠出来。&lt;/p&gt;
&lt;h2 id=&#34;样式运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样式运算&#34;&gt;#&lt;/a&gt; 样式运算&lt;/h2&gt;
&lt;p&gt;图形通过运算之后，会改变样式的形状，主要包括简单叠加、运算叠加、黑白快叠加、特殊叠加、相邻运算以及拉伸与替换等内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单叠加：最简单的叠加方式&lt;/li&gt;
&lt;li&gt;运算叠加：分为两种， &lt;code&gt;去同存异、去异存同&lt;/code&gt; 。前者表示两幅图叠加，将 &lt;code&gt;相同的线条去掉，保留不同的线条&lt;/code&gt; ；后者表示叠加 &lt;code&gt;去掉不同线条，保留相同线条&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;黑白叠加&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;需注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;小黑块运动类，一般黑块数量较少，图形间黑块数量变化不大&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;小黑块叠加类，位置没规律、数量变化大、一般不用 16 宫格作为载体&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;一般分四种情况：黑 + 黑、黑 + 白、白 + 黑、白 + 白进行计算&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;偶尔黑 + 黑与白 + 白结果一致，黑 + 白与白 + 黑的结果一致，即相同得一色，相异得一色。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;特殊叠加：包括三种形式的叠加1.切割或翻倍后叠加2.按优先级不同叠加3.A+B=C得新结果式叠加&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结： &lt;code&gt;这种题，就是往去同存异、去异存同上想&lt;/code&gt; ，然后看第三张图与第一二张图经过去同存异或者去异存同所得到的图的变化；&lt;/p&gt;
&lt;p&gt;然后， &lt;code&gt;黑白叠加的话，就看到底是相同为同，还是相异为同&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;定义判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义判断&#34;&gt;#&lt;/a&gt; 定义判断&lt;/h2&gt;
&lt;h3 id=&#34;主客体高频考点1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主客体高频考点1&#34;&gt;#&lt;/a&gt; 主客体 (高频考点 1)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;主体&lt;/code&gt; 是指一个动作或时间的发起者或执行者；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;客体&lt;/code&gt; 是指一个动作或行为指向的对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;当主题或客体有明确的范围界定时，可有限进行选项对应，对于明显不符合的选项进行排除。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;条件句式高频考点2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件句式高频考点2&#34;&gt;#&lt;/a&gt; 条件句式 (高频考点 2)&lt;/h3&gt;
&lt;p&gt;当以下引导词出现时，很可能设置考点，需要圈画并与选项对应：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示方式的引导词：通过、利用等&lt;/li&gt;
&lt;li&gt;表示原因的引导词：因为、由于等&lt;/li&gt;
&lt;li&gt;表示时间条件的引导词：当... 时、在... 时等&lt;/li&gt;
&lt;li&gt;表示结果的引导词：所以、因而、从而、带来、引起、导致、使得等表结论的词汇&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;类比推理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类比推理&#34;&gt;#&lt;/a&gt; 类比推理&lt;/h2&gt;
&lt;p&gt;词语之间的逻辑关系非常多，而且会涉及到成语、诗句、典故以及一些生活常识等。&lt;/p&gt;
&lt;h3 id=&#34;语义关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语义关系&#34;&gt;#&lt;/a&gt; 语义关系&lt;/h3&gt;
&lt;p&gt;指词语含义之间的关系，要正确理解词语含义。&lt;/p&gt;
&lt;h4 id=&#34;常考语义关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常考语义关系&#34;&gt;#&lt;/a&gt; 常考语义关系&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;近义词&lt;/li&gt;
&lt;li&gt;反义词&lt;/li&gt;
&lt;li&gt;比喻义、象征义&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并列关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并列关系&#34;&gt;#&lt;/a&gt; 并列关系&lt;/h3&gt;
&lt;p&gt;指两个词语概念 &lt;code&gt;处于同一个级别上，但彼此不包含。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;并列关系分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并列关系分类&#34;&gt;#&lt;/a&gt; 并列关系分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;矛盾关系：指非A即B，没有第三种情况存在。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;反对关系：指除了A和B意外，还有其它情况存在。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;注意：并列关系一般要求同级并列&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;包容关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包容关系&#34;&gt;#&lt;/a&gt; 包容关系&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;指两个词语概念之间一个范围大、一个范围小，小概念完全被包含在大概念之中。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;种属关系&lt;/code&gt; ，即 &lt;code&gt;A是B的一种&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;组成关系&lt;/code&gt; ，即 &lt;code&gt;A是B的一个组成部分&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组成与种属的区别在于，A、B 为 &lt;code&gt;种属关系&lt;/code&gt; ， &lt;code&gt;造句子可以造成A是B&lt;/code&gt; 。比如柳树是数，但 &lt;code&gt;组成关系不可以&lt;/code&gt; ，比如不能说轮胎是汽车。&lt;/p&gt;
&lt;h3 id=&#34;对应关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应关系&#34;&gt;#&lt;/a&gt; 对应关系&lt;/h3&gt;
&lt;p&gt;指一定范围事件包含的各词语要素之间构成的互相对应，包括物品、职业、地点、原因、结果、方式、行为、工具、功能等多种对应。&lt;/p&gt;
&lt;h4 id=&#34;常考对应关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常考对应关系&#34;&gt;#&lt;/a&gt; 常考对应关系&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;配套使用&lt;/code&gt; ，如牙膏和牙刷&lt;/li&gt;
&lt;li&gt;&lt;code&gt;物品与原材料、制作工艺&lt;/code&gt; ，如家具与木材、手镯与打磨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;物品与功能&lt;/code&gt; ，如手机与沟通&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性关系&lt;/code&gt; ，如盐与威、叶与绿&lt;/li&gt;
&lt;li&gt;&lt;code&gt;因果关系&lt;/code&gt; ，如下雨与地湿&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;交叉关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交叉关系&#34;&gt;#&lt;/a&gt; 交叉关系&lt;/h3&gt;
&lt;p&gt;当两个集合的范围中有交叉的时候，就存在交叉关系。&lt;/p&gt;
&lt;h2 id=&#34;逻辑判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑判断&#34;&gt;#&lt;/a&gt; 逻辑判断&lt;/h2&gt;
&lt;p&gt;翻译推理、组合排列、真假推理都有公式可循，技巧性比较强。削弱和加强论证更是重点题型。&lt;/p&gt;
&lt;h3 id=&#34;加强论证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加强论证&#34;&gt;#&lt;/a&gt; 加强论证&lt;/h3&gt;
&lt;h4 id=&#34;题型特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题型特点&#34;&gt;#&lt;/a&gt; 题型特点&lt;/h4&gt;
&lt;p&gt;提问方式中带有 “加强、支持、假设、前提” 等关键词。&lt;/p&gt;
&lt;h4 id=&#34;解题思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题思路&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h4&gt;
&lt;p&gt;快速排除错误选项：表 &lt;code&gt;述直接的力度强，与话题接近的力度强。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读 (论点意思)：着凉容易感冒&lt;/li&gt;
&lt;li&gt;析 (核心话题)：病因分析&lt;/li&gt;
&lt;li&gt;比 (比主体、比范围、比话题、比强弱)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1) 加强方式 1：搭桥&lt;br /&gt;
出现以下特征，优先考虑搭桥的加强方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;论点和论据中出现两个没有明显相关性的概念&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：张三经常打抱不平，因此张三很帅&lt;/p&gt;
&lt;p&gt;打抱不平和帅没有明显相关性的概念，因此可以用 “打抱不平可以让人变帅气” 这样的方式来搭桥，建立论点和论据间的关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;论点和论据中分别出现了一个整体和一个部分的概念&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，中国经济发展势头良好，因此全球经济一片繁荣&lt;/p&gt;
&lt;p&gt;中国经济是全球经济的一部分，因此可以用 &amp;quot;中国经济是全球经济的晴雨表&amp;quot; 这样的方式来搭桥，强化论点和论据之间的关系。&lt;br /&gt;
3. &lt;code&gt; 当提问方式是前提、假设、必要条件、加强论证时，考察搭桥强化的可能性非常大。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2) 加强方式 2：补充论据&lt;br /&gt;
在没有搭桥或者必要条件的选项时，还有两种高频的加强方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;解释论点成立的原因&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;举例证明论点成立&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果解释和举例同时出现，则解释加强力度更强。&lt;/p&gt;
&lt;h3 id=&#34;削弱论证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#削弱论证&#34;&gt;#&lt;/a&gt; 削弱论证&lt;/h3&gt;
&lt;h4 id=&#34;题型特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题型特征&#34;&gt;#&lt;/a&gt; 题型特征&lt;/h4&gt;
&lt;p&gt;提问方式中带有 “削弱、质疑、反驳、否定” 等关键词。&lt;/p&gt;
&lt;h4 id=&#34;解题思路-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题思路-2&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h4&gt;
&lt;p&gt;(1) 削弱方式 1： &lt;code&gt;否定论点&lt;/code&gt; &lt;br /&gt;
 (2) 削弱方式 2： &lt;code&gt;拆桥&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拆桥指 &lt;code&gt;破坏论点和论据之间的关系&lt;/code&gt; 。由于拆桥同时涉及到论点和论据，所以通常情况下，拆桥的力度要强于单纯的否定论据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出现一下特征，优先考虑拆桥的削弱方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;论点和论据中出现两个没有明显关系的概念。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，张三经常打抱不平，因此张三很帅气&lt;/p&gt;
&lt;p&gt;打抱不平和帅气没有明显关系的概念，因此可以用打抱不平和帅气是两码事来拆桥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;论点和论据中分别出现一个整体和一个部分的概念。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，XX 国发展势头良好，因此全球经济一片繁荣。&lt;/p&gt;
&lt;p&gt;可以用 XX 国只是全球众多国家中的一个，XX 国的经济只是全球经济的一部分，因此 XX 国的经济发展势头不能代表全球经济的整体发展势头。&lt;/p&gt;
&lt;p&gt;总的来说，出现一个整体和一个部分时，削弱论证，就是说部分不能代表整体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;论据是调查或实验数据，且没有直接否定论点的选项。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;逆否命题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆否命题&#34;&gt;#&lt;/a&gt; 逆否命题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;充分条件常见关联词&lt;br /&gt;
 A 是 B 的充分条件；如果 A，那么 B；若 A，那么 B；所以 A 都是 B；只要 A，就 B；凡是 A，都 B。 &lt;code&gt;A-&amp;gt;B,表示结果的连词，只要A做了什么B就怎么样，如果A做了什么B会怎么样，A怎么样都是B做了什么这样的关系时，原因放前面，引起的结果放后面。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;必要条件常见&lt;br /&gt;
只有 B，才 A；B 是 A 的必要条件；B 是 A 的前提；A 的基础是 B；为了 A，一定 B；A 的保障是 B。 &lt;code&gt;A-&amp;gt;B,表示只有B这样做了A才会怎么样，B是A怎么样的唯一诱导因素，B不可缺少，放后面。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，遇到 &amp;quot;只要... 才...&amp;quot; 等这种必要条件时， &lt;code&gt;只需要判断出谁是必不可少的条件，把必要条件放后面就行。&lt;/code&gt; 例如，“人类能生存，一定要有氧气”，生存 -&amp;gt; 氧气。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;逆否命题&lt;br /&gt;
 A-&amp;gt;B 等价于 -B-&amp;gt;-A&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;公理：对于命题A-&amp;gt;B，否前和肯后(即否定前件和肯定后件)得不出任何确定性的结论。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;记忆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记忆&#34;&gt;#&lt;/a&gt; 记忆&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;充分条件：有他就行放前面&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;必要条件：没他不行，放后面&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;肯前必肯后&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;否前必否后&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;否前肯后得不出任何正确性结论&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结，做此类题目时，先把题干中的条件关系缕清，只要... 就... 等划为充分条件，前推后；只要... 才... 等关系词划分为必要条件，必要条件在后，后推前。所以出现 &amp;quot;只要&amp;quot; 的时候，要看清后面是 &amp;quot;就&amp;quot; 还是 &amp;quot;才&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;联言命题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#联言命题&#34;&gt;#&lt;/a&gt; 联言命题&lt;/h3&gt;
&lt;p&gt;通俗的讲就是 &amp;quot;且&amp;quot; 关系，形式威 “A 且 B”。&lt;/p&gt;
&lt;h4 id=&#34;重要结论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重要结论&#34;&gt;#&lt;/a&gt; 重要结论&lt;/h4&gt;
&lt;p&gt;一假即假，同真才真。&lt;/p&gt;
&lt;h4 id=&#34;常见关键词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见关键词&#34;&gt;#&lt;/a&gt; 常见关键词&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;既 A 又 B&lt;/li&gt;
&lt;li&gt;不但 A 而且 B&lt;/li&gt;
&lt;li&gt;仅 A 而且 B&lt;/li&gt;
&lt;li&gt;虽然 A 但是 B&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特别注意： &lt;code&gt;“虽然A但是B”这个在言语中表示转折关系，但是在逻辑中表示的是且关系。&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;A,B&lt;/li&gt;
&lt;li&gt;同时 A,B&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;选言命题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选言命题&#34;&gt;#&lt;/a&gt; 选言命题&lt;/h3&gt;
&lt;p&gt;主要讲述 “或” 命题，基本形式为 “A 或 B”。&lt;/p&gt;
&lt;p&gt;一真则真，两假才假。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/markdwon%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
            <title>markdown语法</title>
            <link>https://xiaoplong.github.io/markdwon%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
            <pubDate>Tue, 22 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;markdown常用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown常用&#34;&gt;#&lt;/a&gt; markdown 常用&lt;/h1&gt;
&lt;h2 id=&#34;标题语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标题语法&#34;&gt;#&lt;/a&gt; 标题语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相应标题前加对应个 #，# 数代表了标题的级别。（注意 #后有个空格）&lt;/li&gt;
&lt;li&gt;或者在文本的下方添加任意数量的 = 标识一级标题，或者 - 标识二级标题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;段落语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段落语法&#34;&gt;#&lt;/a&gt; 段落语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用空白的一行或者多行文本进行分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不要用空格或者制表符缩进段落&lt;/p&gt;
&lt;h2 id=&#34;换行语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#换行语法&#34;&gt;#&lt;/a&gt; 换行语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;结尾空格方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;输入两个或者多个空格后进行回车换行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HTML 的 &amp;quot;br&amp;quot; 标签&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;或者直接用 &amp;quot;br&amp;quot; 标签换行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;强调语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强调语法&#34;&gt;#&lt;/a&gt; 强调语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;粗体强调&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在单词或者短语的前后各添加两个星号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;斜体&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;前后各添加一个星号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;粗体和斜体&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;前后各添加三个星号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;引用语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用语法&#34;&gt;#&lt;/a&gt; 引用语法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建块引用&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;段落前 &amp;quot;&amp;gt;&amp;quot; 符号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多个段落的块引用&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;块引用可以包含多个段落，为段落之间的空白行添加一个 &amp;quot;&amp;gt;&amp;quot; 符号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;嵌套块引用&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在要嵌套的段落前添加一个 &amp;quot;&amp;gt;&amp;gt;&amp;quot; 符号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;带有其它元素的块引用&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&amp;gt; - 这是一个带其它元素的块引用&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显示效果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这是一个带其它元素的块引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分隔线语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分隔线语法&#34;&gt;#&lt;/a&gt; 分隔线语法&lt;/h2&gt;
&lt;p&gt;单独一行上使用三个或者多个星号 (***), 破折号 (---), 或者下划线 (___), 并且不能包含其它内容。&lt;/p&gt;
&lt;p&gt;为了兼容性，分割线前后均要添加空白行。&lt;/p&gt;
&lt;h2 id=&#34;链接语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链接语法&#34;&gt;#&lt;/a&gt; 链接语法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[超链接显示名](超链接地址 &amp;quot;超链接title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用尖括号可以很方便的将 URL 或者 Email 地址变为可点击的链接。&lt;/p&gt;
&lt;h2 id=&#34;图片语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片语法&#34;&gt;#&lt;/a&gt; 图片语法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;![图片alt](图片链接 &amp;quot;图片title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/vue%E6%A1%86%E6%9E%B6/</guid>
            <title>Vue学习笔记</title>
            <link>https://xiaoplong.github.io/vue%E6%A1%86%E6%9E%B6/</link>
            <pubDate>Tue, 22 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vue全家桶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue全家桶&#34;&gt;#&lt;/a&gt; Vue 全家桶&lt;/h1&gt;
&lt;h2 id=&#34;vue基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue基础&#34;&gt;#&lt;/a&gt; Vue 基础&lt;/h2&gt;
&lt;h3 id=&#34;什么是vue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是vue&#34;&gt;#&lt;/a&gt; 什么是 Vue&lt;/h3&gt;
&lt;p&gt;一套用于构建用户界面的渐进式 javaScript 框架&lt;/p&gt;
&lt;p&gt;构建用户界面，将数据通过某种办法变成用户可以看见的界面。&lt;/p&gt;
&lt;p&gt;渐进式，Vue 可以自底向上逐层的应用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单应用：只需一个轻量小巧的核心库&lt;br /&gt;
复杂应用：可以引入各式各样的 Vue 插件&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%90%91/</guid>
            <title>学习</title>
            <link>https://xiaoplong.github.io/java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%90%91/</link>
            <pubDate>Sun, 13 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; java&lt;/h1&gt;
&lt;h2 id=&#34;java基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础&#34;&gt;#&lt;/a&gt; java 基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DOS 命令，java 特性&lt;/li&gt;
&lt;li&gt;super 关键字&lt;/li&gt;
&lt;li&gt;设计模式，单例和工厂&lt;/li&gt;
&lt;li&gt;Iterator 迭代，List 接口，Set，Map，Collections&lt;/li&gt;
&lt;li&gt;File，IO 流，转换流&lt;/li&gt;
&lt;li&gt;缓冲流和内存流&lt;/li&gt;
&lt;li&gt;对象流，Properties 类，装饰者设计模式&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;网络编程，TCP/Ip，UDP&lt;/li&gt;
&lt;li&gt;NIO，Channel，Buffer&lt;/li&gt;
&lt;li&gt;Selector，FileChannel&lt;/li&gt;
&lt;li&gt;反射&lt;/li&gt;
&lt;li&gt;JDK&lt;/li&gt;
&lt;li&gt;JVM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javaweb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javaweb&#34;&gt;#&lt;/a&gt; javaweb&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;后端技术（Servlet，Filter，Listener，JSP）&lt;/li&gt;
&lt;li&gt;会话跟踪技术（Cookie，Session）&lt;/li&gt;
&lt;li&gt;版本控制器 SVN&lt;/li&gt;
&lt;li&gt;在线支付&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关技术&#34;&gt;#&lt;/a&gt; 相关技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据的完整性，多表查询&lt;/li&gt;
&lt;li&gt;视图和索引&lt;/li&gt;
&lt;li&gt;SQL 注入，批处理，数据库事务&lt;/li&gt;
&lt;li&gt;C3PO 连接池，Druid 连接池&lt;/li&gt;
&lt;li&gt;DBUtils 工具类封装&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;SVN&lt;/li&gt;
&lt;li&gt;Tomcat，XML&lt;/li&gt;
&lt;li&gt;SAX 解析&lt;/li&gt;
&lt;li&gt;XML 生成&lt;/li&gt;
&lt;li&gt;Http 协议&lt;/li&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;Cookie 和 Session&lt;/li&gt;
&lt;li&gt;URL 重写&lt;/li&gt;
&lt;li&gt;过滤器 Filter，监听器 Listener&lt;/li&gt;
&lt;li&gt;jsp 和 jsp 内对象&lt;/li&gt;
&lt;li&gt;EL 表达式，JSTL&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;Gson，Fastjson，Jackson 工具&lt;/li&gt;
&lt;li&gt;Ajax&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Valiadte 插件和 Moment 插件&lt;/li&gt;
&lt;li&gt;MVC 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java框架&#34;&gt;#&lt;/a&gt; java 框架&lt;/h2&gt;
&lt;p&gt;主流的企业级框架，开发和管理工具（Maven，Git，Idea），Spring，webMVC 框架（SpringMVC。Struts2），ORM 框架（Hibenate，MyBatis），权限管理（Shiro），工作流（Activite），POI，Echarts，Spring 新特性等。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/%E7%88%AC%E8%99%AB/</guid>
            <title>爬虫</title>
            <link>https://xiaoplong.github.io/%E7%88%AC%E8%99%AB/</link>
            <pubDate>Sun, 13 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;爬虫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫&#34;&gt;#&lt;/a&gt; 爬虫&lt;/h1&gt;
&lt;h2 id=&#34;什么是爬虫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是爬虫&#34;&gt;#&lt;/a&gt; 什么是爬虫&lt;/h2&gt;
&lt;p&gt;就是模拟浏览器发送请求，获取响应。&lt;/p&gt;
&lt;p&gt;我们如果将互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物（数据）。&lt;/p&gt;
&lt;p&gt;网络爬虫也叫网络蜘蛛，它特指一类自动批量下载网络资源的程序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;更专业的定义：网络爬虫是伪装成客户端与服务器进行数据交互的程序。&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;爬虫的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫的应用&#34;&gt;#&lt;/a&gt; 爬虫的应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数据采集&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;大数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;搜索引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;百度谷歌等搜索引擎都是基于爬虫技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;模拟操作&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;模拟用户操作，测试机器人等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;软件测试&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;爬虫之自动化测试，虫师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;网络安全&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;短信轰炸，web 漏洞扫描&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;爬虫的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫的分类&#34;&gt;#&lt;/a&gt; 爬虫的分类&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;按照爬取的数量&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通用爬虫：通常指搜索引擎的爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通用爬虫是搜索引擎抓取系统（baidu，google 等）的重要组成成分。主要目的是将互联网的网页下载到本地，形成一个互联网内容的镜像备份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是它有个很大的问题就是，它们具有很大的局限性：大部分内容没有用，不同的搜索目的，返回的内容不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚焦爬虫：针对特定网站的爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;是面向特定主题需求的一中网络爬虫程序，它与通用搜索引擎爬虫的区别在于：聚焦爬虫在实施页面抓取时，会对内容进行处理筛选，尽量保证只抓取与需求相关的网页信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按照是否获取数据为目的&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;功能性爬虫：投票，点赞等&lt;/li&gt;
&lt;li&gt;数据增量爬虫：招聘信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;根据 url 地址和对应的页面内容是否改变，数据增量爬虫可分为：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;基于 url 地址变化，内容也随之变化的数据增量爬虫&lt;/li&gt;
&lt;li&gt;url 地址不变，内容变化的增量爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;爬虫的一般开发流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫的一般开发流程&#34;&gt;#&lt;/a&gt; 爬虫的一般开发流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;简单的单页面数据爬取&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;url-&amp;gt; 发送请求，获取相应 -&amp;gt; 提取数据 -&amp;gt; 保存数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多页面数据的爬取&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;发送请求，获取相应 -&amp;gt; 提取 url 地址，继续请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;爬虫开发的重难点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫开发的重难点&#34;&gt;#&lt;/a&gt; 爬虫开发的重难点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数据的获取&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;网络公共资源都是为用户准备的，为了避免被爬虫采集， &lt;code&gt;服务端会设置非常多的图灵测试&lt;/code&gt; ，阻止爬虫的恶意爬取，也就是 &lt;code&gt;反爬措施&lt;/code&gt; 。需要很大一部分工作量去处理这些反爬措施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;采集速度&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;巨大的数据量，如果采集速度跟不上，耗时过长就达不到商业需求。一般采用 &lt;code&gt;并发以及分布式&lt;/code&gt; 来解决速度问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;robots协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#robots协议&#34;&gt;#&lt;/a&gt; robots 协议&lt;/h2&gt;
&lt;p&gt;网站通过 robots 协议，告诉我们搜索引擎哪些页面可以抓取，哪些不能，但它仅仅是道德层面的约束。&lt;/p&gt;
&lt;h1 id=&#34;http和https&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http和https&#34;&gt;#&lt;/a&gt; HTTP 和 HTTPS&lt;/h1&gt;
&lt;p&gt;大多数商业应用采用的架构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;c/s cilent 客户端，服务端&lt;/li&gt;
&lt;li&gt;b/s browser [ˈbraʊzə] 浏览器，服务端&lt;/li&gt;
&lt;li&gt;m/s mobile 移动端，服务端&lt;br /&gt;
统称为客户端，服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;网络爬虫是伪装成客户端，然后与服务端进行数据交互的程序。&lt;/code&gt; 那么客户端和服务端怎么进行数据交互呢？&lt;/p&gt;
&lt;h2 id=&#34;http协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http协议&#34;&gt;#&lt;/a&gt; HTTP 协议&lt;/h2&gt;
&lt;p&gt;超文本传输协议， &lt;code&gt;用于从万维网服务器传输超文本到本地浏览器的传送协议。&lt;/code&gt; &lt;br /&gt;
一个应用层协议，目前互联网百分之九十的网络传输都是基于 http 协议的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;爬取想要的数据前，一定明确使用的是什么协议。&lt;/code&gt; 就比如 &lt;code&gt;弹幕可能采用的是websocket协议&lt;/code&gt; ，这样采用传统的爬虫就无法爬取弹幕了。&lt;/p&gt;
&lt;p&gt;HTTP 基于 TCP/IP 通信协议来传递数据（HTML 文件，图片文件，查询结果等）。&lt;/p&gt;
&lt;p&gt;注意：&lt;br /&gt;
TCP/IP 有个面向连接的特性，保证了数据的完整性。&lt;/p&gt;
&lt;h3 id=&#34;tcp-trabsmission-control-protocol&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-trabsmission-control-protocol&#34;&gt;#&lt;/a&gt; TCP Trabsmission Control Protocol&lt;/h3&gt;
&lt;p&gt;传输控制协议，是一种面向连接的，可靠的，基于字节流的传输层通信协议。&lt;/p&gt;
&lt;p&gt;TCP 是 &lt;code&gt;为了在不可靠的互联网络上提供可靠的端到端字节流&lt;/code&gt; 而专门设计的一个传输协议。&lt;/p&gt;
&lt;p&gt;可以抽象的理解为 &lt;code&gt;管道&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;三次握手四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手四次挥手&#34;&gt;#&lt;/a&gt; 三次握手四次挥手&lt;/h3&gt;
&lt;p&gt;最开始的时候客户端和服务器都出用 closed 状态。主动打开连接的为客户端，被动打开连接的是服务器。&lt;/p&gt;
&lt;p&gt;过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;三次握手建立连接&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：建立连接。客户端发送 syn 包（seq=x）到服务器，并进入 SYN_SENT，等待服务器确认。SYN：同步序列编号（Synchronize Sequence Numbers）。TCP 规定，SYN 报文段（SYN=1 的报文段）不能携带数据，但需要消耗掉一个序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通俗点：客户端要和服务端进行通信，首先告知服务端一声，然后发出一个 SYN=1 的连接请求信号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第二次握手：服务器收到 syn 包，必须确定客户端的 SYN（ack=x+1），同时自己也发送一个 SYN 包（seq=y)，即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。这个报文也不能携带数据，但是同样要消耗一个序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当服务端接收到客户端的连接请求，此时要给客户端一个确认信号，表示 “我知道了（ACK），我这边已经准备好了，你现在连接吗（SYN）”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第三次握手：客户端收到服务器的 SYN+ACK 包，想服务器发送确认包 ACK (ack=y+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，双方就可以通信了，完成三次握手。TCP 规定，ACK 报文段可以携带数据，但是如果不携带数据则不消耗序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当客户端接收到服务端的确认连接信息后，告知服务端，“好的，咱们开始连接（ACK）”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;建立了连接，然后进行数据交互。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;四次挥手断开连接（TCP 连接的释放）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在断开连接之前客户端和服务器都处于 ESTABLISHED 状态，双方都可以主动断开连接，以客户端主动断开连接为优。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一次挥手：客户端打算断开连接，向服务器发送 FIN 报文（FIN 标记位被设置为 1，1 表示为 FIN，0 表示不是），FIN 报文会指定一个序列号，之后客户端进入 FIN_WAIT_1 状态。&lt;/p&gt;
&lt;p&gt;第一次挥手客户端发送 &lt;code&gt;连接释放报文段（FIN报文），指定序列号ｓｅｑ＝ｕ&lt;/code&gt; ，主动关闭 TCP 连接，等待服务器的确认。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二次挥手：服务器收到连接释放报文段（FIN 报文）后，向客户端发送 &lt;code&gt;ACK应答报文，以客户端的FIN报文的序列号seq+1作为ACK应答报文的确认序列号ack=seq+1=u+1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器进入 CLOSE_WAIT (等待关闭) 状态，此时的 TCP 处于半关闭状态，客户端到服务器的连接释放。客户端收到来自服务器的 ACK 应答报文段后，进入 FIN_WAIT_2 状态。&lt;/p&gt;
&lt;p&gt;ACK 应答报文 Acknowledgement 确定字符&lt;/p&gt;
&lt;p&gt;ESTABLISHED established 连接的&lt;/p&gt;
&lt;p&gt;SYN Synchronized Sequence Numbers 同步序列编号&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%92%8Cip%E8%AE%BF%E9%97%AE/</guid>
            <title>网站的两种访问</title>
            <link>https://xiaoplong.github.io/%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%92%8Cip%E8%AE%BF%E9%97%AE/</link>
            <pubDate>Sun, 13 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;网站的访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网站的访问&#34;&gt;#&lt;/a&gt; 网站的访问&lt;/h1&gt;
&lt;p&gt;访问网站有两种方式：IP 地址或域名。&lt;/p&gt;
&lt;p&gt;一般的网站都只允许通过域名网址访问。&lt;/p&gt;
&lt;p&gt;域名（Domain Name）都有它的后缀，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1idnMzOTNiLmNvbQ==&#34;&gt;比如.com&lt;/span&gt;,.cn,.net 等。&lt;/p&gt;
&lt;h2 id=&#34;ip访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip访问&#34;&gt;#&lt;/a&gt; ip 访问&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;网站都是存放在服务器上的，网站在服务器上有一个地址，也就是这个网站的IP地址。IP地址可以由机器直接识别。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直接输入这个 IP 地址，即可直接访问这个网站。&lt;/p&gt;
&lt;p&gt;但是由于 IP 地址是一串数字，太难记了，于是就有了域名访问和 DNS。&lt;/p&gt;
&lt;h2 id=&#34;域名访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名访问&#34;&gt;#&lt;/a&gt; 域名访问&lt;/h2&gt;
&lt;p&gt;域名访问网址即在浏览器直接输入网站的网址就可以访问网站了。&lt;/p&gt;
&lt;p&gt;但是实际上，输入域名（DN）后，DNS（网域名称系统）将域名转换为了对应的 IP 地址，方便机器识别。&lt;/p&gt;
&lt;h3 id=&#34;域名dn-domain-name&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名dn-domain-name&#34;&gt;#&lt;/a&gt; 域名 DN （Domain Name）&lt;/h3&gt;
&lt;p&gt;简称域名，网域，是由一串用点分隔的名字组成的 Internet 上某一台计算机或者计算机组的名称。&lt;/p&gt;
&lt;p&gt;用于在数据传输时标识计算机的电子方位（或者物理位置）。&lt;/p&gt;
&lt;h2 id=&#34;网域名称系统-dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网域名称系统-dns&#34;&gt;#&lt;/a&gt; 网域名称系统 DNS&lt;/h2&gt;
&lt;p&gt;DNS 有时简称域名，是因特网的一项核心服务。&lt;/p&gt;
&lt;p&gt;DNS 就是把网址和网站的 ip 地址对应起来，这样输入网址，就相当于输入了网站的 ip 地址，就可以访问网站了。这里的网址也就是域名。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DNS将域名和IP地址相互映射成一个分布式数据库。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如 www.wikesa.org 是一个域名，在这个数据库中，和 IP 地址 208.80.152.2 相对应。输入域名就可以直接访问这个 IP 地址的网站了。&lt;/p&gt;
&lt;p&gt;DNS 就像是一个自动的电话号码簿，可以直接拨打 www.wikesa.org 的名字来替代电话号码（Ip 地址）。我们直接调用网站的名字后， &lt;code&gt;DNS会将域名www.wikesa.org转化成便于机器识别的IP地址。&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/%E4%BB%A3%E7%90%86/</guid>
            <title>代理</title>
            <link>https://xiaoplong.github.io/%E4%BB%A3%E7%90%86/</link>
            <pubDate>Wed, 09 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代理&#34;&gt;#&lt;/a&gt; 代理&lt;/h1&gt;
&lt;h2 id=&#34;正向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向代理&#34;&gt;#&lt;/a&gt; 正向代理&lt;/h2&gt;
&lt;p&gt;一般直接叫做代理。&lt;/p&gt;
&lt;p&gt;正向代理指的是用户利用代理服务器访问目标服务器。&lt;/p&gt;
&lt;h3 id=&#34;用处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用处&#34;&gt;#&lt;/a&gt; 用处&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;访问 404 网站&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;相当于跑腿代购，我们并不能直接在网上购买香烟这类禁止网上销售或者没有在外卖平台上架的商品（404），但是我们可以通过骑手（代理服务器），去指定的店铺（目标服务器）购买我们需要的东西（目标资源），送到我们面前。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;加速访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理&#34;&gt;#&lt;/a&gt; 反向代理&lt;/h2&gt;
&lt;p&gt;正向代理代理的是用户，反向代理对象是目标服务器，是指服务端利用代理服务器给用户提供服务。&lt;/p&gt;
&lt;h3 id=&#34;正反代理对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正反代理对比&#34;&gt;#&lt;/a&gt; 正反代理对比&lt;/h3&gt;
&lt;p&gt;两者都是利用代理服务器实现的，不过反向代理的主语是服务器，所以反向代理对于用户来说是透明的，在用户的视野里，代理服务器就是目标服务器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似饿了么『专星送』服务，我们（用户）在想喝咖啡的时候，并不需要知道我们附近哪个广场哪个角落有家星巴克（目标服务器），我们只需要打开专星送（代理服务器），直接下单就是，其会自动分配合适的门店为我们提供咖啡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反向代理在实际应用中可以起到保护和隐藏真正提供服务的服务器，对用户的需求提供负载均衡。&lt;/p&gt;
&lt;h2 id=&#34;代理的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代理的实现&#34;&gt;#&lt;/a&gt; 代理的实现&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
            <title>笔试题</title>
            <link>https://xiaoplong.github.io/%E7%AC%94%E8%AF%95%E9%A2%98/</link>
            <pubDate>Sat, 05 Nov 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;笔试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#笔试题&#34;&gt;#&lt;/a&gt; 笔试题&lt;/h1&gt;
&lt;h2 id=&#34;计网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计网&#34;&gt;#&lt;/a&gt; 计网&lt;/h2&gt;
&lt;h3 id=&#34;子网掩码的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网掩码的应用&#34;&gt;#&lt;/a&gt; 子网掩码的应用&lt;/h3&gt;
&lt;p&gt;1. 计算机网络中，子网划分是通过借用 IP 地址的若干位主机位来充当子网地址从而将原网络划分为若干子网而实现的，现假设北京市某单位分配到一个 B 类 IP 地址，其网络地址为 129.250.0.0，该单位有 4000 台机器，平均分布在 16 个不同的地点，试给每一地点分配一个子网号码，要求能分配的子网数最多的情况下，每个子网里面的主机数也能容纳一个地点的所有主机，则子网掩码选择为多少，这种情况下可以划分多少个子网？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子网掩码：用于区分地址中是否有子网号，一般以 0、1 表示，网络号和子网号用 1 表示，主机号用 0 表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A、B、C 类 ip 号（第二级）网络号 + 主机号&lt;br /&gt;
 A 类：8+24 B 类：16+16 C 类：24+8 ；它们的子网掩码是默认的，网络号位置为 1，主机号位置为 0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;网络地址：子网掩码和 ip 地址相与就是网络地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;子网掩码作用：它的主要作用有两个，一是用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。二是用于将一个大的IP网络划分为若干小的子网络。
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;和 ip 相与得到网络地址&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;直接将 ip 地址和子网掩码相与&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确定可以划分的子网个数（可以将 ip 扩充为第三级，网络号 + 子网号 + 主机号）&lt;/p&gt;
&lt;p&gt;例如，给出 A 类网络的 ip 地址 20.0.0.0 的子网掩码 255.224.0.0，确定可以划分的子网个数，并写出子网号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;想到，第二类 IP 地址 A 类网络的默认子网掩码是 255.0.0.0，然后对比给出的子网掩码，可得 224 就是子网号，即为 1110，1 占三位，所以子网个数为 2^3=8 个。然后各自的子网号，除去全零和全一的情况，001|00000&lt;sub&gt;111|00000.（20.32.0.0&lt;/sub&gt;20.224.0.0）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将某个网络划分为 n 个子网，然后计算每个子网有效的 IP 地址范围和相应的子网掩码&lt;/p&gt;
&lt;p&gt;例如：将 C 类网络 200.161.30.0 划分为 4 个子网，计算每个子网有效的主机 IP 地址和相应的子网掩码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;C 类网络的 IP 地址默认子网掩码为 255.255.255.0，要划分 4 个子网，2^2=4 需要占用两个主机号为来作为子网号，所以子网掩码为 255.255.255.11000000。&lt;br /&gt;
每个子网的有效 IP 地址范围即为，相应的子网然后去掉全零和全一的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断两个网络是否在同一个子网下&lt;br /&gt;
根据子网掩码算出网络所处的子网，然后比较；或者看是什么类的网络（ABC），然后算出其子网号，看两个网络的网络号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定网络地址，要求将这个网络划分给 n 个地区，然后要求地区最大主机数 m，然后计算子网掩码和划分给各个区域的网络地址&lt;/p&gt;
&lt;p&gt;例如：某公司申请到网络地址为 192.3.2.0，先要划分 5 个子公司，最大的子公司要求有 28 台计算机，每个子公司在一个子网下，求子网掩码和五个子公司的网络地址？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;可以判断这个网络属于 C 类 Ip 地址，子网掩码默认为 255.255.255.0，要划分五个子网，那么需要三个主机位作为子网号，因为 2&lt;sup&gt;3&amp;gt;5 且 2&lt;/sup&gt;2&amp;lt;5. 然后剩下 5 个主机号位，2^5-2&amp;gt;28 满足地区最大主机数要求。&lt;br /&gt;
所以子网掩码为 255.255.255.111|00000 = 255.255.255.224&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;iptcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptcp&#34;&gt;#&lt;/a&gt; IP/TCP&lt;/h3&gt;
&lt;p&gt;IP 分组中的数据部分 = TCP 首部 + TCP 数据部分&lt;/p&gt;
&lt;h2 id=&#34;算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法&#34;&gt;#&lt;/a&gt; 算法&lt;/h2&gt;
&lt;h2 id=&#34;计组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计组&#34;&gt;#&lt;/a&gt; 计组&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/computer-science/vim/vim/</guid>
            <title>vim命令</title>
            <link>https://xiaoplong.github.io/computer-science/vim/vim/</link>
            <category term="计算机科学" scheme="https://xiaoplong.github.io/categories/computer-science/" />
            <category term="vim命令" scheme="https://xiaoplong.github.io/categories/computer-science/vim/" />
            <category term="vim" scheme="https://xiaoplong.github.io/tags/vim/" />
            <pubDate>Sat, 22 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vim相关指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim相关指令&#34;&gt;#&lt;/a&gt; Vim 相关指令&lt;/h1&gt;
&lt;p&gt;普通模式下，输入一个或者多个建组成一条指令。&lt;/p&gt;
&lt;h2 id=&#34;强大的命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强大的命令&#34;&gt;#&lt;/a&gt; 强大的。命令&lt;/h2&gt;
&lt;p&gt;. 命令会 &amp;quot;重复上次修改&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例 1，x 命令删除光标所在的字符，这种情况下使用。命令重复上次修改，就会让 vim 继续删除光标下的字符。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 u 指令可以撤销上次的修改，使文本恢复到初试状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;例 2:dd 命令也可以做到删除操作，但是它会把整行一起删除掉。如果 dd 后使用。命令，那么重复上次修改，会让 vim 继续删除当行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&amp;gt;G&amp;quot; 命令会增加从当前行到文档末尾处的缩进层次。也就是，假设文档有多行数据，光标指向第二行数据，&amp;gt;G 命令后，第二行到文档最后一行会形成较第一行的一个缩进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;注意：x,dd,&amp;gt;命令是在esc，普通模式下进行的。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;除了删除，缩进等在普通模式中执行的命令修改外；每次我们进入插入模式时，也会形成一次修改，从进入修改模式那刻起(例如输入i,o,s,a),直到返回普通模式位置(输入esc)，vim也记录这段时间内的按键。根据这个特性，我们打代码的时候，上下连续重复的代码，只用用.命令就行了，因为它退出普通模式，输入代码，然后esc进入普通模式，这段时间内的修改，即为这段输入代码，使用.命令，直接就在光标位置进行了上次的修改。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令是一个微型的宏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令是一个微型的宏&#34;&gt;#&lt;/a&gt; . 命令是一个微型的宏&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;宏中，vim可以录制任何数目的按键操作，然后在以后重复执行它们。.可以看作一个很小的宏&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;行尾添加内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行尾添加内容&#34;&gt;#&lt;/a&gt; 行尾添加内容&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;命令行模式（esc）下，$可以移动到光标所在行的尾部。&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，在每行末尾添加 “;“符号，想&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;到句尾，然后&lt;/mtext&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mtext&gt;指令插入模式，然后输入&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;&amp;quot;&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;;&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;&amp;quot;&lt;/mi&gt;&lt;mtext&gt;。由于&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mtext&gt;可以看作很小的宏，利用&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mtext&gt;命令，它会记录退出普通模式到进入普通模式的修改，即它记录了&lt;/mtext&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;;&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mtext&gt;插入和输入&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;&amp;quot;&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;;&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;&amp;quot;&lt;/mi&gt;&lt;mtext&gt;。也就是说只要第一次&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;到句尾，然后a指令插入模式，然后输入&amp;quot;;&amp;quot;。
由于.可以看作很小的宏，利用.命令，它会记录退出普通模式到进入普通模式的修改，即它记录了 a;,插入和输入&amp;quot;;&amp;quot;。
也就是说只要第一次&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;到&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;句&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;尾&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;然&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;后&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;指&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;令&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;插&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;然&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;后&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;由&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;于&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;可&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;以&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;看&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;很&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;小&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宏&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;利&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;命&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;令&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;它&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;会&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;记&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;录&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;退&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;出&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;普&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;到&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;进&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;普&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;修&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;改&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;即&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;它&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;记&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;录&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;了&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;插&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;和&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;入&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;也&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;就&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;说&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;只&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;要&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;第&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;一&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;次&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; a;&amp;lt;esc&amp;gt; 后，就只要 j. 进行插入了。&lt;br /&gt;
一个。键包括了 a;&amp;lt;esc&amp;gt; 三个键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;可以将 $a 组合键，改为 A 命令，直接跳到句尾，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除&#34;&gt;#&lt;/a&gt; 删除&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dw 命令 在后面没有任何东西的情况下，dw 指令删除光标下的单词、汉字或者符号，如果说光标后面还有其它的东西时：&lt;br /&gt;
当光标指向的是字母或者汉字时，dw 会删除光标到下一个字符所有的字母汉字，然后指向那个字符。&lt;br /&gt;
当光标指向字符时，如果后面不是字符，那么会只删除这个字符，若是后面时字符，那么会删除从光标指向的字符开始到最后一个连续字符为止的所有字符，然后指向字母或者汉字。&lt;/li&gt;
&lt;li&gt;dj 命令 删除本行和下一行&lt;/li&gt;
&lt;li&gt;dk 命令 删除本行和上一行&lt;/li&gt;
&lt;li&gt;s 指令 删除光标所指向的字符，然后进入插入模式&lt;/li&gt;
&lt;li&gt;dh 指令 删除光标所指字符的左边那个字符&lt;/li&gt;
&lt;li&gt;dl 指令 删除光标所指向的字符，然后左移一个单位&lt;/li&gt;
&lt;li&gt;dd 命令 删除光标所指的整行&lt;/li&gt;
&lt;li&gt;x 命令 删除光标所指，然后光标右移一个单位，与 dl 命令的效果相同。&lt;/li&gt;
&lt;li&gt;cl 命令 相似于 dl 命令，但是它是删除光标所指，然后进入插入模式&lt;/li&gt;
&lt;li&gt;cc 命令 相似于 dd 命令，但是它是删除光标当行，然后进入插入模式。&lt;/li&gt;
&lt;li&gt;C 命令 删除光标所指到句尾的所有字符，然后进入插入模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入&#34;&gt;#&lt;/a&gt; 插入&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;a,o,s,i相关的命令&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 命令 在当前光标之后添加内容&lt;/li&gt;
&lt;li&gt;A 命令 在当前行的结尾添加内容，不管光标处于什么位置，输入 A 都会进入插入模式，并把光标移到结尾。也就是说它把 $a 封装成了一个按键操作。&lt;/li&gt;
&lt;li&gt;I 命令 与 A 相反，它是在行首进行插入。&lt;/li&gt;
&lt;li&gt;cc 删除整行并进入插入模式&lt;/li&gt;
&lt;li&gt;S 与 cc 相同，删除整行并进入插入模式。&lt;/li&gt;
&lt;li&gt;C 命令 删除光标到行尾的所有内容，然后进入插入模式。&lt;/li&gt;
&lt;li&gt;o 命令 下一行进行插入&lt;/li&gt;
&lt;li&gt;O 命令 在光标所在行和上一行中间插入一行，然后进行插入模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一箭双雕&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一箭双雕&#34;&gt;#&lt;/a&gt; &amp;quot; 一箭双雕”&lt;/h2&gt;
&lt;p&gt;从普通模式切换到插入模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s 命令 cl 复合 删除光标所指，然后进入插入模式。&lt;/li&gt;
&lt;li&gt;C 命令 c$ 复合 删除光标所指到句尾的所有内容，然后进入插入模式。&lt;/li&gt;
&lt;li&gt;o 命令 A&amp;lt;CR&amp;gt; 复合&lt;/li&gt;
&lt;li&gt;A 命令 $a 复合 行尾插入&lt;/li&gt;
&lt;li&gt;I 命令 ^i 复合 (两个 i)&lt;/li&gt;
&lt;li&gt;S 命令 ^c 复合 删除整行，然后进入插入模式 (两个 c)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使修改可重复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使修改可重复&#34;&gt;#&lt;/a&gt; 使修改可重复&lt;/h2&gt;
&lt;p&gt;var foo = &amp;quot;method(&amp;quot;+argument1+&amp;quot;,&amp;quot;+argument2+&amp;quot;)&amp;quot;;&lt;/p&gt;
&lt;h3 id=&#34;相关命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关命令&#34;&gt;#&lt;/a&gt; 相关命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;当光标指向改行代码之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;f {char} 命令 让 vim 查找下一处指定字符的位置，如果找到了就将光标移到那里，f + 命令，表示跳跃到该代码的第一个 + 号位置&lt;/li&gt;
&lt;li&gt;s + &amp;lt;esc&amp;gt; 命令 给 + 两边加上空格，任何进入普通模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;命令 重复查找上次f命令命令所查找的字符&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;; 命令移到到下一个目标字符，. 命令重复上次的修改，;. 命令即可修改 +。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/computer-science/Linux/Linux%20Shell/Linux+shell/</guid>
            <title>Linux Shell</title>
            <link>https://xiaoplong.github.io/computer-science/Linux/Linux%20Shell/Linux+shell/</link>
            <category term="计算机科学" scheme="https://xiaoplong.github.io/categories/computer-science/" />
            <category term="Linux Command and Shell" scheme="https://xiaoplong.github.io/categories/computer-science/Linux/" />
            <category term="Linux基础知识和Shell指令" scheme="https://xiaoplong.github.io/categories/computer-science/Linux/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8CShell%E6%8C%87%E4%BB%A4/" />
            <category term="Linux" scheme="https://xiaoplong.github.io/tags/Linux/" />
            <category term="Shell" scheme="https://xiaoplong.github.io/tags/Shell/" />
            <pubDate>Fri, 21 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;:::note info&lt;br /&gt;
 以下为 Linx Shell 相关学习笔记&lt;br /&gt;
:::&lt;/p&gt;
&lt;h1 id=&#34;linux-command-and-shell-scripting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-command-and-shell-scripting&#34;&gt;#&lt;/a&gt; Linux command and Shell scripting&lt;/h1&gt;
&lt;h2 id=&#34;什么是linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是linux&#34;&gt;#&lt;/a&gt; 什么是 Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux 内核&lt;/li&gt;
&lt;li&gt;GNU 工具&lt;/li&gt;
&lt;li&gt;图形化桌面环境&lt;/li&gt;
&lt;li&gt;应用软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux内核&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux内核&#34;&gt;#&lt;/a&gt; Linux 内核&lt;/h2&gt;
&lt;p&gt;Linux 系统的核心，控制着计算机系统上的所有硬件和软件，必要时分配硬件，并根据需要执行软件。&lt;br /&gt;
内核负责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统内存管理&lt;/li&gt;
&lt;li&gt;文件系统管理&lt;/li&gt;
&lt;li&gt;软件系统管理&lt;/li&gt;
&lt;li&gt;硬件设备管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-系统内存管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-系统内存管理&#34;&gt;#&lt;/a&gt; 1、系统内存管理&lt;/h3&gt;
&lt;p&gt;内核不仅管理服务器上的可用物理内存，还可以创建和管理虚拟内存（实际上不存的内存），&lt;/p&gt;
&lt;p&gt;内存通过硬盘上的存储空间来实现虚拟内存，这块区域被称为交换空间。&lt;/p&gt;
&lt;p&gt;内核不断地在交换空间和实际的物理内存之间反复的交换虚拟内存中的内容。使得系统以为它拥有比物理内存更多的可用内存。即虚拟内存等于，实际的物理内存加上硬盘中的交换内存。&lt;/p&gt;
&lt;h4 id=&#34;页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页&#34;&gt;#&lt;/a&gt; 页&lt;/h4&gt;
&lt;p&gt;内存存储单元按组划分位很多块，这些块称作页面。内核将每个内存页面放在物理内存或者交换空间（虚拟内存）。内核会维护一个内存页面表，指明页面所处的位置，而且会记录哪些内存页面正在被使用，并自动把一段时间为访问的内存页面复制到交换空间区域（换出）—— 即使还有可用内存。&lt;/p&gt;
&lt;p&gt;当程序要访问一个已被换出的页面时，内核必须从物理内存换出另一个内存页面给他让出空间，然后从交换空间换入请求的内存页面。显然这个过程需要花费时间，拖慢运行的进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;只要Linux系统还在运行，为运行中的程序换出内春页面的过程就不会停歇&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-软件管理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-软件管理系统&#34;&gt;#&lt;/a&gt; 2、软件管理系统&lt;/h2&gt;
&lt;h3 id=&#34;进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程&#34;&gt;#&lt;/a&gt; 进程&lt;/h3&gt;
&lt;p&gt;Linux 操作系统将运行中的程序成为进程。&lt;br /&gt;
内核控制 Linux 系统如何管理运行在系统上的所有进程。&lt;br /&gt;
 &lt;code&gt;内核创建第一个进程（成为init进程）来自动启动系统上所有其它进程&lt;/code&gt; &lt;br /&gt;
内核启动时，它会将 init 进程加载到 &lt;code&gt;虚拟内存&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;内核在启动其它任何进程时，都会在 &lt;code&gt;虚拟内存中给新进程分配一块专有区域&lt;/code&gt; 来存储该进程用到的数据和代码。&lt;/p&gt;
&lt;h3 id=&#34;运行级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行级&#34;&gt;#&lt;/a&gt; 运行级&lt;/h3&gt;
&lt;p&gt;Linux 操作系统的 init 系统采用了运行级。&lt;br /&gt;
5 个启动运行级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行级为 1，之启动基本的系统进程以及一个控制台终端进程 —— 单用户模式。通常用来在系统有问题时，进行紧急的文件系统维护。这种模式下，仅有一个人能登录到系统上操作数据（通常是管理员）&lt;/li&gt;
&lt;li&gt;3 标准的运行级，大多数应用软件都会启动&lt;/li&gt;
&lt;li&gt;5 系统会自动图形化 X Window 系统，允许用户通过图形化桌面窗口登录系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;硬件设备管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件设备管理&#34;&gt;#&lt;/a&gt; 硬件设备管理&lt;/h2&gt;
&lt;p&gt;任何 Linux 系统需要与之通信的设置，都需要在内核代码中加入其驱动程序代码。&lt;/p&gt;
&lt;h3 id=&#34;驱动代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驱动代码&#34;&gt;#&lt;/a&gt; 驱动代码&lt;/h3&gt;
&lt;p&gt;驱动代码相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据，在 Linux 内核中有 2 种方法用于插入设备驱动代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译进内核的设备驱动代码&lt;/li&gt;
&lt;li&gt;可插入内核的设备驱动模块&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/computer-science/java/course-1/week-2/</guid>
            <title>第二周</title>
            <link>https://xiaoplong.github.io/computer-science/java/course-1/week-2/</link>
            <category term="计算机科学" scheme="https://xiaoplong.github.io/categories/computer-science/" />
            <category term="Java" scheme="https://xiaoplong.github.io/categories/computer-science/java/" />
            <category term="java基础" scheme="https://xiaoplong.github.io/categories/computer-science/java/course-1/" />
            <pubDate>Mon, 13 Apr 2020 19:12:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;:::note info&lt;br /&gt;
 以下为个人学习笔记和习题整理&lt;br /&gt;
:::&lt;/p&gt;
&lt;h1 id=&#34;课堂笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课堂笔记&#34;&gt;#&lt;/a&gt; 课堂笔记&lt;/h1&gt;
&lt;h2 id=&#34;关系运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系运算&#34;&gt;#&lt;/a&gt; 关系运算&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;六个关系运算符：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;大于或等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;小于或等于&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;关系运算结果为  &lt;code&gt;true&lt;/code&gt;  或  &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;优先级
&lt;ul&gt;
&lt;li&gt;所有关系运算符的优先级比算术运算低，但比赋值运算高&lt;/li&gt;
&lt;li&gt;判断是否相等的 == 和！= 优先级比其他的低&lt;/li&gt;
&lt;li&gt;连续的关系运算是从左到右进行的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判断两个浮点数是否相等的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f1&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;f2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0000001&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;下列表达式中错误的有？&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; 5 &amp;gt; 3 == 6 &amp;gt; 4&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; 6 &amp;gt; 5 &amp;gt; 4&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; a == b == true&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; a == b == 6&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_4&#34;&gt; a ==  b &amp;gt; false&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_5&#34;&gt; (a == b) &amp;gt; false&lt;br /&gt;
 &lt;code&gt;true 和 false 不能比较大小&lt;/code&gt; &lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;判断语句-if-else&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断语句-if-else&#34;&gt;#&lt;/a&gt; 判断语句 if else&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;多路分支-switch-case&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路分支-switch-case&#34;&gt;#&lt;/a&gt; 多路分支 switch case&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;计算 switch 后面的控制表达式以后，程序会跳到相应的 case，但是如果这个 case 内部没有 break，那么在执行完语句后，就会顺序执行到下面的 case，直到遇到 break 或者 switch 结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小测验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小测验&#34;&gt;#&lt;/a&gt; 小测验&lt;/h1&gt;
&lt;ol&gt;
&lt;li class=&#34;quiz essay&#34;&gt;
&lt;p&gt;写出以下代码段的执行结果：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; max&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zhang&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;huang&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zhu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;huang&lt;br /&gt;
zhu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz essay&#34;&gt;
&lt;p&gt;写出以下代码段的执行结果：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; limit &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; limit &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; limit&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; num1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; num2 &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lemon&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lime&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;grape&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;lime&lt;br /&gt;
grape&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;编程题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程题&#34;&gt;#&lt;/a&gt; 编程题&lt;/h1&gt;
&lt;h2 id=&#34;题目1-时间换算5分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目1-时间换算5分&#34;&gt;#&lt;/a&gt; 题目 1. 时间换算（5 分）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;题目内容&lt;/strong&gt;&lt;br /&gt;
 UTC 是世界协调时，BJT 是北京时间，UTC 时间相当于 BJT 减去 8。现在，你的程序要读入一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。如 1124 表示 11 点 24 分，而 905 表示 9 点 5 分，36 表示 0 点 36 分，7 表示 0 点 7 分。&lt;/p&gt;
&lt;p&gt;有效的输入范围是 0 到 2359，即你的程序不可能从测试服务器读到 0 到 2359 以外的输入数据。&lt;/p&gt;
&lt;p&gt;你的程序要输出这个时间对应的 UTC 时间，输出的格式和输入的相同，即输出一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果分小于 10 分，需要保留十位上的 0。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;提醒：要小心跨日的换算。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;br /&gt;
一个整数，表示 BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br /&gt;
一个整数，表示 UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于 10，则没有千位部分；如果小时是 0，则没有百位部分；如果小时不是 0 而且分小于 10 分，需要保留十位上的 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入样例&lt;/strong&gt;&lt;br /&gt;
 933&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出样例&lt;/strong&gt;&lt;br /&gt;
 133&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解题代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题代码&#34;&gt;#&lt;/a&gt; 解题代码&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt; in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; bjt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; utc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bjt &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;800&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;utc &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			utc &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2400&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 时为负数，则进行隔日计算&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;utc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;题目2-信号报告5分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目2-信号报告5分&#34;&gt;#&lt;/a&gt; 题目 2. 信号报告（5 分）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;题目内容&lt;/strong&gt;&lt;br /&gt;
无线电台的 RS 制信号报告是由三两个部分组成的：&lt;/p&gt;
&lt;p&gt;R (Readability) 信号可辨度即清晰度.&lt;/p&gt;
&lt;p&gt;S (Strength)    信号强度即大小.&lt;/p&gt;
&lt;p&gt;其中 R 位于报告第一位，共分 5 级，用 1—5 数字表示.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1---Unreadable&lt;/p&gt;
&lt;p&gt;2---Barely readable, occasional words distinguishable&lt;/p&gt;
&lt;p&gt;3---Readable with considerable difficulty&lt;/p&gt;
&lt;p&gt;4---Readable with practically no difficulty&lt;/p&gt;
&lt;p&gt;5---Perfectly readable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;报告第二位是 S，共分九个级别，用 1—9 中的一位数字表示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1---Faint signals, barely perceptible&lt;/p&gt;
&lt;p&gt;2---Very weak signals&lt;/p&gt;
&lt;p&gt;3---Weak signals&lt;/p&gt;
&lt;p&gt;4---Fair signals&lt;/p&gt;
&lt;p&gt;5---Fairly good signals&lt;/p&gt;
&lt;p&gt;6---Good signals&lt;/p&gt;
&lt;p&gt;7---Moderately strong signals&lt;/p&gt;
&lt;p&gt;8---Strong signals&lt;/p&gt;
&lt;p&gt;9---Extremely strong signals&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，你的程序要读入一个信号报告的数字，然后输出对应的含义。如读到 59，则输出：	&lt;br /&gt;
 &lt;code&gt;	Extremely strong signals, perfectly readable.	&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;br /&gt;
一个整数，信号报告。整数的十位部分表示可辨度，个位部分表示强度。输入的整数范围是 [11,59] 内有效的数字，这个范围外的数字不可能出现在测试数据中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br /&gt;
一句话，表示这个信号报告的意义。按照题目中的文字，先输出表示强度的文字，跟上逗号和空格，然后是表示可辨度的文字，跟上句号。注意可辨度的句子的第一个字母是小写的。注意这里的标点符号都是英文的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入样例&lt;/strong&gt;&lt;br /&gt;
 33&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出样例&lt;/strong&gt;&lt;br /&gt;
 Weak signals, readable with considerable difficulty.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解题代码-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题代码-2&#34;&gt;#&lt;/a&gt; 解题代码&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt; in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; rs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; readability &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rs &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; strength &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rs &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;strength&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Faint signals, barely perceptible&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Very weak signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Weak signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Fair signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Fairly good signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Good signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Moderately strong signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Strong signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Extremely strong signals&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readability&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, unreadable.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, barely readable, occasional words distinguishable.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, readable with considerable difficulty.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, readable with practically no difficulty.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, perfectly readable.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/computer-science/java/course-1/week-1/</guid>
            <title>第一周</title>
            <link>https://xiaoplong.github.io/computer-science/java/course-1/week-1/</link>
            <category term="计算机科学" scheme="https://xiaoplong.github.io/categories/computer-science/" />
            <category term="Java" scheme="https://xiaoplong.github.io/categories/computer-science/java/" />
            <category term="java基础" scheme="https://xiaoplong.github.io/categories/computer-science/java/course-1/" />
            <category term="java" scheme="https://xiaoplong.github.io/tags/java/" />
            <pubDate>Sun, 12 Apr 2020 20:46:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;:::note info&lt;br /&gt;
 以下为个人学习笔记和习题整理&lt;br /&gt;
:::&lt;/p&gt;
&lt;h1 id=&#34;课堂笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课堂笔记&#34;&gt;#&lt;/a&gt; 课堂笔记&lt;/h1&gt;
&lt;h2 id=&#34;读输入-字符串输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读输入-字符串输出&#34;&gt;#&lt;/a&gt; 读输入、字符串输出&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;scanner&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt; in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 让 in 这个对象做读入下一行的动作，结果交给 System.out 这个对象去打印一行。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 字符串的 + 用来连接两个字符串形成更长的字符串。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; world.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.println&lt;/code&gt;  会换行， &lt;code&gt;System.out.print&lt;/code&gt;  则不会换行&lt;/li&gt;
&lt;li&gt;出现警告： &lt;code&gt;Resource leak: &#39;in&#39; is never closed&lt;/code&gt; ，可以在函数的最后加入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 释放&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量&#34;&gt;#&lt;/a&gt; 变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;形式&lt;/strong&gt;：&amp;lt;类型名称&amp;gt; &amp;lt; 变量名称 &amp;gt; = &amp;lt; 初始值 &amp;gt;&lt;br /&gt;
 &lt;code&gt;int price, amount; // 同时定义两个变量&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;int price = 0; // 定义变量并赋值&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;int price, amount = 100, age;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类型名称&lt;/strong&gt;：Java 是一种&lt;strong&gt;强类型语言&lt;/strong&gt;，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变量名称&lt;/strong&gt;：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 的保留字列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;th&gt;do&lt;/th&gt;
&lt;th&gt;implements&lt;/th&gt;
&lt;th&gt;protected&lt;/th&gt;
&lt;th&gt;throws&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;transient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;instanceof&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;extends&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;case&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;interface&lt;/td&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catch&lt;/td&gt;
&lt;td&gt;final&lt;/td&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;strictfp&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;finally&lt;/td&gt;
&lt;td&gt;native&lt;/td&gt;
&lt;td&gt;super&lt;/td&gt;
&lt;td&gt;volatile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const*&lt;/td&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;goto*&lt;/td&gt;
&lt;td&gt;package&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;throw&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;以下哪些标识符是符合规则的？&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; currency&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; lastName&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; fireplace&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; _last_name&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_4&#34;&gt; xingmin&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_5&#34;&gt; class&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_6&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_6&#34;&gt; goto&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_7&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_7&#34;&gt; 4ever&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_8&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_8&#34;&gt; time-machine&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_9&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_9&#34;&gt; Int&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_10&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_10&#34;&gt; $12&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_11&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_11&#34;&gt; 我是变量&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常量-final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常量-final&#34;&gt;#&lt;/a&gt; 常量 final&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;AMOUNT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//final 是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;变量类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量类型&#34;&gt;#&lt;/a&gt; 变量类型&lt;/h2&gt;
&lt;h3 id=&#34;整数-int&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数-int&#34;&gt;#&lt;/a&gt; 整数 int&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; price &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;如果用户输入的不是整数，则会报错  &lt;code&gt;java.util.InputMismatchException&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。&lt;/li&gt;
&lt;li&gt;每次召唤 &lt;code&gt;in.nextInt()&lt;/code&gt; ，它就等待用户输入一个整数。&lt;/li&gt;
&lt;li&gt;两个整数的运算结果只能是整数。&lt;/li&gt;
&lt;li&gt;在 Java 中， &lt;code&gt;10&lt;/code&gt;  和 &lt;code&gt;10.0&lt;/code&gt;  是完全不同的数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮点数-double&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数-double&#34;&gt;#&lt;/a&gt; 浮点数 double&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浮点数运算有误差&lt;/strong&gt;：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 结果为 0.09999999999999987&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;赋值运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#赋值运算&#34;&gt;#&lt;/a&gt; 赋值运算&lt;/h2&gt;
&lt;h3 id=&#34;强制类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强制类型转换&#34;&gt;#&lt;/a&gt; 强制类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。&lt;/li&gt;
&lt;li&gt;强制性转换的优先级高于四则运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 会报错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 不会报错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;运算符优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符优先级&#34;&gt;#&lt;/a&gt; 运算符优先级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单目运算符 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;  优先级最高&lt;/li&gt;
&lt;li&gt;结合关系一般自左向右，单目 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;  和赋值 &lt;code&gt;=&lt;/code&gt;  自右向左。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;复合赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复合赋值&#34;&gt;#&lt;/a&gt; 复合赋值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;5 个算术运算符， &lt;code&gt;+ - * / %&lt;/code&gt; ，可以和赋值运算符  &lt;code&gt;=&lt;/code&gt;  结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sum&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sum&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sum&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; total&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sum&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;递增递减运算符  &lt;code&gt;++&lt;/code&gt;   &lt;code&gt;--&lt;/code&gt; ，给变量 + 1 或 - 1&lt;/li&gt;
&lt;li&gt;前缀后缀：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//t1 先被赋值为 a 即 14， a 自加到 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//a 先自加到 15，t2 被赋值为 a 即 15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;编程题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程题&#34;&gt;#&lt;/a&gt; 编程题&lt;/h1&gt;
&lt;h2 id=&#34;题目1-温度转换5分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目1-温度转换5分&#34;&gt;#&lt;/a&gt; 题目 1. 温度转换（5 分）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;题目内容&lt;/strong&gt;&lt;br /&gt;
写一个将华氏温度转换成摄氏温度的程序，转换的公式是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;°F = (9/5)*°C + 32&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 C 表示摄氏温度，F 表示华氏温度。&lt;/p&gt;
&lt;p&gt;程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。&lt;/p&gt;
&lt;p&gt;提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(int)x;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 x 是要转换的那个浮点数。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入格式&lt;/strong&gt;&lt;br /&gt;
一个整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br /&gt;
一个整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入样例&lt;/strong&gt;&lt;br /&gt;
 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出样例&lt;/strong&gt;&lt;br /&gt;
 37&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解题代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题代码&#34;&gt;#&lt;/a&gt; 解题代码&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt; in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 获得输入的整数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fahrenheit &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 计算摄氏度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; centigrade &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fahrenheit &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 将浮点数转换为整数输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;centigrade&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/images/</guid>
            <title>Images</title>
            <link>https://xiaoplong.github.io/images/</link>
            <pubDate>Thu, 26 Dec 2013 22:46:49 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;This is a image test post.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/wallpaper-2572384.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/wallpaper-2311325.jpg&#34; alt=&#34;Caption&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/wallpaper-878514.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://placehold.it/350x150.jpg&#34; alt=&#34;Small Picture&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/videos/</guid>
            <title>Videos</title>
            <link>https://xiaoplong.github.io/videos/</link>
            <pubDate>Wed, 25 Dec 2013 00:19:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;This is a video test post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Youtube&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/TIbZDRXM-Tg&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vimeo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://player.vimeo.com/video/82090131&#34; frameborder=&#34;0&#34; loading=&#34;lazy&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/link-post-without-title/</guid>
            <title>www.google.com</title>
            <link>https://xiaoplong.github.io/link-post-without-title/</link>
            <pubDate>Tue, 24 Dec 2013 23:44:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;This is a link post without a title. The title should be the link with or without protocol. Clicking on the link should open &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nb29nbGUuY29tLw==&#34;&gt;Google&lt;/span&gt; in a new tab or window.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xiaoplong.github.io/long-title/</guid>
            <title>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.</title>
            <link>https://xiaoplong.github.io/long-title/</link>
            <pubDate>Tue, 24 Dec 2013 23:31:06 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;This post has a long title. Make sure the title displayed right.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
